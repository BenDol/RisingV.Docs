{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| RisingV.Core",
    "summary": "latest 1.0.0"
  },
  "README.html": {
    "href": "README.html",
    "title": "RisingV.Core | RisingV.Core",
    "summary": "RisingV.Core RisingV.Core is a core mod for V Rising that allows you to use RisingV mods. It provides a set of APIs and utilities that make it easier to create and manage mods for V Rising. Resources Credits"
  },
  "api/RisingV.Core.Aspects.BehaviourTreeAspect.html": {
    "href": "api/RisingV.Core.Aspects.BehaviourTreeAspect.html",
    "title": "Class BehaviourTreeAspect | RisingV.Core",
    "summary": "Class BehaviourTreeAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that has a behaviour tree. public class BehaviourTreeAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect BehaviourTreeAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BehaviourTreeAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public BehaviourTreeAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. BehaviourTreeAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public BehaviourTreeAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties BehaviourTreeBinding public BehaviourTreeBinding? BehaviourTreeBinding { get; } Property Value BehaviourTreeBinding? BehaviourTreeState public BehaviourTreeState? BehaviourTreeState { get; } Property Value BehaviourTreeState? BehaviourTreeStateMetadata public BehaviourTreeStateMetadata? BehaviourTreeStateMetadata { get; } Property Value BehaviourTreeStateMetadata? Queries public static BehaviourTreeQueries Queries { get; } Property Value BehaviourTreeQueries Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.BehaviourTreeQueries.html": {
    "href": "api/RisingV.Core.Aspects.BehaviourTreeQueries.html",
    "title": "Class BehaviourTreeQueries | RisingV.Core",
    "summary": "Class BehaviourTreeQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that have a behaviour tree. public class BehaviourTreeQueries : EntityQueries Inheritance object EntityQueries BehaviourTreeQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.BuffAspect.html": {
    "href": "api/RisingV.Core.Aspects.BuffAspect.html",
    "title": "Class BuffAspect | RisingV.Core",
    "summary": "Class BuffAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that understands buffs. public class BuffAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect BuffAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BuffAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public BuffAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. BuffAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public BuffAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties Queries public static BuffQueries Queries { get; } Property Value BuffQueries Methods ApplyBuff(Entity, PrefabGUID, out Entity, float, bool) Applies a buff to an entity with optional duration and persistence settings. public static bool ApplyBuff(Entity target, PrefabGUID buff, out Entity buffEntity, float duration = 0, bool tryPersistThroughDeath = false) Parameters target Entity Entity to apply the buff to. buff PrefabGUID The PrefabGUID of the buff to apply. buffEntity Entity Output parameter that receives the created buff entity. duration float Duration of the buff in seconds. 0 for infinite duration. tryPersistThroughDeath bool If true, the buff will attempt to persist through death. Returns bool True if the buff was successfully applied, false otherwise. ApplyCosmetic(Entity, PrefabGUID) Applies a cosmetic buff to an entity and removes gameplay-related components. public static void ApplyCosmetic(Entity entity, PrefabGUID visual) Parameters entity Entity The entity to apply the cosmetic to. visual PrefabGUID The PrefabGUID of the cosmetic buff to apply. CreateAndApply(Entity, out BuffAspect?, float, bool) public bool CreateAndApply(Entity target, out BuffAspect? buffAspect, float duration = 0, bool tryPersistThroughDeath = false) Parameters target Entity buffAspect BuffAspect duration float tryPersistThroughDeath bool Returns bool HasBuff(Entity, PrefabGUID) Checks if an entity has a specific buff. public static bool HasBuff(Entity entity, PrefabGUID buff) Parameters entity Entity The entity to check for the buff. buff PrefabGUID The PrefabGUID of the buff to check for. Returns bool True if the entity has the specified buff, false otherwise. Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Modify(BuffModificationTypes, bool) Modifies a buff entity with specified modification types. public void Modify(BuffModificationTypes buffModificationTypes, bool overwrite = false) Parameters buffModificationTypes BuffModificationTypes The types of modifications to apply. overwrite bool If true, clears existing modifications before applying new ones. Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false. RemoveBuff(Entity, PrefabGUID) Removes a specific buff from an entity. public static void RemoveBuff(Entity entity, PrefabGUID guid) Parameters entity Entity The entity to remove the buff from. guid PrefabGUID The PrefabGUID of the buff to remove."
  },
  "api/RisingV.Core.Aspects.BuffQueries.html": {
    "href": "api/RisingV.Core.Aspects.BuffQueries.html",
    "title": "Class BuffQueries | RisingV.Core",
    "summary": "Class BuffQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Provides queries for buff entities. public class BuffQueries : EntityQueries Inheritance object EntityQueries BuffQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.CharacterAspect.html": {
    "href": "api/RisingV.Core.Aspects.CharacterAspect.html",
    "title": "Class CharacterAspect | RisingV.Core",
    "summary": "Class CharacterAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Character aspect in the game, providing access to character-specific data and functionality. public class CharacterAspect : UnitAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect UnitAspect CharacterAspect Implements IAspect<Entity> IAspect Inherited Members UnitAspect.PrefabEnum UnitAspect.Health UnitAspect.MaxHealth UnitAspect.CurrentHealth UnitAspect.IsDead UnitAspect.UnitLevel UnitAspect.UnitRespawnTime UnitAspect.UnitStats UnitAspect.AddHealth(float) UnitAspect.SetHealth(float) UnitAspect.SetMaxHealth(float) UnitAspect.SetMaxRecoveryHealth(float) UnitAspect.ModifyAggroRadius(float, float?, float?, float?) UnitAspect.DisableAggro() UnitAspect.GiveKnockbackResistance(bool) UnitAspect.ModifyBuff(BuffModificationTypes, bool) EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors CharacterAspect(EntityAspect, bool) Initializes a new instance of the CharacterAspect class from an existing EntityAspect. public CharacterAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The existing EntityAspect to initialize from. strict bool If true, enforces strict type checking. Default is true. CharacterAspect(Entity, bool) Initializes a new instance of the CharacterAspect class from an Unity.Entities.Entity. public CharacterAspect(Entity entity, bool strict = true) Parameters entity Entity The Unity.Entities.Entity to initialize from. strict bool If true, enforces strict type checking. Default is true. Properties Equipment Gets the equipment aspect of the character, if available. public EquipmentAspect? Equipment { get; } Property Value EquipmentAspect Level Gets the level of the character, if available. public override float? Level { get; } Property Value float? Queries public static CharacterQueries Queries { get; } Property Value CharacterQueries Methods AddItemToInventory(PrefabGUID, int, out Entity, int, bool, bool, bool) Adds an item to an entity's inventory with optional equipping and dropping functionality. public AddItemResponse AddItemToInventory(PrefabGUID guid, int amount, out Entity entity, int startSlot = 0, bool dropRemainder = true, bool tryEquip = true, bool onlyFillEmptySlots = false) Parameters guid PrefabGUID The prefab GUID of the item to add. amount int The quantity of items to add. entity Entity Output parameter that receives the newly created item entity. startSlot int The inventory slot to place the item in. Default is 0. dropRemainder bool If true, drops excess items that don't fit in inventory. Default is true. tryEquip bool If true, attempts to equip the item after adding. Default is true. onlyFillEmptySlots bool If true, Will only fill empty slots and not auto stack. Default false. Returns AddItemResponse True if the item was successfully added to the inventory, false otherwise. ClearInventory() Clears the inventory of a specified entity. public void ClearInventory() GetBloodBuffInfo() Gets the blood buff information for the character, if available. public BloodBuffInfo? GetBloodBuffInfo() Returns BloodBuffInfo A ProjectM.UI.BloodBuffInfo object containing the blood buff information, or null if not available. GetDurabilityInfo(EquipmentType) Gets the durability information for a specified equipment type. public DurabilityInfo? GetDurabilityInfo(EquipmentType equipmentType) Parameters equipmentType EquipmentType The type of equipment to retrieve durability information for. Returns DurabilityInfo? A ProjectM.UI.DurabilityInfo object containing the durability information, or null if not available. GetInventoryItems(int) Gets the inventory items of the character at a specified index. public List<InventoryItemData>? GetInventoryItems(int index = 0) Parameters index int The index of the inventory to retrieve items from. Default is 0. Returns List<InventoryItemData> A list of inventory items, or null if the inventory entity is not found. GetItemSetInfo(PrefabGUID) Gets the item set information for a specified prefab GUID. public ItemSetInfo GetItemSetInfo(PrefabGUID prefabGuid) Parameters prefabGuid PrefabGUID The prefab GUID to retrieve item set information for. Returns ItemSetInfo A ProjectM.UI.ItemSetInfo object containing the item set information, or null if not available. GetSlotCounts() public (int freeSlots, int totalSlots) GetSlotCounts() Returns (int freeSlots, int totalSlots) GetStashes(bool) Gets the stashes of the character, optionally filtering by allied only. public IEnumerable<InventoryAspect> GetStashes(bool alliedOnly = false) Parameters alliedOnly bool If true, only retrieves stashes that are allied. Default is false. Returns IEnumerable<InventoryAspect> An enumerable collection of InventoryAspect representing the stashes. GetUnlockInfo(PrefabGUID) Gets the unlock information for a specified prefab GUID. public UnlockInfo? GetUnlockInfo(PrefabGUID prefabGuid) Parameters prefabGuid PrefabGUID The prefab GUID to retrieve unlock information for. Returns UnlockInfo A ProjectM.UI.UnlockInfo object containing the unlock information, or null if not available. Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false. TryGiveItem(PrefabGUID, int, out Entity) Attempts to give an item to the character's inventory. public bool TryGiveItem(PrefabGUID itemGuid, int amount, out Entity itemEntity) Parameters itemGuid PrefabGUID The prefab GUID of the item to give. amount int The quantity of the item to give. itemEntity Entity Output parameter that receives the newly created item entity. Returns bool True if the item was successfully given, false otherwise."
  },
  "api/RisingV.Core.Aspects.CharacterQueries.html": {
    "href": "api/RisingV.Core.Aspects.CharacterQueries.html",
    "title": "Class CharacterQueries | RisingV.Core",
    "summary": "Class CharacterQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Provides queries for character entities in the game. public class CharacterQueries : EntityQueries Inheritance object EntityQueries CharacterQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.CombatAspect.html": {
    "href": "api/RisingV.Core.Aspects.CombatAspect.html",
    "title": "Class CombatAspect | RisingV.Core",
    "summary": "Class CombatAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that is related to combat. public class CombatAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect CombatAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors CombatAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public CombatAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. CombatAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public CombatAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties GenericCombatMovementData public GenericCombatMovementData? GenericCombatMovementData { get; } Property Value GenericCombatMovementData? Queries public static CombatQueries Queries { get; } Property Value CombatQueries ResistanceData public ResistanceData? ResistanceData { get; } Property Value ResistanceData? Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.CombatQueries.html": {
    "href": "api/RisingV.Core.Aspects.CombatQueries.html",
    "title": "Class CombatQueries | RisingV.Core",
    "summary": "Class CombatQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for combat-related entities. public class CombatQueries : EntityQueries Inheritance object EntityQueries CombatQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.ComponentMonolith.html": {
    "href": "api/RisingV.Core.Aspects.ComponentMonolith.html",
    "title": "Class ComponentMonolith | RisingV.Core",
    "summary": "Class ComponentMonolith Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll A monolithic component that provides access to various components of an entity. public class ComponentMonolith Inheritance object ComponentMonolith Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ComponentMonolith(EntityAspect) Initializes a new instance of the ComponentMonolith class with the specified entity. public ComponentMonolith(EntityAspect aspect) Parameters aspect EntityAspect The entity aspect to wrap. ComponentMonolith(Entity) A monolithic component that provides access to various components of an entity. public ComponentMonolith(Entity entity) Parameters entity Entity The entity to wrap. Properties AdminUser public AdminUser? AdminUser { get; } Property Value AdminUser? BehaviourTreeBinding public BehaviourTreeBinding? BehaviourTreeBinding { get; } Property Value BehaviourTreeBinding? BehaviourTreeState public BehaviourTreeState? BehaviourTreeState { get; } Property Value BehaviourTreeState? BehaviourTreeStateMetadata public BehaviourTreeStateMetadata? BehaviourTreeStateMetadata { get; } Property Value BehaviourTreeStateMetadata? BloodConsumeSource public BloodConsumeSource? BloodConsumeSource { get; } Property Value BloodConsumeSource? Buff public Buff? Buff { get; } Property Value Buff? CurrentHealth public float? CurrentHealth { get; } Property Value float? DeathBuff public DeathBuff? DeathBuff { get; } Property Value DeathBuff? DeathRagdollForce public DeathRagdollForce? DeathRagdollForce { get; } Property Value DeathRagdollForce? DestroyData public DestroyData? DestroyData { get; } Property Value DestroyData? DestroyState public DestroyState? DestroyState { get; } Property Value DestroyState? DropTable public DropTable? DropTable { get; } Property Value DropTable? Entity public Entity Entity { get; } Property Value Entity EntityCategory public EntityCategory? EntityCategory { get; } Property Value EntityCategory? EntityManager public EntityManager EntityManager { get; } Property Value EntityManager EntityOwner public EntityOwner? EntityOwner { get; } Property Value EntityOwner? EquipableData public EquippableData? EquipableData { get; } Property Value EquippableData? Equipment public Equipment? Equipment { get; } Property Value Equipment? EquipmentType public EquipmentType? EquipmentType { get; } Property Value EquipmentType? Follower public Follower? Follower { get; } Property Value Follower? FrameChanged public FrameChanged? FrameChanged { get; } Property Value FrameChanged? GenericCombatMovementData public GenericCombatMovementData? GenericCombatMovementData { get; } Property Value GenericCombatMovementData? Health public Health? Health { get; } Property Value Health? HybridModelSeed public HybridModelSeed? HybridModelSeed { get; } Property Value HybridModelSeed? HybridModelState public HybridModelState? HybridModelState { get; } Property Value HybridModelState? InventoryBuffer public InventoryBuffer? InventoryBuffer { get; } Property Value InventoryBuffer? InventoryBuffers public List<InventoryBuffer>? InventoryBuffers { get; } Property Value List<InventoryBuffer> IsDead public bool? IsDead { get; } Property Value bool? IsGatherable public bool IsGatherable { get; } Property Value bool IsMinion public bool IsMinion { get; } Property Value bool IsProjectile public bool IsProjectile { get; } Property Value bool IsResource public bool IsResource { get; } Property Value bool IsSpell public bool IsSpell { get; } Property Value bool IsStructure public bool IsStructure { get; } Property Value bool IsTerrain public bool IsTerrain { get; } Property Value bool IsUnit public bool IsUnit { get; } Property Value bool ItemCategory public ItemCategory? ItemCategory { get; } Property Value ItemCategory? ItemData public ItemData? ItemData { get; } Property Value ItemData? ItemType public ItemType? ItemType { get; } Property Value ItemType? LifeTime public LifeTime? LifeTime { get; } Property Value LifeTime? LocalToWorld public LocalToWorld? LocalToWorld { get; } Property Value LocalToWorld? LocalTransform public LocalTransform? LocalTransform { get; } Property Value LocalTransform? MainCategory public MainEntityCategory? MainCategory { get; } Property Value MainEntityCategory? ManagedItemData public ManagedItemData? ManagedItemData { get; } Property Value ManagedItemData MapCollision public MapCollision? MapCollision { get; } Property Value MapCollision? MaterialCategory public MaterialCategory? MaterialCategory { get; } Property Value MaterialCategory? MaxHealth public float? MaxHealth { get; } Property Value float? MaxRecoveryHealth public float? MaxRecoveryHealth { get; } Property Value float? Minion public Minion? Minion { get; } Property Value Minion? MoveEntity public MoveEntity? MoveEntity { get; } Property Value MoveEntity? MoveVelocity public MoveVelocity? MoveVelocity { get; } Property Value MoveVelocity? Movement public Movement? Movement { get; } Property Value Movement? NetworkId public NetworkId? NetworkId { get; } Property Value NetworkId? NetworkSnapshot public NetworkSnapshot? NetworkSnapshot { get; } Property Value NetworkSnapshot? NetworkedTimeout public NetworkedTimeout? NetworkedTimeout { get; } Property Value NetworkedTimeout? PlayerCharacter public PlayerCharacter? PlayerCharacter { get; } Property Value PlayerCharacter? ResistanceData public ResistanceData? ResistanceData { get; } Property Value ResistanceData? ResourceLevel public int? ResourceLevel { get; } Property Value int? Rotation public Rotation? Rotation { get; } Property Value Rotation? SpawnTransform public SpawnTransform? SpawnTransform { get; } Property Value SpawnTransform? StructureCategory public StructureCategory? StructureCategory { get; } Property Value StructureCategory? Team public Team? Team { get; } Property Value Team? TeamReference public TeamReference? TeamReference { get; } Property Value TeamReference? TimeOfDeath public double? TimeOfDeath { get; } Property Value double? Translation public Translation? Translation { get; } Property Value Translation? UnitCategory public UnitCategory? UnitCategory { get; } Property Value UnitCategory? UnitLevel public UnitLevel? UnitLevel { get; } Property Value UnitLevel? UnitRespawnTime public UnitRespawnTime? UnitRespawnTime { get; } Property Value UnitRespawnTime? UnitStats public UnitStats? UnitStats { get; } Property Value UnitStats? UpToDateUserBitMask public UpToDateUserBitMask? UpToDateUserBitMask { get; } Property Value UpToDateUserBitMask? User public User? User { get; } Property Value User? World public World World { get; } Property Value World YieldResourcesOnDamageTaken public YieldResourcesOnDamageTaken? YieldResourcesOnDamageTaken { get; } Property Value YieldResourcesOnDamageTaken? Methods GetBufferInternal<T>() Gets the buffer of type T from the entity. public List<T>? GetBufferInternal<T>() where T : struct Returns List<T> A list of type T if the buffer exists; otherwise, null. Type Parameters T The type of the buffer to retrieve. GetComponentData<T>() Gets the component data of type T from the entity. public T? GetComponentData<T>() where T : new() Returns T The component data of type T if it exists; otherwise, null. Type Parameters T The type of the component data to retrieve. GetManagedComponentData<T>() Gets the component data of type T from the entity, or returns a default value if it does not exist. public T? GetManagedComponentData<T>() where T : class Returns T The component data of type T if it exists; otherwise, a new instance of T. Type Parameters T The type of the component data to retrieve. Of(Entity) public static ComponentMonolith Of(Entity entity) Parameters entity Entity Returns ComponentMonolith"
  },
  "api/RisingV.Core.Aspects.EntityAspect.html": {
    "href": "api/RisingV.Core.Aspects.EntityAspect.html",
    "title": "Class EntityAspect | RisingV.Core",
    "summary": "Class EntityAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity in the game world. public class EntityAspect : BaseAspect<Entity>, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect Implements IAspect<Entity> IAspect Derived BehaviourTreeAspect BuffAspect CombatAspect GatherableAspect HybridModelAspect InventoryAspect ItemAspect MoveableAspect NetworkAspect StructureAspect UnitAspect Inherited Members BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EntityAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public EntityAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. EntityAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public EntityAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties BloodConsumeSource public BloodConsumeSource? BloodConsumeSource { get; } Property Value BloodConsumeSource? Components Gets the component monolith for this entity, which provides access to various components and their data. public ComponentMonolith Components { get; } Property Value ComponentMonolith DestroyData public DestroyData? DestroyData { get; } Property Value DestroyData? DestroyState public DestroyState? DestroyState { get; } Property Value DestroyState? DropTable public DropTable? DropTable { get; } Property Value DropTable? Entity Gets the target entity of this aspect. public Entity Entity { get; } Property Value Entity EntityCategory public EntityCategory? EntityCategory { get; } Property Value EntityCategory? Follower public Follower? Follower { get; } Property Value Follower? HasDrops public bool HasDrops { get; } Property Value bool IsBehaviourTree public bool IsBehaviourTree { get; } Property Value bool IsCharacter public bool IsCharacter { get; } Property Value bool IsCombat public bool IsCombat { get; } Property Value bool IsEntity Indicates whether this aspect is an entity aspect. public override bool IsEntity { get; } Property Value bool IsGatherable public bool IsGatherable { get; } Property Value bool IsHybridModel public bool IsHybridModel { get; } Property Value bool IsInventory public bool IsInventory { get; } Property Value bool IsItem public bool IsItem { get; } Property Value bool IsMoveable public bool IsMoveable { get; } Property Value bool IsNetwork public bool IsNetwork { get; } Property Value bool IsNpc public bool IsNpc { get; } Property Value bool IsPlayer public bool IsPlayer { get; } Property Value bool IsResource public bool IsResource { get; } Property Value bool IsStructure public bool IsStructure { get; } Property Value bool IsUnit public bool IsUnit { get; } Property Value bool LocalToWorld public LocalToWorld? LocalToWorld { get; } Property Value LocalToWorld? LocalTransform public LocalTransform? LocalTransform { get; } Property Value LocalTransform? MainCategory public MainEntityCategory? MainCategory { get; } Property Value MainEntityCategory? MapCollision public MapCollision? MapCollision { get; } Property Value MapCollision? MaterialCategory public MaterialCategory? MaterialCategory { get; } Property Value MaterialCategory? MoveEntity public MoveEntity? MoveEntity { get; } Property Value MoveEntity? MoveVelocity public MoveVelocity? MoveVelocity { get; } Property Value MoveVelocity? NetworkId Gets the network ID of the entity, which is used for network communication. public virtual NetworkId NetworkId { get; } Property Value NetworkId PackedNetworkId Packs the network ID into a ulong for efficient storage and transmission. public virtual ulong PackedNetworkId { get; } Property Value ulong PrefabGuid Gets the PrefabGUID of the entity, which is used to identify the prefab associated with this entity. public PrefabGUID PrefabGuid { get; } Property Value PrefabGUID PrefabName Looks up the name of the prefab associated with this entity's PrefabGUID. public string PrefabName { get; } Property Value string Queries public static EntityQueries Queries { get; } Property Value EntityQueries Rotation public Rotation? Rotation { get; } Property Value Rotation? SpawnTransform public SpawnTransform? SpawnTransform { get; } Property Value SpawnTransform? Team public Team? Team { get; } Property Value Team? TeamReference public TeamReference? TeamReference { get; } Property Value TeamReference? Translation public Translation? Translation { get; } Property Value Translation? UnitCategory public UnitCategory? UnitCategory { get; } Property Value UnitCategory? WorldPosition public float3 WorldPosition { get; } Property Value float3 Methods Create<TX>(Entity, bool, params object?[]?) Creates a new instance of the EntityAspect class for the specified entity. public static TX Create<TX>(Entity entity, bool strict = true, params object?[]? args) where TX : EntityAspect Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. args object[] Optional arguments for the aspect creation. Returns TX Returns a new instance of the specified aspect type. Type Parameters TX The type of the aspect to create, which must inherit from EntityAspect. DisplayName(Entity) Displays the name of the entity for debugging purposes. protected override string DisplayName(Entity entity) Parameters entity Entity The entity to display. Returns string Returns the debug name of the entity. DropItemNearby(PrefabGUID, int) Drops an item nearby the entity's current position. public void DropItemNearby(PrefabGUID itemGuid, int amount) Parameters itemGuid PrefabGUID The PrefabGUID of the item to drop. amount int The amount of the item to drop. DumpUnqualifiedTarget(Entity, string) Dumps the unqualified target entity with an error message. protected override void DumpUnqualifiedTarget(Entity obj, string errorMessage) Parameters obj Entity The entity that does not qualify. errorMessage string The error message to display if the entity does not qualify. ExtraDetails(Entity) Provides extra details about the entity, such as its unit category and main category. protected override string ExtraDetails(Entity entity) Parameters entity Entity The entity to provide details for. Returns string Returns a string containing extra details about the entity. GetBufferInternal<T>() Gets the component data of a specific type from the entity's components, allowing for unmanaged types. public List<T>? GetBufferInternal<T>() where T : struct Returns List<T> Returns the unmanaged component data of type T if it exists, otherwise null. Type Parameters T The type of unmanaged component data to retrieve. GetComponentData<T>() Gets the component data of a specific type from the entity's components. public T? GetComponentData<T>() where T : new() Returns T Returns the component data of type T if it exists, otherwise null. Type Parameters T The type of component data to retrieve. GetManagedComponentData<T>() Gets the component data of a specific type from the entity's components, allowing for managed types. public T? GetManagedComponentData<T>() where T : class Returns T Returns the managed component data of type T if it exists, otherwise null. Type Parameters T The type of managed component data to retrieve. GetRawMetadata() Gets the raw metadata of the entity, which is typically the name of the interactable if it exists. protected override string GetRawMetadata() Returns string Has(ComponentType) Checks if the entity has a specific component type using a Unity.Entities.ComponentType. public bool Has(ComponentType componentType) Parameters componentType ComponentType The component type to check for. Returns bool Returns true if the entity has the component, otherwise false. Has<T>() Checks if the entity has a specific component type. public bool Has<T>() Returns bool Returns true if the entity has the component, otherwise false. Type Parameters T The type of component to check for. IsInCastle() Checks if the entity is currently in a castle area. public bool IsInCastle() Returns bool Returns true if the entity is in a castle area, otherwise false. Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity obj) Parameters obj Entity The entity to check. Returns bool Returns true if the entity qualifies, otherwise false. SetRawMetadata(string) Sets the raw metadata for the entity, which is typically the name of the interactable. protected override void SetRawMetadata(string json) Parameters json string The JSON string representing the name of the interactable."
  },
  "api/RisingV.Core.Aspects.EntityQueries.html": {
    "href": "api/RisingV.Core.Aspects.EntityQueries.html",
    "title": "Class EntityQueries | RisingV.Core",
    "summary": "Class EntityQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Abstract class for entity queries. public abstract class EntityQueries Inheritance object EntityQueries Derived BehaviourTreeQueries BuffQueries CharacterQueries CombatQueries GatherableQueries HybridModelQueries InventoryQueries ItemQueries StructureQueries UnitQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public abstract EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.EquipmentAspect.html": {
    "href": "api/RisingV.Core.Aspects.EquipmentAspect.html",
    "title": "Class EquipmentAspect | RisingV.Core",
    "summary": "Class EquipmentAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect for equipment entities in the game. public class EquipmentAspect : BaseAspect<Equipment>, IAspect<Equipment>, IAspect Inheritance object BaseAspect<Equipment> EquipmentAspect Implements IAspect<Equipment> IAspect Inherited Members BaseAspect<Equipment>.DumpUnqualifiedTargets BaseAspect<Equipment>.Create<TX>(Equipment, bool, params object[]) BaseAspect<Equipment>.Log BaseAspect<Equipment>.IsEntity BaseAspect<Equipment>.World BaseAspect<Equipment>.EntityManager BaseAspect<Equipment>.Target BaseAspect<Equipment>.Strict BaseAspect<Equipment>.MetaSerializer BaseAspect<Equipment>.GetRawMetadata() BaseAspect<Equipment>.SetRawMetadata(string) BaseAspect<Equipment>.ReadMetadata<TData>() BaseAspect<Equipment>.WriteMetadata<TData>(TData) BaseAspect<Equipment>.Initialize(Equipment) BaseAspect<Equipment>.As<TX>(bool, params object[]) BaseAspect<Equipment>.DumpUnqualifiedTarget(Equipment, string) BaseAspect<Equipment>.OnUnqualifiedTarget(Equipment, string) BaseAspect<Equipment>.UnqualifiedTargetMessage(Equipment) BaseAspect<Equipment>.UnqualifiedTargetError(Equipment, string) BaseAspect<Equipment>.DisplayName() BaseAspect<Equipment>.DisplayName(Equipment) BaseAspect<Equipment>.ExtraDetails(Equipment) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EquipmentAspect(Equipment, bool) Initializes a new instance of the RisingV.Shared.Aspects.BaseAspect<T> class with the specified target object. public EquipmentAspect(Equipment equipment, bool strict = true) Parameters equipment Equipment strict bool If true, throws an exception if the target does not qualify for the aspect. EquipmentAspect(BaseAspect<Equipment>, bool) Initializes a new instance of the RisingV.Shared.Aspects.BaseAspect<T> class with another aspect as the base. public EquipmentAspect(BaseAspect<Equipment> aspect, bool strict = true) Parameters aspect BaseAspect<Equipment> The aspect to base this instance on. strict bool If true, throws an exception if the target does not qualify for the aspect. Properties ArmorLevel public float ArmorLevel { get; } Property Value float Chest public ItemAspect? Chest { get; } Property Value ItemAspect Cloak public ItemAspect? Cloak { get; } Property Value ItemAspect Footgear public ItemAspect? Footgear { get; } Property Value ItemAspect Gloves public ItemAspect? Gloves { get; } Property Value ItemAspect Headgear public ItemAspect? Headgear { get; } Property Value ItemAspect IsEquipment Indicates whether this aspect is an equipment aspect. public override bool IsEquipment { get; } Property Value bool Jewelry public ItemAspect? Jewelry { get; } Property Value ItemAspect Leg public ItemAspect? Leg { get; } Property Value ItemAspect Level public float Level { get; } Property Value float SpellLevel public float SpellLevel { get; } Property Value float Weapon public ItemAspect? Weapon { get; } Property Value ItemAspect WeaponLevel public float WeaponLevel { get; } Property Value float Methods Is(Equipment) public static bool Is(Equipment equipment) Parameters equipment Equipment Returns bool Qualifies(Equipment) Determines if the target object qualifies for this aspect. public override bool Qualifies(Equipment equipment) Parameters equipment Equipment Returns bool"
  },
  "api/RisingV.Core.Aspects.GatherableAspect.html": {
    "href": "api/RisingV.Core.Aspects.GatherableAspect.html",
    "title": "Class GatherableAspect | RisingV.Core",
    "summary": "Class GatherableAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that can be gathered, such as resources or materials. public class GatherableAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect GatherableAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors GatherableAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public GatherableAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. GatherableAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public GatherableAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties IsExplosives public bool IsExplosives { get; } Property Value bool IsHorseMount public bool IsHorseMount { get; } Property Value bool IsInvulnerable public bool IsInvulnerable { get; } Property Value bool IsLightArmor public bool IsLightArmor { get; } Property Value bool IsMagic public bool IsMagic { get; } Property Value bool IsMassiveResource public bool IsMassiveResource { get; } Property Value bool IsMineral public bool IsMineral { get; } Property Value bool IsMonsterGate public bool IsMonsterGate { get; } Property Value bool IsVBlood public bool IsVBlood { get; } Property Value bool IsVegetation public bool IsVegetation { get; } Property Value bool IsWood public bool IsWood { get; } Property Value bool Queries public static GatherableQueries Queries { get; } Property Value GatherableQueries ResourceLevel public int? ResourceLevel { get; } Property Value int? YieldResourcesOnDamageTaken public YieldResourcesOnDamageTaken? YieldResourcesOnDamageTaken { get; } Property Value YieldResourcesOnDamageTaken? Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.GatherableQueries.html": {
    "href": "api/RisingV.Core.Aspects.GatherableQueries.html",
    "title": "Class GatherableQueries | RisingV.Core",
    "summary": "Class GatherableQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for gatherable entities in the game world. public class GatherableQueries : EntityQueries Inheritance object EntityQueries GatherableQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.HybridModelAspect.html": {
    "href": "api/RisingV.Core.Aspects.HybridModelAspect.html",
    "title": "Class HybridModelAspect | RisingV.Core",
    "summary": "Class HybridModelAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that is part of the hybrid model system. public class HybridModelAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect HybridModelAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors HybridModelAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public HybridModelAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. HybridModelAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public HybridModelAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties DeathRagdollForce public DeathRagdollForce? DeathRagdollForce { get; } Property Value DeathRagdollForce? HybridModelSeed public HybridModelSeed? HybridModelSeed { get; } Property Value HybridModelSeed? HybridModelState public HybridModelState? HybridModelState { get; } Property Value HybridModelState? Queries public static HybridModelQueries Queries { get; } Property Value HybridModelQueries Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.HybridModelQueries.html": {
    "href": "api/RisingV.Core.Aspects.HybridModelQueries.html",
    "title": "Class HybridModelQueries | RisingV.Core",
    "summary": "Class HybridModelQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that are part of the hybrid model system. public class HybridModelQueries : EntityQueries Inheritance object EntityQueries HybridModelQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.InventoryAspect.html": {
    "href": "api/RisingV.Core.Aspects.InventoryAspect.html",
    "title": "Class InventoryAspect | RisingV.Core",
    "summary": "Class InventoryAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that has an inventory. public class InventoryAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect InventoryAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors InventoryAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public InventoryAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. InventoryAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public InventoryAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties Items Gets the inventory items of this entity. public List<InventoryItemData> Items { get; } Property Value List<InventoryItemData> Queries public static InventoryQueries Queries { get; } Property Value InventoryQueries Methods CountItems(PrefabGUID?, bool) Counts the number of items in the inventory, optionally filtering by a specific item GUID. public int CountItems(PrefabGUID? itemGuid = null, bool includeStacks = true) Parameters itemGuid PrefabGUID? The GUID of the item to filter by. If null, all items are counted. includeStacks bool If true, counts the total amount of items including stacks; if false, counts each item individually. Returns int The total count of items in the inventory. Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.InventoryItemData.html": {
    "href": "api/RisingV.Core.Aspects.InventoryItemData.html",
    "title": "Struct InventoryItemData | RisingV.Core",
    "summary": "Struct InventoryItemData Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Represents data for an inventory item. public struct InventoryItemData : IData Implements IData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Amount public int Amount { readonly get; set; } Property Value int Item public ItemAspect Item { readonly get; set; } Property Value ItemAspect MaxAmountOverride public int MaxAmountOverride { readonly get; set; } Property Value int Slot public int Slot { readonly get; set; } Property Value int"
  },
  "api/RisingV.Core.Aspects.InventoryQueries.html": {
    "href": "api/RisingV.Core.Aspects.InventoryQueries.html",
    "title": "Class InventoryQueries | RisingV.Core",
    "summary": "Class InventoryQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that have an inventory. public class InventoryQueries : EntityQueries Inheritance object EntityQueries InventoryQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery Stashes public EntityQuery Stashes { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.ItemAspect.html": {
    "href": "api/RisingV.Core.Aspects.ItemAspect.html",
    "title": "Class ItemAspect | RisingV.Core",
    "summary": "Class ItemAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that represents an item. public class ItemAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect ItemAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public ItemAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. Properties EquipmentType public EquipmentType? EquipmentType { get; } Property Value EquipmentType? ItemCategory public ItemCategory? ItemCategory { get; } Property Value ItemCategory? ItemType public ItemType? ItemType { get; } Property Value ItemType? Level Gets the level of the item associated with this aspect. public ItemLevel? Level { get; } Property Value ItemLevel? Name Gets the name of the item associated with this aspect. public string? Name { get; } Property Value string Queries public static ItemQueries Queries { get; } Property Value ItemQueries Methods GetConsumableTooltip() Gets the tooltip for the consumable item associated with this aspect. public string? GetConsumableTooltip() Returns string Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.ItemQueries.html": {
    "href": "api/RisingV.Core.Aspects.ItemQueries.html",
    "title": "Class ItemQueries | RisingV.Core",
    "summary": "Class ItemQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that represent items. public class ItemQueries : EntityQueries Inheritance object EntityQueries ItemQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.MinionAspect.html": {
    "href": "api/RisingV.Core.Aspects.MinionAspect.html",
    "title": "Class MinionAspect | RisingV.Core",
    "summary": "Class MinionAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that represents a minion in the game. public class MinionAspect : UnitAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect UnitAspect MinionAspect Implements IAspect<Entity> IAspect Inherited Members UnitAspect.PrefabEnum UnitAspect.Health UnitAspect.MaxHealth UnitAspect.CurrentHealth UnitAspect.IsDead UnitAspect.UnitLevel UnitAspect.UnitRespawnTime UnitAspect.UnitStats UnitAspect.Level UnitAspect.AddHealth(float) UnitAspect.SetHealth(float) UnitAspect.SetMaxHealth(float) UnitAspect.SetMaxRecoveryHealth(float) UnitAspect.ModifyAggroRadius(float, float?, float?, float?) UnitAspect.DisableAggro() UnitAspect.GiveKnockbackResistance(bool) UnitAspect.ModifyBuff(BuffModificationTypes, bool) EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors MinionAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public MinionAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. MinionAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public MinionAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties Minion public Minion? Minion { get; } Property Value Minion? Queries public static MinionQueries Queries { get; } Property Value MinionQueries Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.MinionQueries.html": {
    "href": "api/RisingV.Core.Aspects.MinionQueries.html",
    "title": "Class MinionQueries | RisingV.Core",
    "summary": "Class MinionQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that represent minions in the game. public class MinionQueries : UnitQueries Inheritance object EntityQueries UnitQueries MinionQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.MoveableAspect.html": {
    "href": "api/RisingV.Core.Aspects.MoveableAspect.html",
    "title": "Class MoveableAspect | RisingV.Core",
    "summary": "Class MoveableAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that can be moved, providing access to movement and velocity data. public class MoveableAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect MoveableAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors MoveableAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public MoveableAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. MoveableAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public MoveableAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties Movement public Movement? Movement { get; } Property Value Movement? Queries public static MoveableQueries Queries { get; } Property Value MoveableQueries Velocity public Velocity? Velocity { get; } Property Value Velocity? Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.MoveableQueries.html": {
    "href": "api/RisingV.Core.Aspects.MoveableQueries.html",
    "title": "Class MoveableQueries | RisingV.Core",
    "summary": "Class MoveableQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that can be moved, specifically those with movement components. public class MoveableQueries : UnitQueries Inheritance object EntityQueries UnitQueries MoveableQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.NetworkAspect.html": {
    "href": "api/RisingV.Core.Aspects.NetworkAspect.html",
    "title": "Class NetworkAspect | RisingV.Core",
    "summary": "Class NetworkAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that has network-related components. public class NetworkAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect NetworkAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors NetworkAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public NetworkAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. NetworkAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public NetworkAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties FrameChanged public FrameChanged? FrameChanged { get; } Property Value FrameChanged? NetworkId Gets the network ID of the entity, which is used for network communication. public override NetworkId NetworkId { get; } Property Value NetworkId NetworkSnapshot public NetworkSnapshot? NetworkSnapshot { get; } Property Value NetworkSnapshot? NetworkedTimeout public NetworkedTimeout? NetworkedTimeout { get; } Property Value NetworkedTimeout? Queries public static NetworkQueries Queries { get; } Property Value NetworkQueries UpToDateUserBitMask public UpToDateUserBitMask? UpToDateUserBitMask { get; } Property Value UpToDateUserBitMask? Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.NetworkQueries.html": {
    "href": "api/RisingV.Core.Aspects.NetworkQueries.html",
    "title": "Class NetworkQueries | RisingV.Core",
    "summary": "Class NetworkQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that have network-related components. public class NetworkQueries : UnitQueries Inheritance object EntityQueries UnitQueries NetworkQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.NpcAspect.html": {
    "href": "api/RisingV.Core.Aspects.NpcAspect.html",
    "title": "Class NpcAspect | RisingV.Core",
    "summary": "Class NpcAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that represents a non-player character (NPC). public class NpcAspect : UnitAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect UnitAspect NpcAspect Implements IAspect<Entity> IAspect Inherited Members UnitAspect.PrefabEnum UnitAspect.Health UnitAspect.MaxHealth UnitAspect.CurrentHealth UnitAspect.IsDead UnitAspect.UnitLevel UnitAspect.UnitRespawnTime UnitAspect.UnitStats UnitAspect.Level UnitAspect.AddHealth(float) UnitAspect.SetHealth(float) UnitAspect.SetMaxHealth(float) UnitAspect.SetMaxRecoveryHealth(float) UnitAspect.ModifyAggroRadius(float, float?, float?, float?) UnitAspect.DisableAggro() UnitAspect.GiveKnockbackResistance(bool) UnitAspect.ModifyBuff(BuffModificationTypes, bool) EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors NpcAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public NpcAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. NpcAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public NpcAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Fields NpcCategories public static readonly HashSet<UnitCategory> NpcCategories Field Value HashSet<UnitCategory> Properties Queries public static NpcQueries Queries { get; } Property Value NpcQueries Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.NpcQueries.html": {
    "href": "api/RisingV.Core.Aspects.NpcQueries.html",
    "title": "Class NpcQueries | RisingV.Core",
    "summary": "Class NpcQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that represent non-player characters (NPCs). public class NpcQueries : UnitQueries Inheritance object EntityQueries UnitQueries NpcQueries Inherited Members UnitQueries.All object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Aspects.PlayerAspect.html": {
    "href": "api/RisingV.Core.Aspects.PlayerAspect.html",
    "title": "Class PlayerAspect | RisingV.Core",
    "summary": "Class PlayerAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Aspect of an entity that represents a player in the game. public class PlayerAspect : UnitAspect, IAspect<Entity>, IAspect, IData Inheritance object BaseAspect<Entity> EntityAspect UnitAspect PlayerAspect Implements IAspect<Entity> IAspect IData Inherited Members UnitAspect.PrefabEnum UnitAspect.Health UnitAspect.MaxHealth UnitAspect.CurrentHealth UnitAspect.IsDead UnitAspect.UnitLevel UnitAspect.UnitRespawnTime UnitAspect.UnitStats UnitAspect.AddHealth(float) UnitAspect.SetHealth(float) UnitAspect.SetMaxHealth(float) UnitAspect.SetMaxRecoveryHealth(float) UnitAspect.ModifyAggroRadius(float, float?, float?, float?) UnitAspect.DisableAggro() UnitAspect.GiveKnockbackResistance(bool) UnitAspect.ModifyBuff(BuffModificationTypes, bool) EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public PlayerAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. PlayerAspect(FixedString64Bytes, ulong, Entity, Entity, bool) Initializes a new instance of the PlayerAspect class. public PlayerAspect(FixedString64Bytes characterName, ulong steamId, Entity userEntity, Entity charEntity, bool strict = true) Parameters characterName FixedString64Bytes The name of the character. steamId ulong The Steam ID of the player. userEntity Entity The entity representing the user. charEntity Entity The entity representing the character. strict bool If true, the aspect will only be valid if the entities have the required components. Exceptions ArgumentException Thrown if the userEntity does not have a User component or charEntity does not have a PlayerCharacter component. PlayerAspect(Entity, bool) Aspect of an entity that represents a player in the game. public PlayerAspect(Entity entity, bool strict = true) Parameters entity Entity The entity representing the player. strict bool If true, the aspect will only be valid if the entity has the required components. Properties AdminLevel public AdminLevel AdminLevel { get; } Property Value AdminLevel AdminUser public AdminUser? AdminUser { get; } Property Value AdminUser? CharEntity public Entity CharEntity { get; } Property Value Entity Character public CharacterAspect Character { get; } Property Value CharacterAspect CharacterName public FixedString64Bytes CharacterName { get; } Property Value FixedString64Bytes Equipment public EquipmentAspect? Equipment { get; } Property Value EquipmentAspect FromCharacter public FromCharacter FromCharacter { get; } Property Value FromCharacter IsAdmin public bool IsAdmin { get; } Property Value bool IsConnected public bool IsConnected { get; } Property Value bool Level public override float? Level { get; } Property Value float? PackedNetworkId Packs the network ID into a ulong for efficient storage and transmission. public override ulong PackedNetworkId { get; } Property Value ulong PlayerCharacter public PlayerCharacter? PlayerCharacter { get; } Property Value PlayerCharacter? Queries public static PlayerQueries Queries { get; } Property Value PlayerQueries SteamId public ulong SteamId { get; } Property Value ulong User public User User { get; } Property Value User UserContent public UserContentFlags? UserContent { get; } Property Value UserContentFlags? UserEntity public Entity UserEntity { get; } Property Value Entity Methods ClearInventory() Clears the player's inventory by removing all items. public void ClearInventory() CompleteAchievement(PrefabGUID, bool, bool) Completes an achievement for the player using a PrefabGUID. public bool CompleteAchievement(PrefabGUID achievementPrefabGuid, bool reapplyMode = false, bool logOnDuplicate = true) Parameters achievementPrefabGuid PrefabGUID The PrefabGUID of the achievement to complete. reapplyMode bool If true, the achievement will be reapplied even if it has already been completed. logOnDuplicate bool If true, logs a message if the achievement has already been completed. Returns bool True if the achievement was successfully completed; otherwise, false. CompleteAchievement(int, bool, bool) Completes an achievement for the player. public bool CompleteAchievement(int achievementPrefabGuid, bool reapplyMode = false, bool logOnDuplicate = true) Parameters achievementPrefabGuid int The GUID of the achievement prefab to complete. reapplyMode bool If true, the achievement will be reapplied even if it has already been completed. logOnDuplicate bool If true, logs a message if the achievement has already been completed. Returns bool True if the achievement was successfully completed; otherwise, false. Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TryGiveItem(PrefabGUID, int, out Entity) Attempts to give an item to the player's inventory. public bool TryGiveItem(PrefabGUID itemGuid, int amount, out Entity itemEntity) Parameters itemGuid PrefabGUID The GUID of the item to give. amount int The amount of the item to give. itemEntity Entity Output parameter that receives the item entity if the operation is successful. Returns bool True if the item was successfully given; otherwise, false."
  },
  "api/RisingV.Core.Aspects.PlayerQueries.html": {
    "href": "api/RisingV.Core.Aspects.PlayerQueries.html",
    "title": "Class PlayerQueries | RisingV.Core",
    "summary": "Class PlayerQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll Queries for entities that represent players in the game. public class PlayerQueries : UnitQueries Inheritance object EntityQueries UnitQueries PlayerQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery AllOnline public EntityQuery AllOnline { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.StructureAspect.html": {
    "href": "api/RisingV.Core.Aspects.StructureAspect.html",
    "title": "Class StructureAspect | RisingV.Core",
    "summary": "Class StructureAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll public class StructureAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect StructureAspect Implements IAspect<Entity> IAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StructureAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public StructureAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. StructureAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public StructureAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties Queries public static StructureQueries Queries { get; } Property Value StructureQueries StructureCategory public StructureCategory? StructureCategory { get; } Property Value StructureCategory? Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.StructureQueries.html": {
    "href": "api/RisingV.Core.Aspects.StructureQueries.html",
    "title": "Class StructureQueries | RisingV.Core",
    "summary": "Class StructureQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll public class StructureQueries : EntityQueries Inheritance object EntityQueries StructureQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.UnitAspect.html": {
    "href": "api/RisingV.Core.Aspects.UnitAspect.html",
    "title": "Class UnitAspect | RisingV.Core",
    "summary": "Class UnitAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll public class UnitAspect : EntityAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect UnitAspect Implements IAspect<Entity> IAspect Derived CharacterAspect MinionAspect NpcAspect PlayerAspect VBloodAspect Inherited Members EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors UnitAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public UnitAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. UnitAspect(Entity, bool) Initializes a new instance of the EntityAspect class with the specified entity. public UnitAspect(Entity entity, bool strict = true) Parameters entity Entity The entity to associate with this aspect. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity is null. Properties CurrentHealth public virtual float? CurrentHealth { get; } Property Value float? Health public virtual Health? Health { get; } Property Value Health? IsDead public virtual bool IsDead { get; } Property Value bool Level public virtual float? Level { get; } Property Value float? MaxHealth public virtual float? MaxHealth { get; } Property Value float? PrefabEnum public Unit PrefabEnum { get; } Property Value Unit Queries public static UnitQueries Queries { get; } Property Value UnitQueries UnitLevel public virtual UnitLevel? UnitLevel { get; } Property Value UnitLevel? UnitRespawnTime public virtual UnitRespawnTime? UnitRespawnTime { get; } Property Value UnitRespawnTime? UnitStats public virtual UnitStats? UnitStats { get; } Property Value UnitStats? Methods AddHealth(float) Adds health to the entity's health component, clamping it to the maximum health if set. public void AddHealth(float value) Parameters value float The amount of health to add (supports negative values). DisableAggro() Disables aggro for the entity, preventing others from attacking it. public void DisableAggro() GiveKnockbackResistance(bool) Gives the entity knockback resistance, preventing it from being knocked back or grabbed. public void GiveKnockbackResistance(bool rooted) Parameters rooted bool If true, the entity will not be knocked back or grabbed, simulating a rooted state. Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool ModifyAggroRadius(float, float?, float?, float?) Modifies the aggro radius of the entity. public void ModifyAggroRadius(float aggroCircleRadius, float? aggroConeRadius = null, float? alertCircleRadius = null, float? alertConeRadius = null) Parameters aggroCircleRadius float The radius of the aggro circle. aggroConeRadius float? The radius of the aggro cone. If null, defaults to the aggro circle radius. alertCircleRadius float? The radius of the alert circle. If null, defaults to the aggro circle radius. alertConeRadius float? The radius of the alert cone. If null, defaults to the aggro cone radius or aggro circle radius. ModifyBuff(BuffModificationTypes, bool) Modifies a buff entity with specified modification types. public void ModifyBuff(BuffModificationTypes buffModificationTypes, bool overwrite = false) Parameters buffModificationTypes BuffModificationTypes The types of modifications to apply. overwrite bool If true, clears existing modifications before applying new ones. Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false. SetHealth(float) Sets the health of the entity's health component, clamping it to the maximum health if set. public void SetHealth(float value) Parameters value float The health value to set. SetMaxHealth(float) Sets the maximum health of the entity's health component. public void SetMaxHealth(float value) Parameters value float The maximum health value to set. SetMaxRecoveryHealth(float) Sets the maximum recovery health of the entity's health component. public void SetMaxRecoveryHealth(float value) Parameters value float The maximum recovery health value to set."
  },
  "api/RisingV.Core.Aspects.UnitQueries.html": {
    "href": "api/RisingV.Core.Aspects.UnitQueries.html",
    "title": "Class UnitQueries | RisingV.Core",
    "summary": "Class UnitQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll public class UnitQueries : EntityQueries Inheritance object EntityQueries UnitQueries Derived MinionQueries MoveableQueries NetworkQueries NpcQueries PlayerQueries VBloodQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.VBloodAspect.html": {
    "href": "api/RisingV.Core.Aspects.VBloodAspect.html",
    "title": "Class VBloodAspect | RisingV.Core",
    "summary": "Class VBloodAspect Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll public class VBloodAspect : UnitAspect, IAspect<Entity>, IAspect Inheritance object BaseAspect<Entity> EntityAspect UnitAspect VBloodAspect Implements IAspect<Entity> IAspect Inherited Members UnitAspect.Health UnitAspect.MaxHealth UnitAspect.CurrentHealth UnitAspect.IsDead UnitAspect.UnitLevel UnitAspect.UnitRespawnTime UnitAspect.UnitStats UnitAspect.Level UnitAspect.AddHealth(float) UnitAspect.SetHealth(float) UnitAspect.SetMaxHealth(float) UnitAspect.SetMaxRecoveryHealth(float) UnitAspect.ModifyAggroRadius(float, float?, float?, float?) UnitAspect.DisableAggro() UnitAspect.GiveKnockbackResistance(bool) UnitAspect.ModifyBuff(BuffModificationTypes, bool) EntityAspect.Create<TX>(Entity, bool, params object[]) EntityAspect.Entity EntityAspect.PrefabGuid EntityAspect.PrefabName EntityAspect.NetworkId EntityAspect.PackedNetworkId EntityAspect.Components EntityAspect.GetRawMetadata() EntityAspect.SetRawMetadata(string) EntityAspect.DumpUnqualifiedTarget(Entity, string) EntityAspect.DisplayName(Entity) EntityAspect.ExtraDetails(Entity) EntityAspect.GetComponentData<T>() EntityAspect.GetManagedComponentData<T>() EntityAspect.GetBufferInternal<T>() EntityAspect.DestroyData EntityAspect.DestroyState EntityAspect.Translation EntityAspect.Rotation EntityAspect.LocalToWorld EntityAspect.WorldPosition EntityAspect.LocalTransform EntityAspect.SpawnTransform EntityAspect.MoveEntity EntityAspect.MoveVelocity EntityAspect.EntityCategory EntityAspect.MainCategory EntityAspect.UnitCategory EntityAspect.MaterialCategory EntityAspect.DropTable EntityAspect.HasDrops EntityAspect.BloodConsumeSource EntityAspect.Team EntityAspect.TeamReference EntityAspect.MapCollision EntityAspect.Follower EntityAspect.IsResource EntityAspect.IsEntity EntityAspect.IsPlayer EntityAspect.IsCharacter EntityAspect.IsBehaviourTree EntityAspect.IsCombat EntityAspect.IsGatherable EntityAspect.IsHybridModel EntityAspect.IsInventory EntityAspect.IsItem EntityAspect.IsMoveable EntityAspect.IsNetwork EntityAspect.IsNpc EntityAspect.IsStructure EntityAspect.IsUnit EntityAspect.Has<T>() EntityAspect.Has(ComponentType) EntityAspect.DropItemNearby(PrefabGUID, int) EntityAspect.IsInCastle() BaseAspect<Entity>.DumpUnqualifiedTargets BaseAspect<Entity>.Log BaseAspect<Entity>.IsEquipment BaseAspect<Entity>.World BaseAspect<Entity>.EntityManager BaseAspect<Entity>.Target BaseAspect<Entity>.Strict BaseAspect<Entity>.MetaSerializer BaseAspect<Entity>.ReadMetadata<TData>() BaseAspect<Entity>.WriteMetadata<TData>(TData) BaseAspect<Entity>.Initialize(Entity) BaseAspect<Entity>.As<TX>(bool, params object[]) BaseAspect<Entity>.OnUnqualifiedTarget(Entity, string) BaseAspect<Entity>.UnqualifiedTargetMessage(Entity) BaseAspect<Entity>.UnqualifiedTargetError(Entity, string) BaseAspect<Entity>.DisplayName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors VBloodAspect(EntityAspect, bool) Initializes a new instance of the EntityAspect class with another aspect. public VBloodAspect(EntityAspect aspect, bool strict = true) Parameters aspect EntityAspect The aspect to copy from. strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. VBloodAspect(Entity, bool) Initializes a new instance of the EntityAspect class with another aspect. public VBloodAspect(Entity entity, bool strict = true) Parameters entity Entity strict bool If true, the aspect will throw an exception if the entity is null. Exceptions ArgumentNullException Thrown when the entity of the aspect is null. Properties PrefabEnum Gets the VBlood type of this entity. public VBlood PrefabEnum { get; } Property Value VBlood Queries public static VBloodQueries Queries { get; } Property Value VBloodQueries Methods Is(Entity) public static bool Is(Entity entity) Parameters entity Entity Returns bool Qualifies(Entity) Checks if the entity qualifies for this aspect. public override bool Qualifies(Entity entity) Parameters entity Entity Returns bool Returns true if the entity qualifies, otherwise false."
  },
  "api/RisingV.Core.Aspects.VBloodQueries.html": {
    "href": "api/RisingV.Core.Aspects.VBloodQueries.html",
    "title": "Class VBloodQueries | RisingV.Core",
    "summary": "Class VBloodQueries Namespace RisingV.Core.Aspects Assembly RisingV.Core.dll public class VBloodQueries : UnitQueries Inheritance object EntityQueries UnitQueries VBloodQueries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties All public override EntityQuery All { get; } Property Value EntityQuery"
  },
  "api/RisingV.Core.Aspects.html": {
    "href": "api/RisingV.Core.Aspects.html",
    "title": "Namespace RisingV.Core.Aspects | RisingV.Core",
    "summary": "Namespace RisingV.Core.Aspects Classes BehaviourTreeAspect Aspect of an entity that has a behaviour tree. BehaviourTreeQueries Queries for entities that have a behaviour tree. BuffAspect Aspect of an entity that understands buffs. BuffQueries Provides queries for buff entities. CharacterAspect Character aspect in the game, providing access to character-specific data and functionality. CharacterQueries Provides queries for character entities in the game. CombatAspect Aspect of an entity that is related to combat. CombatQueries Queries for combat-related entities. ComponentMonolith A monolithic component that provides access to various components of an entity. EntityAspect Aspect of an entity in the game world. EntityQueries Abstract class for entity queries. EquipmentAspect Aspect for equipment entities in the game. GatherableAspect Aspect of an entity that can be gathered, such as resources or materials. GatherableQueries Queries for gatherable entities in the game world. HybridModelAspect Aspect of an entity that is part of the hybrid model system. HybridModelQueries Queries for entities that are part of the hybrid model system. InventoryAspect Aspect of an entity that has an inventory. InventoryQueries Queries for entities that have an inventory. ItemAspect Aspect of an entity that represents an item. ItemQueries Queries for entities that represent items. MinionAspect Aspect of an entity that represents a minion in the game. MinionQueries Queries for entities that represent minions in the game. MoveableAspect Aspect of an entity that can be moved, providing access to movement and velocity data. MoveableQueries Queries for entities that can be moved, specifically those with movement components. NetworkAspect Aspect of an entity that has network-related components. NetworkQueries Queries for entities that have network-related components. NpcAspect Aspect of an entity that represents a non-player character (NPC). NpcQueries Queries for entities that represent non-player characters (NPCs). PlayerAspect Aspect of an entity that represents a player in the game. PlayerQueries Queries for entities that represent players in the game. StructureAspect StructureQueries UnitAspect UnitQueries VBloodAspect VBloodQueries Structs InventoryItemData Represents data for an inventory item."
  },
  "api/RisingV.Core.Caches.html": {
    "href": "api/RisingV.Core.Caches.html",
    "title": "Class Caches | RisingV.Core",
    "summary": "Class Caches Namespace RisingV.Core Assembly RisingV.Core.dll public class Caches Inheritance object Caches Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields SpawnNpcData public static readonly SizedDictionaryAsync<float, SpawnNpcData> SpawnNpcData Field Value SizedDictionaryAsync<float, SpawnNpcData>"
  },
  "api/RisingV.Core.CorePluginContext.html": {
    "href": "api/RisingV.Core.CorePluginContext.html",
    "title": "Class CorePluginContext | RisingV.Core",
    "summary": "Class CorePluginContext Namespace RisingV.Core Assembly RisingV.Core.dll public class CorePluginContext : PluginContext, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object PluginContext CorePluginContext Implements IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members PluginContext.PluginInfo PluginContext.PluginConfig PluginContext.Harmony PluginContext.PluginTarget object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors CorePluginContext() public CorePluginContext()"
  },
  "api/RisingV.Core.Databases.EntityKeyedMapDataSource-1.html": {
    "href": "api/RisingV.Core.Databases.EntityKeyedMapDataSource-1.html",
    "title": "Class EntityKeyedMapDataSource<TData> | RisingV.Core",
    "summary": "Class EntityKeyedMapDataSource<TData> Namespace RisingV.Core.Databases Assembly RisingV.Core.dll Represents a data source that uses an entity's hash code as the key, specifically for data types that implement RisingV.Shared.Data.IData. public class EntityKeyedMapDataSource<TData> : EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>, IDataSource<int, TData, MapDataLoader<int, TData>>, IDataSource<int, TData>, IDataSource, IDataCrud, IDataCrud<int, TData> where TData : IData Type Parameters TData The type of data stored in the map, which must implement RisingV.Shared.Data.IData. Inheritance object DataSource<int, TData, MapDataLoader<int, TData>> MapDataSource<int, TData, MapDataLoader<int, TData>> EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>> EntityKeyedMapDataSource<TData> Implements IDataSource<int, TData, MapDataLoader<int, TData>> IDataSource<int, TData> IDataSource IDataCrud IDataCrud<int, TData> Inherited Members EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.Log EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.KeyResolver EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.Initialize(IDatabase<int, TData>) EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.Load(IDatabase<int, TData>, MapDataLoader<int, TData>) EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.Verify(IDatabase<int, TData>) EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.Get(Entity) EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.TryGet(Entity) EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.GetOrCreate(Entity) EntityKeyedMapDataSource<TData, MapDataLoader<int, TData>>.Add(Entity, TData) MapDataSource<int, TData, MapDataLoader<int, TData>>.Log MapDataSource<int, TData, MapDataLoader<int, TData>>.KeyResolver MapDataSource<int, TData, MapDataLoader<int, TData>>.Initialize(IDatabase<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Load(IDatabase<int, TData>, MapDataLoader<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Ready(IDatabase<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Verify(IDatabase<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Unload(IDatabase<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Terminate(IDatabase<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Clear() MapDataSource<int, TData, MapDataLoader<int, TData>>.Count() MapDataSource<int, TData, MapDataLoader<int, TData>>.Get(int) MapDataSource<int, TData, MapDataLoader<int, TData>>.TryGet(int) MapDataSource<int, TData, MapDataLoader<int, TData>>.GetAll() MapDataSource<int, TData, MapDataLoader<int, TData>>.ForEach(Action<int, TData>) MapDataSource<int, TData, MapDataLoader<int, TData>>.Add(int, TData) MapDataSource<int, TData, MapDataLoader<int, TData>>.Remove(int) MapDataSource<int, TData, MapDataLoader<int, TData>>.Equals(object) MapDataSource<int, TData, MapDataLoader<int, TData>>.GetHashCode() MapDataSource<int, TData, MapDataLoader<int, TData>>.ToString() DataSource<int, TData, MapDataLoader<int, TData>>.IsInitialized DataSource<int, TData, MapDataLoader<int, TData>>.IsLoaded DataSource<int, TData, MapDataLoader<int, TData>>.IsEmpty() DataSource<int, TData, MapDataLoader<int, TData>>.Add(TData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EntityKeyedMapDataSource(Map<int, TData>?) Represents a data source that uses an entity's hash code as the key, specifically for data types that implement RisingV.Shared.Data.IData. public EntityKeyedMapDataSource(Map<int, TData>? map = null) Parameters map Map<int, TData> Optional map to initialize the data source with."
  },
  "api/RisingV.Core.Databases.EntityKeyedMapDataSource-2.html": {
    "href": "api/RisingV.Core.Databases.EntityKeyedMapDataSource-2.html",
    "title": "Class EntityKeyedMapDataSource<TData, TLoader> | RisingV.Core",
    "summary": "Class EntityKeyedMapDataSource<TData, TLoader> Namespace RisingV.Core.Databases Assembly RisingV.Core.dll Represents a data source that uses an entity's hash code as the key. public class EntityKeyedMapDataSource<TData, TLoader> : MapDataSource<int, TData, TLoader>, IDataSource<int, TData, TLoader>, IDataSource<int, TData>, IDataSource, IDataCrud, IDataCrud<int, TData> where TData : IData where TLoader : IDataLoader<int, TData> Type Parameters TData The type of data stored in the map, which must implement RisingV.Shared.Data.IData. TLoader The type of data loader used to load the data, which must implement RisingV.Shared.Databases.IDataLoader<TKey, TData>. Inheritance object DataSource<int, TData, TLoader> MapDataSource<int, TData, TLoader> EntityKeyedMapDataSource<TData, TLoader> Implements IDataSource<int, TData, TLoader> IDataSource<int, TData> IDataSource IDataCrud IDataCrud<int, TData> Derived EntityKeyedMapDataSource<TData> Inherited Members MapDataSource<int, TData, TLoader>.Log MapDataSource<int, TData, TLoader>.KeyResolver MapDataSource<int, TData, TLoader>.Initialize(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Load(IDatabase<int, TData>, TLoader) MapDataSource<int, TData, TLoader>.Ready(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Verify(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Unload(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Terminate(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Clear() MapDataSource<int, TData, TLoader>.Count() MapDataSource<int, TData, TLoader>.Get(int) MapDataSource<int, TData, TLoader>.TryGet(int) MapDataSource<int, TData, TLoader>.GetAll() MapDataSource<int, TData, TLoader>.ForEach(Action<int, TData>) MapDataSource<int, TData, TLoader>.Add(int, TData) MapDataSource<int, TData, TLoader>.Remove(int) MapDataSource<int, TData, TLoader>.Equals(object) MapDataSource<int, TData, TLoader>.GetHashCode() MapDataSource<int, TData, TLoader>.ToString() DataSource<int, TData, TLoader>.IsInitialized DataSource<int, TData, TLoader>.IsLoaded DataSource<int, TData, TLoader>.IsEmpty() DataSource<int, TData, TLoader>.Add(TData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EntityKeyedMapDataSource(Map<int, TData>?) Represents a data source that uses an entity's hash code as the key. public EntityKeyedMapDataSource(Map<int, TData>? map = null) Parameters map Map<int, TData> Optional map to initialize the data source with. Properties KeyResolver Key resolver function to resolve keys from data items. public override Func<TData, int>? KeyResolver { get; set; } Property Value Func<TData, int> Log protected override Logger Log { get; } Property Value Logger Methods Add(Entity, TData) public void Add(Entity entity, TData data) Parameters entity Entity data TData Get(Entity) public TData Get(Entity entity) Parameters entity Entity Returns TData GetOrCreate(Entity) public TData GetOrCreate(Entity entity) Parameters entity Entity Returns TData Initialize(IDatabase<int, TData>) public override void Initialize(IDatabase<int, TData> database) Parameters database IDatabase<int, TData> Load(IDatabase<int, TData>, TLoader) public override void Load(IDatabase<int, TData> database, TLoader loader) Parameters database IDatabase<int, TData> loader TLoader TryGet(Entity) public TData? TryGet(Entity entity) Parameters entity Entity Returns TData Verify(IDatabase<int, TData>) public override void Verify(IDatabase<int, TData> database) Parameters database IDatabase<int, TData>"
  },
  "api/RisingV.Core.Databases.PrefabKeyedMapDataSource-2.html": {
    "href": "api/RisingV.Core.Databases.PrefabKeyedMapDataSource-2.html",
    "title": "Class PrefabKeyedMapDataSource<TData, TLoader> | RisingV.Core",
    "summary": "Class PrefabKeyedMapDataSource<TData, TLoader> Namespace RisingV.Core.Databases Assembly RisingV.Core.dll Represents a data source that uses PrefabGUIDs as keys to access data. public abstract class PrefabKeyedMapDataSource<TData, TLoader> : MapDataSource<int, TData, TLoader>, IDataSource<int, TData, TLoader>, IDataSource<int, TData>, IDataSource, IDataCrud, IDataCrud<int, TData> where TData : IData where TLoader : IDataLoader<int, TData> Type Parameters TData The type of data stored in the source, which must implement RisingV.Shared.Data.IData. TLoader The type of data loader used to load the data, which must implement RisingV.Shared.Databases.IDataLoader<TKey, TData>. Inheritance object DataSource<int, TData, TLoader> MapDataSource<int, TData, TLoader> PrefabKeyedMapDataSource<TData, TLoader> Implements IDataSource<int, TData, TLoader> IDataSource<int, TData> IDataSource IDataCrud IDataCrud<int, TData> Inherited Members MapDataSource<int, TData, TLoader>.Log MapDataSource<int, TData, TLoader>.KeyResolver MapDataSource<int, TData, TLoader>.Initialize(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Load(IDatabase<int, TData>, TLoader) MapDataSource<int, TData, TLoader>.Ready(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Verify(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Unload(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Terminate(IDatabase<int, TData>) MapDataSource<int, TData, TLoader>.Clear() MapDataSource<int, TData, TLoader>.Count() MapDataSource<int, TData, TLoader>.Get(int) MapDataSource<int, TData, TLoader>.TryGet(int) MapDataSource<int, TData, TLoader>.GetAll() MapDataSource<int, TData, TLoader>.ForEach(Action<int, TData>) MapDataSource<int, TData, TLoader>.Add(int, TData) MapDataSource<int, TData, TLoader>.Remove(int) MapDataSource<int, TData, TLoader>.Equals(object) MapDataSource<int, TData, TLoader>.GetHashCode() MapDataSource<int, TData, TLoader>.ToString() DataSource<int, TData, TLoader>.IsInitialized DataSource<int, TData, TLoader>.IsLoaded DataSource<int, TData, TLoader>.IsEmpty() DataSource<int, TData, TLoader>.Add(TData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PrefabKeyedMapDataSource(Map<int, TData>?) Represents a data source that uses PrefabGUIDs as keys to access data. protected PrefabKeyedMapDataSource(Map<int, TData>? map = null) Parameters map Map<int, TData> Optional map to initialize the data source with. Methods GetByEntity<TX>(Entity) Attempts to get the data associated with the specified PrefabGUID. public TX? GetByEntity<TX>(Entity entity) where TX : TData Parameters entity Entity The entity whose PrefabGUID is used to look up the data. Returns TX The data associated with the PrefabGUID if it exists; otherwise, null. Type Parameters TX The type of data to retrieve, which must be a subclass of TData. Exceptions DatabaseException Thrown if the entity is null. Get<TX>(PrefabGUID) Gets the data associated with the specified PrefabGUID. public TX? Get<TX>(PrefabGUID prefabGuid) where TX : TData Parameters prefabGuid PrefabGUID The PrefabGUID to look up. Returns TX The data associated with the PrefabGUID if it exists; otherwise, null. Type Parameters TX The type of data to retrieve, which must be a subclass of TData. TryGetByEntity<TX>(Entity) Attempts to get the data associated with the specified PrefabGUID from an entity. public TX? TryGetByEntity<TX>(Entity entity) where TX : TData Parameters entity Entity The entity whose PrefabGUID is used to look up the data. Returns TX The data associated with the PrefabGUID if it exists; otherwise, null. Type Parameters TX The type of data to retrieve, which must be a subclass of TData."
  },
  "api/RisingV.Core.Databases.html": {
    "href": "api/RisingV.Core.Databases.html",
    "title": "Namespace RisingV.Core.Databases | RisingV.Core",
    "summary": "Namespace RisingV.Core.Databases Classes EntityKeyedMapDataSource<TData> Represents a data source that uses an entity's hash code as the key, specifically for data types that implement RisingV.Shared.Data.IData. EntityKeyedMapDataSource<TData, TLoader> Represents a data source that uses an entity's hash code as the key. PrefabKeyedMapDataSource<TData, TLoader> Represents a data source that uses PrefabGUIDs as keys to access data."
  },
  "api/RisingV.Core.Engines.AchievementEngine.html": {
    "href": "api/RisingV.Core.Engines.AchievementEngine.html",
    "title": "Class AchievementEngine | RisingV.Core",
    "summary": "Class AchievementEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll The Achievement Engine is responsible for managing achievements within the game. public class AchievementEngine : Engine<AchievementEngineConfig>, IEngine<AchievementEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<AchievementEngineConfig> AchievementEngine Implements IEngine<AchievementEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<AchievementEngineConfig>.Config Engine<AchievementEngineConfig>.Dependencies Engine<AchievementEngineConfig>.Recommended Engine<AchievementEngineConfig>.Enabled Engine<AchievementEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<AchievementEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<AchievementEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<AchievementEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<AchievementEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<AchievementEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<AchievementEngineConfig>.GetDependencies<TX>() Engine<AchievementEngineConfig>.GetDependencies() Engine<AchievementEngineConfig>.GetRecommended<TX>() Engine<AchievementEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.AchievementEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.AchievementEngineConfig.html",
    "title": "Class AchievementEngineConfig | RisingV.Core",
    "summary": "Class AchievementEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class AchievementEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig AchievementEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors AchievementEngineConfig() public AchievementEngineConfig()"
  },
  "api/RisingV.Core.Engines.AdminEngine.html": {
    "href": "api/RisingV.Core.Engines.AdminEngine.html",
    "title": "Class AdminEngine | RisingV.Core",
    "summary": "Class AdminEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll AdminEngine is responsible for loading and managing admin-related systems and hooks. public class AdminEngine : Engine<AdminEngineConfig>, IEngine<AdminEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<AdminEngineConfig> AdminEngine Implements IEngine<AdminEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<AdminEngineConfig>.Config Engine<AdminEngineConfig>.Dependencies Engine<AdminEngineConfig>.Recommended Engine<AdminEngineConfig>.Enabled Engine<AdminEngineConfig>.Load(EngineManager, List<IPlugin>) Engine<AdminEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<AdminEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<AdminEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<AdminEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<AdminEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<AdminEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<AdminEngineConfig>.GetDependencies<TX>() Engine<AdminEngineConfig>.GetDependencies() Engine<AdminEngineConfig>.GetRecommended<TX>() Engine<AdminEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.AdminEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.AdminEngineConfig.html",
    "title": "Class AdminEngineConfig | RisingV.Core",
    "summary": "Class AdminEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class AdminEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig AdminEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors AdminEngineConfig() public AdminEngineConfig()"
  },
  "api/RisingV.Core.Engines.BuffEngine.html": {
    "href": "api/RisingV.Core.Engines.BuffEngine.html",
    "title": "Class BuffEngine | RisingV.Core",
    "summary": "Class BuffEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll BuffEngine is responsible for managing buffs in the game. public class BuffEngine : Engine<BuffEngineConfig>, IEngine<BuffEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<BuffEngineConfig> BuffEngine Implements IEngine<BuffEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<BuffEngineConfig>.Config Engine<BuffEngineConfig>.Dependencies Engine<BuffEngineConfig>.Recommended Engine<BuffEngineConfig>.Enabled Engine<BuffEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<BuffEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<BuffEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<BuffEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<BuffEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<BuffEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<BuffEngineConfig>.GetDependencies<TX>() Engine<BuffEngineConfig>.GetDependencies() Engine<BuffEngineConfig>.GetRecommended<TX>() Engine<BuffEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.BuffEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.BuffEngineConfig.html",
    "title": "Class BuffEngineConfig | RisingV.Core",
    "summary": "Class BuffEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class BuffEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig BuffEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BuffEngineConfig() public BuffEngineConfig()"
  },
  "api/RisingV.Core.Engines.CastleEngine.html": {
    "href": "api/RisingV.Core.Engines.CastleEngine.html",
    "title": "Class CastleEngine | RisingV.Core",
    "summary": "Class CastleEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll CastleEngine is an engine that provides functionality related to castles in the game. public class CastleEngine : Engine<CastleEngineConfig>, IEngine<CastleEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<CastleEngineConfig> CastleEngine Implements IEngine<CastleEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<CastleEngineConfig>.Config Engine<CastleEngineConfig>.Dependencies Engine<CastleEngineConfig>.Recommended Engine<CastleEngineConfig>.Enabled Engine<CastleEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<CastleEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<CastleEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<CastleEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<CastleEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<CastleEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<CastleEngineConfig>.GetDependencies<TX>() Engine<CastleEngineConfig>.GetDependencies() Engine<CastleEngineConfig>.GetRecommended<TX>() Engine<CastleEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.CastleEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.CastleEngineConfig.html",
    "title": "Class CastleEngineConfig | RisingV.Core",
    "summary": "Class CastleEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class CastleEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig CastleEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors CastleEngineConfig() public CastleEngineConfig() Methods Load() public override void Load()"
  },
  "api/RisingV.Core.Engines.ChatEngine.html": {
    "href": "api/RisingV.Core.Engines.ChatEngine.html",
    "title": "Class ChatEngine | RisingV.Core",
    "summary": "Class ChatEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll ChatEngine is responsible for managing chat functionality in the game. public class ChatEngine : Engine<DamageEngineConfig>, IEngine<DamageEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<DamageEngineConfig> ChatEngine Implements IEngine<DamageEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<DamageEngineConfig>.Config Engine<DamageEngineConfig>.Dependencies Engine<DamageEngineConfig>.Recommended Engine<DamageEngineConfig>.Enabled Engine<DamageEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<DamageEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<DamageEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.GetDependencies<TX>() Engine<DamageEngineConfig>.GetDependencies() Engine<DamageEngineConfig>.GetRecommended<TX>() Engine<DamageEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.ChatEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.ChatEngineConfig.html",
    "title": "Class ChatEngineConfig | RisingV.Core",
    "summary": "Class ChatEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class ChatEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig ChatEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ChatEngineConfig() public ChatEngineConfig()"
  },
  "api/RisingV.Core.Engines.ClanEngine.html": {
    "href": "api/RisingV.Core.Engines.ClanEngine.html",
    "title": "Class ClanEngine | RisingV.Core",
    "summary": "Class ClanEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll ClanEngine is an engine that provides functionality related to clans in the game. public class ClanEngine : Engine<ClanEngineConfig>, IEngine<ClanEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<ClanEngineConfig> ClanEngine Implements IEngine<ClanEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<ClanEngineConfig>.Config Engine<ClanEngineConfig>.Dependencies Engine<ClanEngineConfig>.Recommended Engine<ClanEngineConfig>.Enabled Engine<ClanEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<ClanEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<ClanEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<ClanEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<ClanEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<ClanEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<ClanEngineConfig>.GetDependencies<TX>() Engine<ClanEngineConfig>.GetDependencies() Engine<ClanEngineConfig>.GetRecommended<TX>() Engine<ClanEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.ClanEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.ClanEngineConfig.html",
    "title": "Class ClanEngineConfig | RisingV.Core",
    "summary": "Class ClanEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class ClanEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig ClanEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ClanEngineConfig() public ClanEngineConfig() Methods Load() public override void Load()"
  },
  "api/RisingV.Core.Engines.DamageEngine.html": {
    "href": "api/RisingV.Core.Engines.DamageEngine.html",
    "title": "Class DamageEngine | RisingV.Core",
    "summary": "Class DamageEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll DamageEngine is responsible for handling damage events and processing damage-related logic in the game. public class DamageEngine : Engine<DamageEngineConfig>, IEngine<DamageEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<DamageEngineConfig> DamageEngine Implements IEngine<DamageEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<DamageEngineConfig>.Config Engine<DamageEngineConfig>.Recommended Engine<DamageEngineConfig>.Enabled Engine<DamageEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<DamageEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<DamageEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<DamageEngineConfig>.GetDependencies<TX>() Engine<DamageEngineConfig>.GetDependencies() Engine<DamageEngineConfig>.GetRecommended<TX>() Engine<DamageEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Dependencies protected override List<Dependency> Dependencies { get; } Property Value List<Dependency> Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.DamageEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.DamageEngineConfig.html",
    "title": "Class DamageEngineConfig | RisingV.Core",
    "summary": "Class DamageEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class DamageEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig DamageEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamageEngineConfig() public DamageEngineConfig()"
  },
  "api/RisingV.Core.Engines.DeathEngine.html": {
    "href": "api/RisingV.Core.Engines.DeathEngine.html",
    "title": "Class DeathEngine | RisingV.Core",
    "summary": "Class DeathEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll DeathEngine is responsible for managing death-related events and processors in the game. public class DeathEngine : Engine<DeathEngineConfig>, IEngine<DeathEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<DeathEngineConfig> DeathEngine Implements IEngine<DeathEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<DeathEngineConfig>.Config Engine<DeathEngineConfig>.Dependencies Engine<DeathEngineConfig>.Enabled Engine<DeathEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<DeathEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<DeathEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<DeathEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<DeathEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<DeathEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<DeathEngineConfig>.GetDependencies<TX>() Engine<DeathEngineConfig>.GetDependencies() Engine<DeathEngineConfig>.GetRecommended<TX>() Engine<DeathEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Recommended protected override List<Dependency> Recommended { get; } Property Value List<Dependency> Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.DeathEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.DeathEngineConfig.html",
    "title": "Class DeathEngineConfig | RisingV.Core",
    "summary": "Class DeathEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class DeathEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig DeathEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathEngineConfig() public DeathEngineConfig()"
  },
  "api/RisingV.Core.Engines.EquipmentEngine.html": {
    "href": "api/RisingV.Core.Engines.EquipmentEngine.html",
    "title": "Class EquipmentEngine | RisingV.Core",
    "summary": "Class EquipmentEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll EquipmentEngine is responsible for managing equipment-related functionality in the game. public class EquipmentEngine : Engine<EquipmentEngineConfig>, IEngine<EquipmentEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<EquipmentEngineConfig> EquipmentEngine Implements IEngine<EquipmentEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<EquipmentEngineConfig>.Config Engine<EquipmentEngineConfig>.Dependencies Engine<EquipmentEngineConfig>.Recommended Engine<EquipmentEngineConfig>.Enabled Engine<EquipmentEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<EquipmentEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<EquipmentEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<EquipmentEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<EquipmentEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<EquipmentEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<EquipmentEngineConfig>.GetDependencies<TX>() Engine<EquipmentEngineConfig>.GetDependencies() Engine<EquipmentEngineConfig>.GetRecommended<TX>() Engine<EquipmentEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.EquipmentEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.EquipmentEngineConfig.html",
    "title": "Class EquipmentEngineConfig | RisingV.Core",
    "summary": "Class EquipmentEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class EquipmentEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig EquipmentEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EquipmentEngineConfig() public EquipmentEngineConfig()"
  },
  "api/RisingV.Core.Engines.ItemEngine.html": {
    "href": "api/RisingV.Core.Engines.ItemEngine.html",
    "title": "Class ItemEngine | RisingV.Core",
    "summary": "Class ItemEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll ItemEngine is responsible for managing custom items in the game. public class ItemEngine : Engine<ItemEngineConfig>, IEngine<ItemEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<ItemEngineConfig> ItemEngine Implements IEngine<ItemEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<ItemEngineConfig>.Config Engine<ItemEngineConfig>.Dependencies Engine<ItemEngineConfig>.Recommended Engine<ItemEngineConfig>.Enabled Engine<ItemEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<ItemEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<ItemEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<ItemEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<ItemEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<ItemEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<ItemEngineConfig>.GetDependencies<TX>() Engine<ItemEngineConfig>.GetDependencies() Engine<ItemEngineConfig>.GetRecommended<TX>() Engine<ItemEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.ItemEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.ItemEngineConfig.html",
    "title": "Class ItemEngineConfig | RisingV.Core",
    "summary": "Class ItemEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class ItemEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig ItemEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemEngineConfig() public ItemEngineConfig()"
  },
  "api/RisingV.Core.Engines.LootEngine.html": {
    "href": "api/RisingV.Core.Engines.LootEngine.html",
    "title": "Class LootEngine | RisingV.Core",
    "summary": "Class LootEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll LootEngine is responsible for managing loot drops and item templates in the game. public class LootEngine : Engine<LootEngineConfig>, IEngine<LootEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<LootEngineConfig> LootEngine Implements IEngine<LootEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<LootEngineConfig>.Config Engine<LootEngineConfig>.Dependencies Engine<LootEngineConfig>.Recommended Engine<LootEngineConfig>.Enabled Engine<LootEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<LootEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<LootEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<LootEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<LootEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<LootEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<LootEngineConfig>.GetDependencies<TX>() Engine<LootEngineConfig>.GetDependencies() Engine<LootEngineConfig>.GetRecommended<TX>() Engine<LootEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.LootEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.LootEngineConfig.html",
    "title": "Class LootEngineConfig | RisingV.Core",
    "summary": "Class LootEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class LootEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig LootEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors LootEngineConfig() public LootEngineConfig()"
  },
  "api/RisingV.Core.Engines.SaveEngine.html": {
    "href": "api/RisingV.Core.Engines.SaveEngine.html",
    "title": "Class SaveEngine | RisingV.Core",
    "summary": "Class SaveEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll SaveEngine is responsible for managing the save system in the game. public class SaveEngine : Engine<SaveEngineConfig>, IEngine<SaveEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<SaveEngineConfig> SaveEngine Implements IEngine<SaveEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<SaveEngineConfig>.Config Engine<SaveEngineConfig>.Dependencies Engine<SaveEngineConfig>.Recommended Engine<SaveEngineConfig>.Enabled Engine<SaveEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<SaveEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<SaveEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<SaveEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<SaveEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<SaveEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<SaveEngineConfig>.GetDependencies<TX>() Engine<SaveEngineConfig>.GetDependencies() Engine<SaveEngineConfig>.GetRecommended<TX>() Engine<SaveEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.SaveEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.SaveEngineConfig.html",
    "title": "Class SaveEngineConfig | RisingV.Core",
    "summary": "Class SaveEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class SaveEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig SaveEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SaveEngineConfig() public SaveEngineConfig()"
  },
  "api/RisingV.Core.Engines.SpawnEngine.html": {
    "href": "api/RisingV.Core.Engines.SpawnEngine.html",
    "title": "Class SpawnEngine | RisingV.Core",
    "summary": "Class SpawnEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll SpawnEngine is responsible for managing spawn events and processing in the game. public class SpawnEngine : Engine<SpawnEngineConfig>, IEngine<SpawnEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<SpawnEngineConfig> SpawnEngine Implements IEngine<SpawnEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<SpawnEngineConfig>.Config Engine<SpawnEngineConfig>.Dependencies Engine<SpawnEngineConfig>.Recommended Engine<SpawnEngineConfig>.Enabled Engine<SpawnEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<SpawnEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<SpawnEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<SpawnEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<SpawnEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<SpawnEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<SpawnEngineConfig>.GetDependencies<TX>() Engine<SpawnEngineConfig>.GetDependencies() Engine<SpawnEngineConfig>.GetRecommended<TX>() Engine<SpawnEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.SpawnEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.SpawnEngineConfig.html",
    "title": "Class SpawnEngineConfig | RisingV.Core",
    "summary": "Class SpawnEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class SpawnEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig SpawnEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnEngineConfig() public SpawnEngineConfig() Properties EnableScriptSpawn public ConfigEntry<bool> EnableScriptSpawn { get; } Property Value ConfigEntry<bool> Methods Load() public override void Load()"
  },
  "api/RisingV.Core.Engines.StatEngine.html": {
    "href": "api/RisingV.Core.Engines.StatEngine.html",
    "title": "Class StatEngine | RisingV.Core",
    "summary": "Class StatEngine Namespace RisingV.Core.Engines Assembly RisingV.Core.dll StatEngine is responsible for managing and processing stat changes in the game. public class StatEngine : Engine<StatEngineConfig>, IEngine<StatEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<StatEngineConfig> StatEngine Implements IEngine<StatEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<StatEngineConfig>.Config Engine<StatEngineConfig>.Dependencies Engine<StatEngineConfig>.Recommended Engine<StatEngineConfig>.Enabled Engine<StatEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<StatEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<StatEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<StatEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<StatEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<StatEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<StatEngineConfig>.GetDependencies<TX>() Engine<StatEngineConfig>.GetDependencies() Engine<StatEngineConfig>.GetRecommended<TX>() Engine<StatEngineConfig>.GetRecommended() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Engines.StatEngineConfig.html": {
    "href": "api/RisingV.Core.Engines.StatEngineConfig.html",
    "title": "Class StatEngineConfig | RisingV.Core",
    "summary": "Class StatEngineConfig Namespace RisingV.Core.Engines Assembly RisingV.Core.dll public class StatEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig StatEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.AutoLoadDependencies EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatEngineConfig() public StatEngineConfig()"
  },
  "api/RisingV.Core.Engines.html": {
    "href": "api/RisingV.Core.Engines.html",
    "title": "Namespace RisingV.Core.Engines | RisingV.Core",
    "summary": "Namespace RisingV.Core.Engines Classes AchievementEngine The Achievement Engine is responsible for managing achievements within the game. AchievementEngineConfig AdminEngine AdminEngine is responsible for loading and managing admin-related systems and hooks. AdminEngineConfig BuffEngine BuffEngine is responsible for managing buffs in the game. BuffEngineConfig CastleEngine CastleEngine is an engine that provides functionality related to castles in the game. CastleEngineConfig ChatEngine ChatEngine is responsible for managing chat functionality in the game. ChatEngineConfig ClanEngine ClanEngine is an engine that provides functionality related to clans in the game. ClanEngineConfig DamageEngine DamageEngine is responsible for handling damage events and processing damage-related logic in the game. DamageEngineConfig DeathEngine DeathEngine is responsible for managing death-related events and processors in the game. DeathEngineConfig EquipmentEngine EquipmentEngine is responsible for managing equipment-related functionality in the game. EquipmentEngineConfig ItemEngine ItemEngine is responsible for managing custom items in the game. ItemEngineConfig LootEngine LootEngine is responsible for managing loot drops and item templates in the game. LootEngineConfig SaveEngine SaveEngine is responsible for managing the save system in the game. SaveEngineConfig SpawnEngine SpawnEngine is responsible for managing spawn events and processing in the game. SpawnEngineConfig StatEngine StatEngine is responsible for managing and processing stat changes in the game. StatEngineConfig"
  },
  "api/RisingV.Core.Entities.EntityComponentDatabase.html": {
    "href": "api/RisingV.Core.Entities.EntityComponentDatabase.html",
    "title": "Class EntityComponentDatabase | RisingV.Core",
    "summary": "Class EntityComponentDatabase Namespace RisingV.Core.Entities Assembly RisingV.Core.dll Represents a database for managing entity component maps. public class EntityComponentDatabase : DatabaseWithSource<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>>, IDatabase<int, EntityComponentMap>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<int, EntityComponentMap> Inheritance object Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>> DatabaseWithSource<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>> EntityComponentDatabase Implements IDatabase<int, EntityComponentMap> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<int, EntityComponentMap> Inherited Members Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Log Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Name Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.IsInitialized Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.IsLoaded Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.DataSource Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.DataLoader Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.VerifySource() Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Initialize(DatabaseManager, List<IPlugin>) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Terminate(DatabaseManager, List<IPlugin>) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Load(DatabaseManager, List<IPlugin>) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Ready(DatabaseManager, List<IPlugin>) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Reload(DatabaseManager) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Unload(DatabaseManager) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Unload(DatabaseManager, List<IPlugin>) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Clear(DatabaseManager) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Clear() Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Count() Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Get(int) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.TryGet(int) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.GetAll() Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.ForEach(Action<int, EntityComponentMap>) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Add(int, EntityComponentMap) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Add(EntityComponentMap) Database<int, EntityComponentMap, EntityKeyedMapDataSource<EntityComponentMap>, MapDataLoader<int, EntityComponentMap>>.Remove(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EntityComponentDatabase() Represents a database for managing entity component maps. public EntityComponentDatabase() Properties Log protected override Logger Log { get; } Property Value Logger Methods Get(Entity) public EntityComponentMap Get(Entity entity) Parameters entity Entity Returns EntityComponentMap GetOrCreate(Entity) public EntityComponentMap GetOrCreate(Entity entity) Parameters entity Entity Returns EntityComponentMap TryGet(Entity) public EntityComponentMap? TryGet(Entity entity) Parameters entity Entity Returns EntityComponentMap"
  },
  "api/RisingV.Core.Entities.EntityComponentMap.html": {
    "href": "api/RisingV.Core.Entities.EntityComponentMap.html",
    "title": "Class EntityComponentMap | RisingV.Core",
    "summary": "Class EntityComponentMap Namespace RisingV.Core.Entities Assembly RisingV.Core.dll Represents a map of entity component data keyed by entity type. public class EntityComponentMap : TypeKeyedMap<IEntityComponentData>, IData Inheritance object TypeKeyedMap<IEntityComponentData> EntityComponentMap Implements IData Inherited Members TypeKeyedMap<IEntityComponentData>.Add<TX>() TypeKeyedMap<IEntityComponentData>.Add<TX>(TX) TypeKeyedMap<IEntityComponentData>.Remove<TX>() TypeKeyedMap<IEntityComponentData>.TryRemove<TX>() TypeKeyedMap<IEntityComponentData>.TryGet<TX>(out TX) TypeKeyedMap<IEntityComponentData>.GetOrCreate<TX>() TypeKeyedMap<IEntityComponentData>.Contains<TX>() TypeKeyedMap<IEntityComponentData>.Clear() TypeKeyedMap<IEntityComponentData>.Count TypeKeyedMap<IEntityComponentData>.Keys TypeKeyedMap<IEntityComponentData>.Values TypeKeyedMap<IEntityComponentData>.this[Type] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EntityComponentMap() Represents a map of entity component data keyed by entity type. public EntityComponentMap()"
  },
  "api/RisingV.Core.Entities.html": {
    "href": "api/RisingV.Core.Entities.html",
    "title": "Namespace RisingV.Core.Entities | RisingV.Core",
    "summary": "Namespace RisingV.Core.Entities Classes EntityComponentDatabase Represents a database for managing entity component maps. EntityComponentMap Represents a map of entity component data keyed by entity type."
  },
  "api/RisingV.Core.EventBridge.DownedAllEvent.html": {
    "href": "api/RisingV.Core.EventBridge.DownedAllEvent.html",
    "title": "Class EventBridge.DownedAllEvent | RisingV.Core",
    "summary": "Class EventBridge.DownedAllEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when an entity is downed. public record EventBridge.DownedAllEvent : Event<EventBridge.DownedAllEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.DownedAllEvent>>, IEquatable<EventBridge.DownedAllEvent> Inheritance object Event Event<EventBridge.DownedAllEvent> EventBridge.DownedAllEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.DownedAllEvent>> IEquatable<EventBridge.DownedAllEvent> Inherited Members Event<EventBridge.DownedAllEvent>.Subscribe(object, EventHandler<EventBridge.DownedAllEvent>) Event<EventBridge.DownedAllEvent>.Subscribe(object, Func<EventBridge.DownedAllEvent, ValueTask>) Event<EventBridge.DownedAllEvent>.Subscribe(object, Action<EventBridge.DownedAllEvent>) Event<EventBridge.DownedAllEvent>.Unsubscribe(object, EventHandler<EventBridge.DownedAllEvent>) Event<EventBridge.DownedAllEvent>.Subscribe(EventHandler<EventBridge.DownedAllEvent>) Event<EventBridge.DownedAllEvent>.Subscribe(Func<EventBridge.DownedAllEvent, ValueTask>) Event<EventBridge.DownedAllEvent>.Subscribe(Action<EventBridge.DownedAllEvent>) Event<EventBridge.DownedAllEvent>.Unsubscribe(EventHandler<EventBridge.DownedAllEvent>) Event<EventBridge.DownedAllEvent>.Unsubscribe(Action<EventBridge.DownedAllEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DownedAllEvent(List<EntityDamageEntry>, Entity, DownedEvent) Event triggered when an entity is downed. public DownedAllEvent(List<EntityDamageEntry> DamageEntries, Entity TargetEntity, DownedEvent NativeEvent) Parameters DamageEntries List<EntityDamageEntry> List of damage entries associated with the downing event. TargetEntity Entity The entity that was downed. NativeEvent DownedEvent The native downed event that triggered this event. Properties DamageEntries List of damage entries associated with the downing event. public List<EntityDamageEntry> DamageEntries { get; init; } Property Value List<EntityDamageEntry> NativeEvent The native downed event that triggered this event. public DownedEvent NativeEvent { get; init; } Property Value DownedEvent TargetEntity The entity that was downed. public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Core.EventBridge.DownedBossEvent.html": {
    "href": "api/RisingV.Core.EventBridge.DownedBossEvent.html",
    "title": "Class EventBridge.DownedBossEvent | RisingV.Core",
    "summary": "Class EventBridge.DownedBossEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a boss is downed. public record EventBridge.DownedBossEvent : Event<EventBridge.DownedBossEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.DownedBossEvent>>, IEquatable<EventBridge.DownedBossEvent> Inheritance object Event Event<EventBridge.DownedBossEvent> EventBridge.DownedBossEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.DownedBossEvent>> IEquatable<EventBridge.DownedBossEvent> Inherited Members Event<EventBridge.DownedBossEvent>.Subscribe(object, EventHandler<EventBridge.DownedBossEvent>) Event<EventBridge.DownedBossEvent>.Subscribe(object, Func<EventBridge.DownedBossEvent, ValueTask>) Event<EventBridge.DownedBossEvent>.Subscribe(object, Action<EventBridge.DownedBossEvent>) Event<EventBridge.DownedBossEvent>.Unsubscribe(object, EventHandler<EventBridge.DownedBossEvent>) Event<EventBridge.DownedBossEvent>.Subscribe(EventHandler<EventBridge.DownedBossEvent>) Event<EventBridge.DownedBossEvent>.Subscribe(Func<EventBridge.DownedBossEvent, ValueTask>) Event<EventBridge.DownedBossEvent>.Subscribe(Action<EventBridge.DownedBossEvent>) Event<EventBridge.DownedBossEvent>.Unsubscribe(EventHandler<EventBridge.DownedBossEvent>) Event<EventBridge.DownedBossEvent>.Unsubscribe(Action<EventBridge.DownedBossEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DownedBossEvent(List<EntityDamageEntry>, Entity, DownedEvent) Event triggered when a boss is downed. public DownedBossEvent(List<EntityDamageEntry> DamageEntries, Entity TargetEntity, DownedEvent NativeEvent) Parameters DamageEntries List<EntityDamageEntry> List of damage entries associated with the downing event. TargetEntity Entity The entity that was downed. NativeEvent DownedEvent The native downed event that triggered this event. Properties DamageEntries List of damage entries associated with the downing event. public List<EntityDamageEntry> DamageEntries { get; init; } Property Value List<EntityDamageEntry> NativeEvent The native downed event that triggered this event. public DownedEvent NativeEvent { get; init; } Property Value DownedEvent TargetEntity The entity that was downed. public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Core.EventBridge.DownedMinionEvent.html": {
    "href": "api/RisingV.Core.EventBridge.DownedMinionEvent.html",
    "title": "Class EventBridge.DownedMinionEvent | RisingV.Core",
    "summary": "Class EventBridge.DownedMinionEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a minion is downed. public record EventBridge.DownedMinionEvent : Event<EventBridge.DownedMinionEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.DownedMinionEvent>>, IEquatable<EventBridge.DownedMinionEvent> Inheritance object Event Event<EventBridge.DownedMinionEvent> EventBridge.DownedMinionEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.DownedMinionEvent>> IEquatable<EventBridge.DownedMinionEvent> Inherited Members Event<EventBridge.DownedMinionEvent>.Subscribe(object, EventHandler<EventBridge.DownedMinionEvent>) Event<EventBridge.DownedMinionEvent>.Subscribe(object, Func<EventBridge.DownedMinionEvent, ValueTask>) Event<EventBridge.DownedMinionEvent>.Subscribe(object, Action<EventBridge.DownedMinionEvent>) Event<EventBridge.DownedMinionEvent>.Unsubscribe(object, EventHandler<EventBridge.DownedMinionEvent>) Event<EventBridge.DownedMinionEvent>.Subscribe(EventHandler<EventBridge.DownedMinionEvent>) Event<EventBridge.DownedMinionEvent>.Subscribe(Func<EventBridge.DownedMinionEvent, ValueTask>) Event<EventBridge.DownedMinionEvent>.Subscribe(Action<EventBridge.DownedMinionEvent>) Event<EventBridge.DownedMinionEvent>.Unsubscribe(EventHandler<EventBridge.DownedMinionEvent>) Event<EventBridge.DownedMinionEvent>.Unsubscribe(Action<EventBridge.DownedMinionEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DownedMinionEvent(List<EntityDamageEntry>, Entity, DownedEvent) Event triggered when a minion is downed. public DownedMinionEvent(List<EntityDamageEntry> DamageEntries, Entity TargetEntity, DownedEvent NativeEvent) Parameters DamageEntries List<EntityDamageEntry> List of damage entries associated with the downing event. TargetEntity Entity The entity that was downed. NativeEvent DownedEvent The native downed event that triggered this event. Properties DamageEntries List of damage entries associated with the downing event. public List<EntityDamageEntry> DamageEntries { get; init; } Property Value List<EntityDamageEntry> NativeEvent The native downed event that triggered this event. public DownedEvent NativeEvent { get; init; } Property Value DownedEvent TargetEntity The entity that was downed. public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Core.EventBridge.DownedPlayerEvent.html": {
    "href": "api/RisingV.Core.EventBridge.DownedPlayerEvent.html",
    "title": "Class EventBridge.DownedPlayerEvent | RisingV.Core",
    "summary": "Class EventBridge.DownedPlayerEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a unit is downed. public record EventBridge.DownedPlayerEvent : Event<EventBridge.DownedPlayerEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.DownedPlayerEvent>>, IEquatable<EventBridge.DownedPlayerEvent> Inheritance object Event Event<EventBridge.DownedPlayerEvent> EventBridge.DownedPlayerEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.DownedPlayerEvent>> IEquatable<EventBridge.DownedPlayerEvent> Inherited Members Event<EventBridge.DownedPlayerEvent>.Subscribe(object, EventHandler<EventBridge.DownedPlayerEvent>) Event<EventBridge.DownedPlayerEvent>.Subscribe(object, Func<EventBridge.DownedPlayerEvent, ValueTask>) Event<EventBridge.DownedPlayerEvent>.Subscribe(object, Action<EventBridge.DownedPlayerEvent>) Event<EventBridge.DownedPlayerEvent>.Unsubscribe(object, EventHandler<EventBridge.DownedPlayerEvent>) Event<EventBridge.DownedPlayerEvent>.Subscribe(EventHandler<EventBridge.DownedPlayerEvent>) Event<EventBridge.DownedPlayerEvent>.Subscribe(Func<EventBridge.DownedPlayerEvent, ValueTask>) Event<EventBridge.DownedPlayerEvent>.Subscribe(Action<EventBridge.DownedPlayerEvent>) Event<EventBridge.DownedPlayerEvent>.Unsubscribe(EventHandler<EventBridge.DownedPlayerEvent>) Event<EventBridge.DownedPlayerEvent>.Unsubscribe(Action<EventBridge.DownedPlayerEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DownedPlayerEvent(List<EntityDamageEntry>, Entity, DownedEvent) Event triggered when a unit is downed. public DownedPlayerEvent(List<EntityDamageEntry> DamageEntries, Entity TargetEntity, DownedEvent NativeEvent) Parameters DamageEntries List<EntityDamageEntry> List of damage entries associated with the downing event. TargetEntity Entity The entity that was downed. NativeEvent DownedEvent The native downed event that triggered this event. Properties DamageEntries List of damage entries associated with the downing event. public List<EntityDamageEntry> DamageEntries { get; init; } Property Value List<EntityDamageEntry> NativeEvent The native downed event that triggered this event. public DownedEvent NativeEvent { get; init; } Property Value DownedEvent TargetEntity The entity that was downed. public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Core.EventBridge.DownedUnitEvent.html": {
    "href": "api/RisingV.Core.EventBridge.DownedUnitEvent.html",
    "title": "Class EventBridge.DownedUnitEvent | RisingV.Core",
    "summary": "Class EventBridge.DownedUnitEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a gatherable entity is downed. public record EventBridge.DownedUnitEvent : Event<EventBridge.DownedUnitEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.DownedUnitEvent>>, IEquatable<EventBridge.DownedUnitEvent> Inheritance object Event Event<EventBridge.DownedUnitEvent> EventBridge.DownedUnitEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.DownedUnitEvent>> IEquatable<EventBridge.DownedUnitEvent> Inherited Members Event<EventBridge.DownedUnitEvent>.Subscribe(object, EventHandler<EventBridge.DownedUnitEvent>) Event<EventBridge.DownedUnitEvent>.Subscribe(object, Func<EventBridge.DownedUnitEvent, ValueTask>) Event<EventBridge.DownedUnitEvent>.Subscribe(object, Action<EventBridge.DownedUnitEvent>) Event<EventBridge.DownedUnitEvent>.Unsubscribe(object, EventHandler<EventBridge.DownedUnitEvent>) Event<EventBridge.DownedUnitEvent>.Subscribe(EventHandler<EventBridge.DownedUnitEvent>) Event<EventBridge.DownedUnitEvent>.Subscribe(Func<EventBridge.DownedUnitEvent, ValueTask>) Event<EventBridge.DownedUnitEvent>.Subscribe(Action<EventBridge.DownedUnitEvent>) Event<EventBridge.DownedUnitEvent>.Unsubscribe(EventHandler<EventBridge.DownedUnitEvent>) Event<EventBridge.DownedUnitEvent>.Unsubscribe(Action<EventBridge.DownedUnitEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DownedUnitEvent(List<EntityDamageEntry>, Entity, DownedEvent) Event triggered when a gatherable entity is downed. public DownedUnitEvent(List<EntityDamageEntry> DamageEntries, Entity TargetEntity, DownedEvent NativeEvent) Parameters DamageEntries List<EntityDamageEntry> List of damage entries associated with the downing event. TargetEntity Entity The entity that was downed. NativeEvent DownedEvent The native downed event that triggered this event. Properties DamageEntries List of damage entries associated with the downing event. public List<EntityDamageEntry> DamageEntries { get; init; } Property Value List<EntityDamageEntry> NativeEvent The native downed event that triggered this event. public DownedEvent NativeEvent { get; init; } Property Value DownedEvent TargetEntity The entity that was downed. public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Core.EventBridge.ScriptDespawnBossEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptDespawnBossEvent.html",
    "title": "Class EventBridge.ScriptDespawnBossEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptDespawnBossEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to despawn a boss. public record EventBridge.ScriptDespawnBossEvent : Event<EventBridge.ScriptDespawnBossEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptDespawnBossEvent>>, IEquatable<EventBridge.ScriptDespawnBossEvent> Inheritance object Event Event<EventBridge.ScriptDespawnBossEvent> EventBridge.ScriptDespawnBossEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptDespawnBossEvent>> IEquatable<EventBridge.ScriptDespawnBossEvent> Inherited Members Event<EventBridge.ScriptDespawnBossEvent>.Subscribe(object, EventHandler<EventBridge.ScriptDespawnBossEvent>) Event<EventBridge.ScriptDespawnBossEvent>.Subscribe(object, Func<EventBridge.ScriptDespawnBossEvent, ValueTask>) Event<EventBridge.ScriptDespawnBossEvent>.Subscribe(object, Action<EventBridge.ScriptDespawnBossEvent>) Event<EventBridge.ScriptDespawnBossEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptDespawnBossEvent>) Event<EventBridge.ScriptDespawnBossEvent>.Subscribe(EventHandler<EventBridge.ScriptDespawnBossEvent>) Event<EventBridge.ScriptDespawnBossEvent>.Subscribe(Func<EventBridge.ScriptDespawnBossEvent, ValueTask>) Event<EventBridge.ScriptDespawnBossEvent>.Subscribe(Action<EventBridge.ScriptDespawnBossEvent>) Event<EventBridge.ScriptDespawnBossEvent>.Unsubscribe(EventHandler<EventBridge.ScriptDespawnBossEvent>) Event<EventBridge.ScriptDespawnBossEvent>.Unsubscribe(Action<EventBridge.ScriptDespawnBossEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptDespawnBossEvent(VBloodAspect, ScriptSpawnData) Event triggered by scripts to despawn a boss. public ScriptDespawnBossEvent(VBloodAspect Aspect, ScriptSpawnData Data) Parameters Aspect VBloodAspect The aspect of the boss being despawned. Data ScriptSpawnData The data associated with the despawn event. Properties Aspect The aspect of the boss being despawned. public VBloodAspect Aspect { get; init; } Property Value VBloodAspect Data The data associated with the despawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptDespawnGatherableEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptDespawnGatherableEvent.html",
    "title": "Class EventBridge.ScriptDespawnGatherableEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptDespawnGatherableEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to despawn a gatherable entity. public record EventBridge.ScriptDespawnGatherableEvent : Event<EventBridge.ScriptDespawnGatherableEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptDespawnGatherableEvent>>, IEquatable<EventBridge.ScriptDespawnGatherableEvent> Inheritance object Event Event<EventBridge.ScriptDespawnGatherableEvent> EventBridge.ScriptDespawnGatherableEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptDespawnGatherableEvent>> IEquatable<EventBridge.ScriptDespawnGatherableEvent> Inherited Members Event<EventBridge.ScriptDespawnGatherableEvent>.Subscribe(object, EventHandler<EventBridge.ScriptDespawnGatherableEvent>) Event<EventBridge.ScriptDespawnGatherableEvent>.Subscribe(object, Func<EventBridge.ScriptDespawnGatherableEvent, ValueTask>) Event<EventBridge.ScriptDespawnGatherableEvent>.Subscribe(object, Action<EventBridge.ScriptDespawnGatherableEvent>) Event<EventBridge.ScriptDespawnGatherableEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptDespawnGatherableEvent>) Event<EventBridge.ScriptDespawnGatherableEvent>.Subscribe(EventHandler<EventBridge.ScriptDespawnGatherableEvent>) Event<EventBridge.ScriptDespawnGatherableEvent>.Subscribe(Func<EventBridge.ScriptDespawnGatherableEvent, ValueTask>) Event<EventBridge.ScriptDespawnGatherableEvent>.Subscribe(Action<EventBridge.ScriptDespawnGatherableEvent>) Event<EventBridge.ScriptDespawnGatherableEvent>.Unsubscribe(EventHandler<EventBridge.ScriptDespawnGatherableEvent>) Event<EventBridge.ScriptDespawnGatherableEvent>.Unsubscribe(Action<EventBridge.ScriptDespawnGatherableEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptDespawnGatherableEvent(GatherableAspect, ScriptSpawnData) Event triggered by scripts to despawn a gatherable entity. public ScriptDespawnGatherableEvent(GatherableAspect Aspect, ScriptSpawnData Data) Parameters Aspect GatherableAspect The aspect of the gatherable being despawned. Data ScriptSpawnData The data associated with the despawn event. Properties Aspect The aspect of the gatherable being despawned. public GatherableAspect Aspect { get; init; } Property Value GatherableAspect Data The data associated with the despawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptDespawnMinionEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptDespawnMinionEvent.html",
    "title": "Class EventBridge.ScriptDespawnMinionEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptDespawnMinionEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to despawn a minion. public record EventBridge.ScriptDespawnMinionEvent : Event<EventBridge.ScriptDespawnMinionEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptDespawnMinionEvent>>, IEquatable<EventBridge.ScriptDespawnMinionEvent> Inheritance object Event Event<EventBridge.ScriptDespawnMinionEvent> EventBridge.ScriptDespawnMinionEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptDespawnMinionEvent>> IEquatable<EventBridge.ScriptDespawnMinionEvent> Inherited Members Event<EventBridge.ScriptDespawnMinionEvent>.Subscribe(object, EventHandler<EventBridge.ScriptDespawnMinionEvent>) Event<EventBridge.ScriptDespawnMinionEvent>.Subscribe(object, Func<EventBridge.ScriptDespawnMinionEvent, ValueTask>) Event<EventBridge.ScriptDespawnMinionEvent>.Subscribe(object, Action<EventBridge.ScriptDespawnMinionEvent>) Event<EventBridge.ScriptDespawnMinionEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptDespawnMinionEvent>) Event<EventBridge.ScriptDespawnMinionEvent>.Subscribe(EventHandler<EventBridge.ScriptDespawnMinionEvent>) Event<EventBridge.ScriptDespawnMinionEvent>.Subscribe(Func<EventBridge.ScriptDespawnMinionEvent, ValueTask>) Event<EventBridge.ScriptDespawnMinionEvent>.Subscribe(Action<EventBridge.ScriptDespawnMinionEvent>) Event<EventBridge.ScriptDespawnMinionEvent>.Unsubscribe(EventHandler<EventBridge.ScriptDespawnMinionEvent>) Event<EventBridge.ScriptDespawnMinionEvent>.Unsubscribe(Action<EventBridge.ScriptDespawnMinionEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptDespawnMinionEvent(MinionAspect, ScriptSpawnData) Event triggered by scripts to despawn a minion. public ScriptDespawnMinionEvent(MinionAspect Aspect, ScriptSpawnData Data) Parameters Aspect MinionAspect The aspect of the minion being despawned. Data ScriptSpawnData The data associated with the despawn event. Properties Aspect The aspect of the minion being despawned. public MinionAspect Aspect { get; init; } Property Value MinionAspect Data The data associated with the despawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptDespawnPlayerEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptDespawnPlayerEvent.html",
    "title": "Class EventBridge.ScriptDespawnPlayerEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptDespawnPlayerEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to despawn a player. public record EventBridge.ScriptDespawnPlayerEvent : Event<EventBridge.ScriptDespawnPlayerEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptDespawnPlayerEvent>>, IEquatable<EventBridge.ScriptDespawnPlayerEvent> Inheritance object Event Event<EventBridge.ScriptDespawnPlayerEvent> EventBridge.ScriptDespawnPlayerEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptDespawnPlayerEvent>> IEquatable<EventBridge.ScriptDespawnPlayerEvent> Inherited Members Event<EventBridge.ScriptDespawnPlayerEvent>.Subscribe(object, EventHandler<EventBridge.ScriptDespawnPlayerEvent>) Event<EventBridge.ScriptDespawnPlayerEvent>.Subscribe(object, Func<EventBridge.ScriptDespawnPlayerEvent, ValueTask>) Event<EventBridge.ScriptDespawnPlayerEvent>.Subscribe(object, Action<EventBridge.ScriptDespawnPlayerEvent>) Event<EventBridge.ScriptDespawnPlayerEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptDespawnPlayerEvent>) Event<EventBridge.ScriptDespawnPlayerEvent>.Subscribe(EventHandler<EventBridge.ScriptDespawnPlayerEvent>) Event<EventBridge.ScriptDespawnPlayerEvent>.Subscribe(Func<EventBridge.ScriptDespawnPlayerEvent, ValueTask>) Event<EventBridge.ScriptDespawnPlayerEvent>.Subscribe(Action<EventBridge.ScriptDespawnPlayerEvent>) Event<EventBridge.ScriptDespawnPlayerEvent>.Unsubscribe(EventHandler<EventBridge.ScriptDespawnPlayerEvent>) Event<EventBridge.ScriptDespawnPlayerEvent>.Unsubscribe(Action<EventBridge.ScriptDespawnPlayerEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptDespawnPlayerEvent(PlayerAspect, ScriptSpawnData) Event triggered by scripts to despawn a player. public ScriptDespawnPlayerEvent(PlayerAspect Aspect, ScriptSpawnData Data) Parameters Aspect PlayerAspect The aspect of the player being despawned. Data ScriptSpawnData The data associated with the despawn event. Properties Aspect The aspect of the player being despawned. public PlayerAspect Aspect { get; init; } Property Value PlayerAspect Data The data associated with the despawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptDespawnUnitEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptDespawnUnitEvent.html",
    "title": "Class EventBridge.ScriptDespawnUnitEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptDespawnUnitEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to despawn a unit. public record EventBridge.ScriptDespawnUnitEvent : Event<EventBridge.ScriptDespawnUnitEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptDespawnUnitEvent>>, IEquatable<EventBridge.ScriptDespawnUnitEvent> Inheritance object Event Event<EventBridge.ScriptDespawnUnitEvent> EventBridge.ScriptDespawnUnitEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptDespawnUnitEvent>> IEquatable<EventBridge.ScriptDespawnUnitEvent> Inherited Members Event<EventBridge.ScriptDespawnUnitEvent>.Subscribe(object, EventHandler<EventBridge.ScriptDespawnUnitEvent>) Event<EventBridge.ScriptDespawnUnitEvent>.Subscribe(object, Func<EventBridge.ScriptDespawnUnitEvent, ValueTask>) Event<EventBridge.ScriptDespawnUnitEvent>.Subscribe(object, Action<EventBridge.ScriptDespawnUnitEvent>) Event<EventBridge.ScriptDespawnUnitEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptDespawnUnitEvent>) Event<EventBridge.ScriptDespawnUnitEvent>.Subscribe(EventHandler<EventBridge.ScriptDespawnUnitEvent>) Event<EventBridge.ScriptDespawnUnitEvent>.Subscribe(Func<EventBridge.ScriptDespawnUnitEvent, ValueTask>) Event<EventBridge.ScriptDespawnUnitEvent>.Subscribe(Action<EventBridge.ScriptDespawnUnitEvent>) Event<EventBridge.ScriptDespawnUnitEvent>.Unsubscribe(EventHandler<EventBridge.ScriptDespawnUnitEvent>) Event<EventBridge.ScriptDespawnUnitEvent>.Unsubscribe(Action<EventBridge.ScriptDespawnUnitEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptDespawnUnitEvent(UnitAspect, ScriptSpawnData) Event triggered by scripts to despawn a unit. public ScriptDespawnUnitEvent(UnitAspect Aspect, ScriptSpawnData Data) Parameters Aspect UnitAspect The aspect of the unit being despawned. Data ScriptSpawnData The data associated with the despawn event. Properties Aspect The aspect of the unit being despawned. public UnitAspect Aspect { get; init; } Property Value UnitAspect Data The data associated with the despawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptSpawnBossEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptSpawnBossEvent.html",
    "title": "Class EventBridge.ScriptSpawnBossEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptSpawnBossEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to spawn a boss. public record EventBridge.ScriptSpawnBossEvent : Event<EventBridge.ScriptSpawnBossEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptSpawnBossEvent>>, IEquatable<EventBridge.ScriptSpawnBossEvent> Inheritance object Event Event<EventBridge.ScriptSpawnBossEvent> EventBridge.ScriptSpawnBossEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptSpawnBossEvent>> IEquatable<EventBridge.ScriptSpawnBossEvent> Inherited Members Event<EventBridge.ScriptSpawnBossEvent>.Subscribe(object, EventHandler<EventBridge.ScriptSpawnBossEvent>) Event<EventBridge.ScriptSpawnBossEvent>.Subscribe(object, Func<EventBridge.ScriptSpawnBossEvent, ValueTask>) Event<EventBridge.ScriptSpawnBossEvent>.Subscribe(object, Action<EventBridge.ScriptSpawnBossEvent>) Event<EventBridge.ScriptSpawnBossEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptSpawnBossEvent>) Event<EventBridge.ScriptSpawnBossEvent>.Subscribe(EventHandler<EventBridge.ScriptSpawnBossEvent>) Event<EventBridge.ScriptSpawnBossEvent>.Subscribe(Func<EventBridge.ScriptSpawnBossEvent, ValueTask>) Event<EventBridge.ScriptSpawnBossEvent>.Subscribe(Action<EventBridge.ScriptSpawnBossEvent>) Event<EventBridge.ScriptSpawnBossEvent>.Unsubscribe(EventHandler<EventBridge.ScriptSpawnBossEvent>) Event<EventBridge.ScriptSpawnBossEvent>.Unsubscribe(Action<EventBridge.ScriptSpawnBossEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnBossEvent(VBloodAspect, ScriptSpawnData) Event triggered by scripts to spawn a boss. public ScriptSpawnBossEvent(VBloodAspect Aspect, ScriptSpawnData Data) Parameters Aspect VBloodAspect The aspect of the boss being spawned. Data ScriptSpawnData The data associated with the spawn event. Properties Aspect The aspect of the boss being spawned. public VBloodAspect Aspect { get; init; } Property Value VBloodAspect Data The data associated with the spawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptSpawnGatherableEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptSpawnGatherableEvent.html",
    "title": "Class EventBridge.ScriptSpawnGatherableEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptSpawnGatherableEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to spawn a gatherable entity. public record EventBridge.ScriptSpawnGatherableEvent : Event<EventBridge.ScriptSpawnGatherableEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptSpawnGatherableEvent>>, IEquatable<EventBridge.ScriptSpawnGatherableEvent> Inheritance object Event Event<EventBridge.ScriptSpawnGatherableEvent> EventBridge.ScriptSpawnGatherableEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptSpawnGatherableEvent>> IEquatable<EventBridge.ScriptSpawnGatherableEvent> Inherited Members Event<EventBridge.ScriptSpawnGatherableEvent>.Subscribe(object, EventHandler<EventBridge.ScriptSpawnGatherableEvent>) Event<EventBridge.ScriptSpawnGatherableEvent>.Subscribe(object, Func<EventBridge.ScriptSpawnGatherableEvent, ValueTask>) Event<EventBridge.ScriptSpawnGatherableEvent>.Subscribe(object, Action<EventBridge.ScriptSpawnGatherableEvent>) Event<EventBridge.ScriptSpawnGatherableEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptSpawnGatherableEvent>) Event<EventBridge.ScriptSpawnGatherableEvent>.Subscribe(EventHandler<EventBridge.ScriptSpawnGatherableEvent>) Event<EventBridge.ScriptSpawnGatherableEvent>.Subscribe(Func<EventBridge.ScriptSpawnGatherableEvent, ValueTask>) Event<EventBridge.ScriptSpawnGatherableEvent>.Subscribe(Action<EventBridge.ScriptSpawnGatherableEvent>) Event<EventBridge.ScriptSpawnGatherableEvent>.Unsubscribe(EventHandler<EventBridge.ScriptSpawnGatherableEvent>) Event<EventBridge.ScriptSpawnGatherableEvent>.Unsubscribe(Action<EventBridge.ScriptSpawnGatherableEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnGatherableEvent(GatherableAspect, ScriptSpawnData) Event triggered by scripts to spawn a gatherable entity. public ScriptSpawnGatherableEvent(GatherableAspect Aspect, ScriptSpawnData Data) Parameters Aspect GatherableAspect The aspect of the gatherable being spawned. Data ScriptSpawnData The data associated with the spawn event. Properties Aspect The aspect of the gatherable being spawned. public GatherableAspect Aspect { get; init; } Property Value GatherableAspect Data The data associated with the spawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptSpawnMinionEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptSpawnMinionEvent.html",
    "title": "Class EventBridge.ScriptSpawnMinionEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptSpawnMinionEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to spawn a minion. public record EventBridge.ScriptSpawnMinionEvent : Event<EventBridge.ScriptSpawnMinionEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptSpawnMinionEvent>>, IEquatable<EventBridge.ScriptSpawnMinionEvent> Inheritance object Event Event<EventBridge.ScriptSpawnMinionEvent> EventBridge.ScriptSpawnMinionEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptSpawnMinionEvent>> IEquatable<EventBridge.ScriptSpawnMinionEvent> Inherited Members Event<EventBridge.ScriptSpawnMinionEvent>.Subscribe(object, EventHandler<EventBridge.ScriptSpawnMinionEvent>) Event<EventBridge.ScriptSpawnMinionEvent>.Subscribe(object, Func<EventBridge.ScriptSpawnMinionEvent, ValueTask>) Event<EventBridge.ScriptSpawnMinionEvent>.Subscribe(object, Action<EventBridge.ScriptSpawnMinionEvent>) Event<EventBridge.ScriptSpawnMinionEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptSpawnMinionEvent>) Event<EventBridge.ScriptSpawnMinionEvent>.Subscribe(EventHandler<EventBridge.ScriptSpawnMinionEvent>) Event<EventBridge.ScriptSpawnMinionEvent>.Subscribe(Func<EventBridge.ScriptSpawnMinionEvent, ValueTask>) Event<EventBridge.ScriptSpawnMinionEvent>.Subscribe(Action<EventBridge.ScriptSpawnMinionEvent>) Event<EventBridge.ScriptSpawnMinionEvent>.Unsubscribe(EventHandler<EventBridge.ScriptSpawnMinionEvent>) Event<EventBridge.ScriptSpawnMinionEvent>.Unsubscribe(Action<EventBridge.ScriptSpawnMinionEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnMinionEvent(MinionAspect, ScriptSpawnData) Event triggered by scripts to spawn a minion. public ScriptSpawnMinionEvent(MinionAspect Aspect, ScriptSpawnData Data) Parameters Aspect MinionAspect The aspect of the minion being spawned. Data ScriptSpawnData The data associated with the spawn event. Properties Aspect The aspect of the minion being spawned. public MinionAspect Aspect { get; init; } Property Value MinionAspect Data The data associated with the spawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptSpawnPlayerEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptSpawnPlayerEvent.html",
    "title": "Class EventBridge.ScriptSpawnPlayerEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptSpawnPlayerEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to spawn a player. public record EventBridge.ScriptSpawnPlayerEvent : Event<EventBridge.ScriptSpawnPlayerEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptSpawnPlayerEvent>>, IEquatable<EventBridge.ScriptSpawnPlayerEvent> Inheritance object Event Event<EventBridge.ScriptSpawnPlayerEvent> EventBridge.ScriptSpawnPlayerEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptSpawnPlayerEvent>> IEquatable<EventBridge.ScriptSpawnPlayerEvent> Inherited Members Event<EventBridge.ScriptSpawnPlayerEvent>.Subscribe(object, EventHandler<EventBridge.ScriptSpawnPlayerEvent>) Event<EventBridge.ScriptSpawnPlayerEvent>.Subscribe(object, Func<EventBridge.ScriptSpawnPlayerEvent, ValueTask>) Event<EventBridge.ScriptSpawnPlayerEvent>.Subscribe(object, Action<EventBridge.ScriptSpawnPlayerEvent>) Event<EventBridge.ScriptSpawnPlayerEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptSpawnPlayerEvent>) Event<EventBridge.ScriptSpawnPlayerEvent>.Subscribe(EventHandler<EventBridge.ScriptSpawnPlayerEvent>) Event<EventBridge.ScriptSpawnPlayerEvent>.Subscribe(Func<EventBridge.ScriptSpawnPlayerEvent, ValueTask>) Event<EventBridge.ScriptSpawnPlayerEvent>.Subscribe(Action<EventBridge.ScriptSpawnPlayerEvent>) Event<EventBridge.ScriptSpawnPlayerEvent>.Unsubscribe(EventHandler<EventBridge.ScriptSpawnPlayerEvent>) Event<EventBridge.ScriptSpawnPlayerEvent>.Unsubscribe(Action<EventBridge.ScriptSpawnPlayerEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnPlayerEvent(PlayerAspect, ScriptSpawnData) Event triggered by scripts to spawn a player. public ScriptSpawnPlayerEvent(PlayerAspect Aspect, ScriptSpawnData Data) Parameters Aspect PlayerAspect The aspect of the player being spawned. Data ScriptSpawnData The data associated with the spawn event. Properties Aspect The aspect of the player being spawned. public PlayerAspect Aspect { get; init; } Property Value PlayerAspect Data The data associated with the spawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.ScriptSpawnUnitEvent.html": {
    "href": "api/RisingV.Core.EventBridge.ScriptSpawnUnitEvent.html",
    "title": "Class EventBridge.ScriptSpawnUnitEvent | RisingV.Core",
    "summary": "Class EventBridge.ScriptSpawnUnitEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered by scripts to spawn a unit. public record EventBridge.ScriptSpawnUnitEvent : Event<EventBridge.ScriptSpawnUnitEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptSpawnUnitEvent>>, IEquatable<EventBridge.ScriptSpawnUnitEvent> Inheritance object Event Event<EventBridge.ScriptSpawnUnitEvent> EventBridge.ScriptSpawnUnitEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptSpawnUnitEvent>> IEquatable<EventBridge.ScriptSpawnUnitEvent> Inherited Members Event<EventBridge.ScriptSpawnUnitEvent>.Subscribe(object, EventHandler<EventBridge.ScriptSpawnUnitEvent>) Event<EventBridge.ScriptSpawnUnitEvent>.Subscribe(object, Func<EventBridge.ScriptSpawnUnitEvent, ValueTask>) Event<EventBridge.ScriptSpawnUnitEvent>.Subscribe(object, Action<EventBridge.ScriptSpawnUnitEvent>) Event<EventBridge.ScriptSpawnUnitEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptSpawnUnitEvent>) Event<EventBridge.ScriptSpawnUnitEvent>.Subscribe(EventHandler<EventBridge.ScriptSpawnUnitEvent>) Event<EventBridge.ScriptSpawnUnitEvent>.Subscribe(Func<EventBridge.ScriptSpawnUnitEvent, ValueTask>) Event<EventBridge.ScriptSpawnUnitEvent>.Subscribe(Action<EventBridge.ScriptSpawnUnitEvent>) Event<EventBridge.ScriptSpawnUnitEvent>.Unsubscribe(EventHandler<EventBridge.ScriptSpawnUnitEvent>) Event<EventBridge.ScriptSpawnUnitEvent>.Unsubscribe(Action<EventBridge.ScriptSpawnUnitEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnUnitEvent(UnitAspect, ScriptSpawnData) Event triggered by scripts to spawn a unit. public ScriptSpawnUnitEvent(UnitAspect Aspect, ScriptSpawnData Data) Parameters Aspect UnitAspect The aspect of the unit being spawned. Data ScriptSpawnData The data associated with the spawn event. Properties Aspect The aspect of the unit being spawned. public UnitAspect Aspect { get; init; } Property Value UnitAspect Data The data associated with the spawn event. public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData"
  },
  "api/RisingV.Core.EventBridge.SpawnBossEvent.html": {
    "href": "api/RisingV.Core.EventBridge.SpawnBossEvent.html",
    "title": "Class EventBridge.SpawnBossEvent | RisingV.Core",
    "summary": "Class EventBridge.SpawnBossEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a boss is spawned. public record EventBridge.SpawnBossEvent : Event<EventBridge.SpawnBossEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.SpawnBossEvent>>, IEquatable<EventBridge.SpawnBossEvent> Inheritance object Event Event<EventBridge.SpawnBossEvent> EventBridge.SpawnBossEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.SpawnBossEvent>> IEquatable<EventBridge.SpawnBossEvent> Inherited Members Event<EventBridge.SpawnBossEvent>.Subscribe(object, EventHandler<EventBridge.SpawnBossEvent>) Event<EventBridge.SpawnBossEvent>.Subscribe(object, Func<EventBridge.SpawnBossEvent, ValueTask>) Event<EventBridge.SpawnBossEvent>.Subscribe(object, Action<EventBridge.SpawnBossEvent>) Event<EventBridge.SpawnBossEvent>.Unsubscribe(object, EventHandler<EventBridge.SpawnBossEvent>) Event<EventBridge.SpawnBossEvent>.Subscribe(EventHandler<EventBridge.SpawnBossEvent>) Event<EventBridge.SpawnBossEvent>.Subscribe(Func<EventBridge.SpawnBossEvent, ValueTask>) Event<EventBridge.SpawnBossEvent>.Subscribe(Action<EventBridge.SpawnBossEvent>) Event<EventBridge.SpawnBossEvent>.Unsubscribe(EventHandler<EventBridge.SpawnBossEvent>) Event<EventBridge.SpawnBossEvent>.Unsubscribe(Action<EventBridge.SpawnBossEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnBossEvent(VBloodAspect, SpawnData) Event triggered when a boss is spawned. public SpawnBossEvent(VBloodAspect Aspect, SpawnData Data) Parameters Aspect VBloodAspect The aspect of the boss being spawned. Data SpawnData The data associated with the spawn event. Properties Aspect The aspect of the boss being spawned. public VBloodAspect Aspect { get; init; } Property Value VBloodAspect Data The data associated with the spawn event. public SpawnData Data { get; init; } Property Value SpawnData"
  },
  "api/RisingV.Core.EventBridge.SpawnGatherableEvent.html": {
    "href": "api/RisingV.Core.EventBridge.SpawnGatherableEvent.html",
    "title": "Class EventBridge.SpawnGatherableEvent | RisingV.Core",
    "summary": "Class EventBridge.SpawnGatherableEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a gatherable entity is spawned. public record EventBridge.SpawnGatherableEvent : Event<EventBridge.SpawnGatherableEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.SpawnGatherableEvent>>, IEquatable<EventBridge.SpawnGatherableEvent> Inheritance object Event Event<EventBridge.SpawnGatherableEvent> EventBridge.SpawnGatherableEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.SpawnGatherableEvent>> IEquatable<EventBridge.SpawnGatherableEvent> Inherited Members Event<EventBridge.SpawnGatherableEvent>.Subscribe(object, EventHandler<EventBridge.SpawnGatherableEvent>) Event<EventBridge.SpawnGatherableEvent>.Subscribe(object, Func<EventBridge.SpawnGatherableEvent, ValueTask>) Event<EventBridge.SpawnGatherableEvent>.Subscribe(object, Action<EventBridge.SpawnGatherableEvent>) Event<EventBridge.SpawnGatherableEvent>.Unsubscribe(object, EventHandler<EventBridge.SpawnGatherableEvent>) Event<EventBridge.SpawnGatherableEvent>.Subscribe(EventHandler<EventBridge.SpawnGatherableEvent>) Event<EventBridge.SpawnGatherableEvent>.Subscribe(Func<EventBridge.SpawnGatherableEvent, ValueTask>) Event<EventBridge.SpawnGatherableEvent>.Subscribe(Action<EventBridge.SpawnGatherableEvent>) Event<EventBridge.SpawnGatherableEvent>.Unsubscribe(EventHandler<EventBridge.SpawnGatherableEvent>) Event<EventBridge.SpawnGatherableEvent>.Unsubscribe(Action<EventBridge.SpawnGatherableEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnGatherableEvent(GatherableAspect, SpawnData) Event triggered when a gatherable entity is spawned. public SpawnGatherableEvent(GatherableAspect Aspect, SpawnData Data) Parameters Aspect GatherableAspect The aspect of the gatherable being spawned. Data SpawnData The data associated with the spawn event. Properties Aspect The aspect of the gatherable being spawned. public GatherableAspect Aspect { get; init; } Property Value GatherableAspect Data The data associated with the spawn event. public SpawnData Data { get; init; } Property Value SpawnData"
  },
  "api/RisingV.Core.EventBridge.SpawnMinionEvent.html": {
    "href": "api/RisingV.Core.EventBridge.SpawnMinionEvent.html",
    "title": "Class EventBridge.SpawnMinionEvent | RisingV.Core",
    "summary": "Class EventBridge.SpawnMinionEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a minion is spawned. public record EventBridge.SpawnMinionEvent : Event<EventBridge.SpawnMinionEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.SpawnMinionEvent>>, IEquatable<EventBridge.SpawnMinionEvent> Inheritance object Event Event<EventBridge.SpawnMinionEvent> EventBridge.SpawnMinionEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.SpawnMinionEvent>> IEquatable<EventBridge.SpawnMinionEvent> Inherited Members Event<EventBridge.SpawnMinionEvent>.Subscribe(object, EventHandler<EventBridge.SpawnMinionEvent>) Event<EventBridge.SpawnMinionEvent>.Subscribe(object, Func<EventBridge.SpawnMinionEvent, ValueTask>) Event<EventBridge.SpawnMinionEvent>.Subscribe(object, Action<EventBridge.SpawnMinionEvent>) Event<EventBridge.SpawnMinionEvent>.Unsubscribe(object, EventHandler<EventBridge.SpawnMinionEvent>) Event<EventBridge.SpawnMinionEvent>.Subscribe(EventHandler<EventBridge.SpawnMinionEvent>) Event<EventBridge.SpawnMinionEvent>.Subscribe(Func<EventBridge.SpawnMinionEvent, ValueTask>) Event<EventBridge.SpawnMinionEvent>.Subscribe(Action<EventBridge.SpawnMinionEvent>) Event<EventBridge.SpawnMinionEvent>.Unsubscribe(EventHandler<EventBridge.SpawnMinionEvent>) Event<EventBridge.SpawnMinionEvent>.Unsubscribe(Action<EventBridge.SpawnMinionEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnMinionEvent(MinionAspect, SpawnData) Event triggered when a minion is spawned. public SpawnMinionEvent(MinionAspect Aspect, SpawnData Data) Parameters Aspect MinionAspect The aspect of the minion being spawned. Data SpawnData The data associated with the spawn event. Properties Aspect The aspect of the minion being spawned. public MinionAspect Aspect { get; init; } Property Value MinionAspect Data The data associated with the spawn event. public SpawnData Data { get; init; } Property Value SpawnData"
  },
  "api/RisingV.Core.EventBridge.SpawnPlayerEvent.html": {
    "href": "api/RisingV.Core.EventBridge.SpawnPlayerEvent.html",
    "title": "Class EventBridge.SpawnPlayerEvent | RisingV.Core",
    "summary": "Class EventBridge.SpawnPlayerEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a player is spawned. public record EventBridge.SpawnPlayerEvent : Event<EventBridge.SpawnPlayerEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.SpawnPlayerEvent>>, IEquatable<EventBridge.SpawnPlayerEvent> Inheritance object Event Event<EventBridge.SpawnPlayerEvent> EventBridge.SpawnPlayerEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.SpawnPlayerEvent>> IEquatable<EventBridge.SpawnPlayerEvent> Inherited Members Event<EventBridge.SpawnPlayerEvent>.Subscribe(object, EventHandler<EventBridge.SpawnPlayerEvent>) Event<EventBridge.SpawnPlayerEvent>.Subscribe(object, Func<EventBridge.SpawnPlayerEvent, ValueTask>) Event<EventBridge.SpawnPlayerEvent>.Subscribe(object, Action<EventBridge.SpawnPlayerEvent>) Event<EventBridge.SpawnPlayerEvent>.Unsubscribe(object, EventHandler<EventBridge.SpawnPlayerEvent>) Event<EventBridge.SpawnPlayerEvent>.Subscribe(EventHandler<EventBridge.SpawnPlayerEvent>) Event<EventBridge.SpawnPlayerEvent>.Subscribe(Func<EventBridge.SpawnPlayerEvent, ValueTask>) Event<EventBridge.SpawnPlayerEvent>.Subscribe(Action<EventBridge.SpawnPlayerEvent>) Event<EventBridge.SpawnPlayerEvent>.Unsubscribe(EventHandler<EventBridge.SpawnPlayerEvent>) Event<EventBridge.SpawnPlayerEvent>.Unsubscribe(Action<EventBridge.SpawnPlayerEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnPlayerEvent(PlayerAspect, SpawnData) Event triggered when a player is spawned. public SpawnPlayerEvent(PlayerAspect Aspect, SpawnData Data) Parameters Aspect PlayerAspect The aspect of the player being spawned. Data SpawnData The data associated with the spawn event. Properties Aspect The aspect of the player being spawned. public PlayerAspect Aspect { get; init; } Property Value PlayerAspect Data The data associated with the spawn event. public SpawnData Data { get; init; } Property Value SpawnData"
  },
  "api/RisingV.Core.EventBridge.SpawnUnitEvent.html": {
    "href": "api/RisingV.Core.EventBridge.SpawnUnitEvent.html",
    "title": "Class EventBridge.SpawnUnitEvent | RisingV.Core",
    "summary": "Class EventBridge.SpawnUnitEvent Namespace RisingV.Core Assembly RisingV.Core.dll Event triggered when a unit is spawned. public record EventBridge.SpawnUnitEvent : Event<EventBridge.SpawnUnitEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.SpawnUnitEvent>>, IEquatable<EventBridge.SpawnUnitEvent> Inheritance object Event Event<EventBridge.SpawnUnitEvent> EventBridge.SpawnUnitEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.SpawnUnitEvent>> IEquatable<EventBridge.SpawnUnitEvent> Inherited Members Event<EventBridge.SpawnUnitEvent>.Subscribe(object, EventHandler<EventBridge.SpawnUnitEvent>) Event<EventBridge.SpawnUnitEvent>.Subscribe(object, Func<EventBridge.SpawnUnitEvent, ValueTask>) Event<EventBridge.SpawnUnitEvent>.Subscribe(object, Action<EventBridge.SpawnUnitEvent>) Event<EventBridge.SpawnUnitEvent>.Unsubscribe(object, EventHandler<EventBridge.SpawnUnitEvent>) Event<EventBridge.SpawnUnitEvent>.Subscribe(EventHandler<EventBridge.SpawnUnitEvent>) Event<EventBridge.SpawnUnitEvent>.Subscribe(Func<EventBridge.SpawnUnitEvent, ValueTask>) Event<EventBridge.SpawnUnitEvent>.Subscribe(Action<EventBridge.SpawnUnitEvent>) Event<EventBridge.SpawnUnitEvent>.Unsubscribe(EventHandler<EventBridge.SpawnUnitEvent>) Event<EventBridge.SpawnUnitEvent>.Unsubscribe(Action<EventBridge.SpawnUnitEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnUnitEvent(UnitAspect, SpawnData) Event triggered when a unit is spawned. public SpawnUnitEvent(UnitAspect Aspect, SpawnData Data) Parameters Aspect UnitAspect The aspect of the unit being spawned. Data SpawnData The data associated with the spawn event. Properties Aspect The aspect of the unit being spawned. public UnitAspect Aspect { get; init; } Property Value UnitAspect Data The data associated with the spawn event. public SpawnData Data { get; init; } Property Value SpawnData"
  },
  "api/RisingV.Core.EventBridge.html": {
    "href": "api/RisingV.Core.EventBridge.html",
    "title": "Class EventBridge | RisingV.Core",
    "summary": "Class EventBridge Namespace RisingV.Core Assembly RisingV.Core.dll Also see RisingV.Shared.EventBridge public static class EventBridge Inheritance object EventBridge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispose() Publish an event synchronously to all subscribers, with error handling. public static void Dispose() PublishAsync<TEvent>(TEvent, CancellationToken) Publish an event asynchronously to all subscribers. public static ValueTask PublishAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Returns ValueTask Type Parameters TEvent The type of the event to publish. PublishSafeAsync<TEvent>(TEvent, CancellationToken) Publish an event asynchronously to all subscribers, with error handling. public static ValueTask PublishSafeAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Returns ValueTask Type Parameters TEvent The type of the event to publish. PublishSafe<TEvent>(TEvent, CancellationToken) Publish an event synchronously to all subscribers, with error handling. public static void PublishSafe<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Type Parameters TEvent The type of the event to publish. Publish<TEvent>(TEvent, CancellationToken) Publish an event synchronously to all subscribers. public static void Publish<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Type Parameters TEvent The type of the event to publish. Subscribe<TEvent>(object, EventHandler<TEvent>, int) Initializes a new instance of the RisingV.Shared.Events.ManagedEventBus class. public static IDisposable Subscribe<TEvent>(object owner, EventHandler<TEvent> handler, int handlerHash = 0) where TEvent : IEvent Parameters owner object The owner of the event bus, used for managing subscriptions. handler EventHandler<TEvent> Event handler to subscribe to the event bus. handlerHash int Optional hash code for the handler, used to identify the subscription. Returns IDisposable Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(object, Action<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. public static IDisposable Subscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler Action<TEvent> Handler function that processes the event. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(object, Func<TEvent, ValueTask>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. public static IDisposable Subscribe<TEvent>(object owner, Func<TEvent, ValueTask> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler Func<TEvent, ValueTask> Handler function that processes the event. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Type Parameters TEvent The type of the event to subscribe to. Unsubscribe(object) Unsubscribe all handlers for the given owner. public static void Unsubscribe(object owner) Parameters owner object Owner of the subscriptions to unsubscribe. Unsubscribe<TEvent>(object, EventHandler<TEvent>) Unsubscribe a handler from the event bus. public static void Unsubscribe<TEvent>(object owner, EventHandler<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler EventHandler<TEvent> Handler function that processes the event. Type Parameters TEvent The type of the event to unsubscribe from. Unsubscribe<TEvent>(object, Action<TEvent>) Unsubscribe a handler from the event bus. public static void Unsubscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler Action<TEvent> Handler function that processes the event. Type Parameters TEvent The type of the event to unsubscribe from."
  },
  "api/RisingV.Core.Exceptions.PlayerAlreadyExistsException.html": {
    "href": "api/RisingV.Core.Exceptions.PlayerAlreadyExistsException.html",
    "title": "Class PlayerAlreadyExistsException | RisingV.Core",
    "summary": "Class PlayerAlreadyExistsException Namespace RisingV.Core.Exceptions Assembly RisingV.Core.dll Exception thrown when a player with the specified name already exists. public class PlayerAlreadyExistsException : AlreadyExistsException, ISerializable Inheritance object Exception BaseException AlreadyExistsException PlayerAlreadyExistsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerAlreadyExistsException(string) Exception thrown when a player with the specified name already exists. public PlayerAlreadyExistsException(string playerName) Parameters playerName string The name of the player that already exists."
  },
  "api/RisingV.Core.Exceptions.PlayerNotFoundException.html": {
    "href": "api/RisingV.Core.Exceptions.PlayerNotFoundException.html",
    "title": "Class PlayerNotFoundException | RisingV.Core",
    "summary": "Class PlayerNotFoundException Namespace RisingV.Core.Exceptions Assembly RisingV.Core.dll Exception thrown when a player is not found. public class PlayerNotFoundException : NotFoundException, ISerializable Inheritance object Exception BaseException NotFoundException PlayerNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerNotFoundException(string) Exception thrown when a player is not found. public PlayerNotFoundException(string playerName) Parameters playerName string The name of the player that was not found."
  },
  "api/RisingV.Core.Exceptions.html": {
    "href": "api/RisingV.Core.Exceptions.html",
    "title": "Namespace RisingV.Core.Exceptions | RisingV.Core",
    "summary": "Namespace RisingV.Core.Exceptions Classes PlayerAlreadyExistsException Exception thrown when a player with the specified name already exists. PlayerNotFoundException Exception thrown when a player is not found."
  },
  "api/RisingV.Core.Extensions.EntityExtensions.html": {
    "href": "api/RisingV.Core.Extensions.EntityExtensions.html",
    "title": "Class EntityExtensions | RisingV.Core",
    "summary": "Class EntityExtensions Namespace RisingV.Core.Extensions Assembly RisingV.Core.dll Provides various utility methods for working with entities in the RisingV game. public static class EntityExtensions Inheritance object EntityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCustomComponentData<TX>(Entity, bool) Adds custom component data of type TX to the entity. public static TX? AddCustomComponentData<TX>(this Entity entity, bool failIfExists = true) where TX : IEntityComponentData Parameters entity Entity The entity to add the custom component data to. failIfExists bool If true, throws an exception if the custom component data already exists; otherwise, it will not throw. Returns TX The custom component data of type TX if added successfully; otherwise, null. Type Parameters TX The type of the custom component data to add, must implement RisingV.Shared.Entities.IEntityComponentData. Exceptions AccessViolationException Thrown if the custom component data already exists and failIfExists is true. As<TX>(Entity, bool, params object?[]?) Entity as aspect of type TX. public static TX As<TX>(this Entity entity, bool strict = true, params object?[]? args) where TX : EntityAspect Parameters entity Entity The entity to create the aspect for. strict bool If true, throws an exception if the entity does not qualify for the aspect. args object[] Optional arguments to pass to the aspect constructor. Returns TX An instance of the aspect type TX. Type Parameters TX The type of aspect to create, must implement EntityAspect. Aspect<TX>(Entity, bool, params object?[]?) Creates an aspect of type TX for the given entity. public static TX Aspect<TX>(this Entity entity, bool strict = true, params object?[]? args) where TX : EntityAspect Parameters entity Entity The entity to create the aspect for. strict bool If true, throws an exception if the entity does not qualify for the aspect. args object[] Optional arguments to pass to the aspect constructor. Returns TX An instance of the aspect type TX. Type Parameters TX The type of aspect to create, must implement EntityAspect. CountStashedItems(Entity, PrefabGUID, bool) Counts the number of stashed items of a specific type in an entity's stashes. public static int CountStashedItems(this Entity entity, PrefabGUID itemGuid, bool alliedOnly = false) Parameters entity Entity The entity to count stashed items for. itemGuid PrefabGUID The PrefabGUID of the item to count. alliedOnly bool If true, only counts items from stashes that are allied with the entity's team. Returns int The count of stashed items matching the specified PrefabGUID. FetchPlayer(Entity) Fetches the PlayerAspect for a player entity. public static PlayerAspect? FetchPlayer(this Entity entity) Parameters entity Entity The entity to fetch the PlayerAspect from. Returns PlayerAspect The PlayerAspect if the entity is a player; otherwise, null. GetAllStashItems(Entity, bool) Gets all stash items associated with an entity. public static IEnumerable<InventoryItemData> GetAllStashItems(this Entity entity, bool alliedOnly = false) Parameters entity Entity The entity to get stash items for. alliedOnly bool If true, only returns items from stashes that are allied with the entity's team. Returns IEnumerable<InventoryItemData> An enumerable collection of InventoryItemData representing the items in the stashes. GetCustomComponentData<TX>(Entity) Gets custom component data of type TX from the entity. public static TX? GetCustomComponentData<TX>(this Entity entity) where TX : IEntityComponentData Parameters entity Entity The entity to get the custom component data from. Returns TX The custom component data of type TX if it exists; otherwise, null. Type Parameters TX The type of the custom component data to retrieve, must implement RisingV.Shared.Entities.IEntityComponentData. GetOrCreateCustomComponentData<TX>(Entity) Gets or creates custom component data of type TX for the entity. public static TX? GetOrCreateCustomComponentData<TX>(this Entity entity) where TX : IEntityComponentData Parameters entity Entity The entity to get or create the custom component data for. Returns TX The custom component data of type TX if it exists or is created; otherwise, null. Type Parameters TX The type of the custom component data to retrieve or create, must implement RisingV.Shared.Entities.IEntityComponentData. GetPrefabEntity(Entity) Gets the PrefabGUID of an entity. public static Entity GetPrefabEntity(this Entity entity) Parameters entity Entity The entity to get the PrefabGUID from. Returns Entity The PrefabGUID of the entity. GetStashes(Entity, bool) Gets all stashes associated with an entity. public static IEnumerable<InventoryAspect> GetStashes(this Entity entity, bool alliedOnly = false) Parameters entity Entity The entity to get stashes for. alliedOnly bool If true, only returns stashes that are allied with the entity's team. Returns IEnumerable<InventoryAspect> An enumerable collection of InventoryAspect representing the stashes. IsAllied(Entity, Entity) Checks if an entity is allied with a player entity. public static bool IsAllied(this Entity entity, Entity player) Parameters entity Entity The entity to check. player Entity The player entity to check against. Returns bool True if the entity is allied with the player; otherwise, false. IsAspect<TAspect>(object) Checks if an entity has a specific aspect type. public static bool IsAspect<TAspect>(this object entity) where TAspect : IAspect Parameters entity object The entity to check. Returns bool True if the entity has the specified aspect; otherwise, false. Type Parameters TAspect The type of aspect to check for, must implement Unity.Entities.IAspect. IsDifferentPlayer(Entity, Entity) Checks if two entities are different players. public static bool IsDifferentPlayer(this Entity entity, Entity target) Parameters entity Entity The first entity to compare. target Entity The second entity to compare. Returns bool True if both entities are players and they are not the same entity; otherwise, false. IsFollowingPlayer(Entity) Checks if an entity is following a player. public static bool IsFollowingPlayer(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is a follower and is following a player; otherwise, false. IsGatherable(Entity) Checks if an entity is a gatherable entity (e.g., resources, plants). public static bool IsGatherable(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is gatherable; otherwise, false. IsInBase(Entity, out Entity, out TerritoryAlignment, bool) Checks if an entity is within a castle territory and determines the alignment relationship. public static bool IsInBase(Entity entity, out Entity territory, out TerritoryAlignment territoryAlignment, bool requireRoom = false) Parameters entity Entity The entity to check territory Entity The output territory entity if found territoryAlignment TerritoryAlignment The alignment relationship (Friendly, Enemy, or Neutral) requireRoom bool If true, also checks if the entity is within an enclosed room Returns bool True if the entity is in a territory, false otherwise IsMinion(Entity) Checks if an entity is a minion entity (e.g., summoned creatures). public static bool IsMinion(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is a minion; otherwise, false. IsNpc(Entity) Checks if an entity is a minion entity (e.g., summoned creatures). public static bool IsNpc(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is a minion; otherwise, false. IsPlayer(Entity) Checks if an entity is a player entity. public static bool IsPlayer(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is a player; otherwise, false. IsUnit(Entity) Checks if an entity is a player character entity. public static bool IsUnit(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is a player character; otherwise, false. IsVBlood(Entity) Checks if an entity is a VBlood entity (e.g., bosses, special enemies). public static bool IsVBlood(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is a VBlood; otherwise, false. RemoveCustomComponentData<TX>(Entity) Removes custom component data of type TX from the entity. public static TX? RemoveCustomComponentData<TX>(this Entity entity) where TX : IEntityComponentData Parameters entity Entity The entity to remove the custom component data from. Returns TX The custom component data of type TX if it was removed; otherwise, null. Type Parameters TX The type of the custom component data to remove, must implement RisingV.Shared.Entities.IEntityComponentData. TryAspect<TX>(Entity, bool, params object?[]?) Attempts to create an aspect of type TX for the given entity. public static TX? TryAspect<TX>(this Entity entity, bool strict = true, params object?[]? args) where TX : EntityAspect Parameters entity Entity The entity to create the aspect for. strict bool If true, throws an exception if the entity does not qualify for the aspect. args object[] Optional arguments to pass to the aspect constructor. Returns TX An instance of the aspect type TX if successful; otherwise, null. Type Parameters TX The type of aspect to create, must implement EntityAspect. TryAspect<TX>(Entity, out TX?, bool, params object?[]?) Attempts to create an aspect of type TX for the given entity. public static bool TryAspect<TX>(this Entity entity, out TX? aspect, bool strict = true, params object?[]? args) where TX : EntityAspect Parameters entity Entity The entity to create the aspect for. aspect TX The output aspect if creation is successful. strict bool If true, throws an exception if the entity does not qualify for the aspect. args object[] Optional arguments to pass to the aspect constructor. Returns bool True if the aspect was created successfully; otherwise, false. Type Parameters TX The type of aspect to create, must implement EntityAspect. TryGetFloorEntityBelowEntity(Entity, out Entity) Attempts to find the floor entity directly below a given entity. public static bool TryGetFloorEntityBelowEntity(Entity entity, out Entity floorEntity) Parameters entity Entity The entity to check below floorEntity Entity The output floor entity if found Returns bool True if a floor entity was found, false otherwise"
  },
  "api/RisingV.Core.Extensions.EntityManagerExtensions.html": {
    "href": "api/RisingV.Core.Extensions.EntityManagerExtensions.html",
    "title": "Class EntityManagerExtensions | RisingV.Core",
    "summary": "Class EntityManagerExtensions Namespace RisingV.Core.Extensions Assembly RisingV.Core.dll public static class EntityManagerExtensions Inheritance object EntityManagerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Extensions.PrefabGuidExtensions.html": {
    "href": "api/RisingV.Core.Extensions.PrefabGuidExtensions.html",
    "title": "Class PrefabGuidExtensions | RisingV.Core",
    "summary": "Class PrefabGuidExtensions Namespace RisingV.Core.Extensions Assembly RisingV.Core.dll public static class PrefabGuidExtensions Inheritance object PrefabGuidExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Extensions.UserExtensions.html": {
    "href": "api/RisingV.Core.Extensions.UserExtensions.html",
    "title": "Class UserExtensions | RisingV.Core",
    "summary": "Class UserExtensions Namespace RisingV.Core.Extensions Assembly RisingV.Core.dll Provides extension methods for the User class to access player aspects. public static class UserExtensions Inheritance object UserExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Aspect(User) Gets the PlayerAspect for the given User. public static PlayerAspect Aspect(this User user) Parameters user User The User instance to get the PlayerAspect for. Returns PlayerAspect The PlayerAspect associated with the User's LocalCharacter."
  },
  "api/RisingV.Core.Extensions.WorldExtensions.html": {
    "href": "api/RisingV.Core.Extensions.WorldExtensions.html",
    "title": "Class WorldExtensions | RisingV.Core",
    "summary": "Class WorldExtensions Namespace RisingV.Core.Extensions Assembly RisingV.Core.dll Provides extension methods for the Unity.Entities.World class to retrieve managed component data. public static class WorldExtensions Inheritance object WorldExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetManagedComponentDataOrDefault<T>(World, EntityAspect) Retrieves managed component data of type T for the specified entity aspect in the given world. public static T? GetManagedComponentDataOrDefault<T>(this World world, EntityAspect entityAspect) where T : class Parameters world World The world from which to retrieve the managed component data. entityAspect EntityAspect The entity aspect for which to retrieve the managed component data. Returns T An instance of type T if it exists; otherwise, null. Type Parameters T The type of the managed component data to retrieve. Must be a class. GetManagedComponentDataOrDefault<T>(World, Entity, PrefabGUID?) Retrieves managed component data of type T for the specified entity in the given world. public static T? GetManagedComponentDataOrDefault<T>(this World world, Entity entity, PrefabGUID? prefabGuid = null) where T : class Parameters world World The world from which to retrieve the managed component data. entity Entity The entity for which to retrieve the managed component data. prefabGuid PrefabGUID? Optional parameter to specify the prefab GUID associated with the entity. If not provided, it will be retrieved from the entity. Returns T An instance of type T if it exists; otherwise, null. Type Parameters T The type of the managed component data to retrieve. Must be a class."
  },
  "api/RisingV.Core.Extensions.html": {
    "href": "api/RisingV.Core.Extensions.html",
    "title": "Namespace RisingV.Core.Extensions | RisingV.Core",
    "summary": "Namespace RisingV.Core.Extensions Classes EntityExtensions Provides various utility methods for working with entities in the RisingV game. EntityManagerExtensions PrefabGuidExtensions UserExtensions Provides extension methods for the User class to access player aspects. WorldExtensions Provides extension methods for the Unity.Entities.World class to retrieve managed component data."
  },
  "api/RisingV.Core.Global.html": {
    "href": "api/RisingV.Core.Global.html",
    "title": "Class Global | RisingV.Core",
    "summary": "Class Global Namespace RisingV.Core Assembly RisingV.Core.dll Global access point for core systems and managers. public static class Global Inheritance object Global Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClientGameManager public static ClientGameManager ClientGameManager { get; } Property Value ClientGameManager DatabaseManager public static DatabaseManager DatabaseManager { get; } Property Value DatabaseManager DebugEventsSystem public static DebugEventsSystem DebugEventsSystem { get; } Property Value DebugEventsSystem EngineManager public static EngineManager EngineManager { get; } Property Value EngineManager EntityManager public static EntityManager EntityManager { get; } Property Value EntityManager EventBus public static ManagedEventBus EventBus { get; } Property Value ManagedEventBus GameDataSystem public static GameDataSystem GameDataSystem { get; } Property Value GameDataSystem InternalSystems public static InternalSystems InternalSystems { get; } Property Value InternalSystems PrefabCollectionSystem public static PrefabCollectionSystem PrefabCollectionSystem { get; } Property Value PrefabCollectionSystem PrefabLookupMap public static PrefabLookupMap PrefabLookupMap { get; } Property Value PrefabLookupMap ProcessorManager public static ProcessorManager ProcessorManager { get; } Property Value ProcessorManager ServerGameManager public static ServerGameManager ServerGameManager { get; } Property Value ServerGameManager ServerScriptMapper public static ServerScriptMapper ServerScriptMapper { get; } Property Value ServerScriptMapper SystemManager public static SystemManager SystemManager { get; } Property Value SystemManager World public static World World { get; } Property Value World"
  },
  "api/RisingV.Core.Hooks.AchievementHook.html": {
    "href": "api/RisingV.Core.Hooks.AchievementHook.html",
    "title": "Class AchievementHook | RisingV.Core",
    "summary": "Class AchievementHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll This class hooks into the ClaimAchievementSystem to publish an event when an achievement is claimed. [HarmonyPatch] public static class AchievementHook Inheritance object AchievementHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.AdminAuthSystemHook.html": {
    "href": "api/RisingV.Core.Hooks.AdminAuthSystemHook.html",
    "title": "Class AdminAuthSystemHook | RisingV.Core",
    "summary": "Class AdminAuthSystemHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hook for the ProjectM.AdminAuthSystem to allow custom admin authentication processing. [HarmonyPatch(typeof(AdminAuthSystem), \"IsAdmin\")] public static class AdminAuthSystemHook Inheritance object AdminAuthSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Postfix(ulong, ref bool) public static void Postfix(ulong platformId, ref bool __result) Parameters platformId ulong __result bool"
  },
  "api/RisingV.Core.Hooks.ArmorLevelHook.html": {
    "href": "api/RisingV.Core.Hooks.ArmorLevelHook.html",
    "title": "Class ArmorLevelHook | RisingV.Core",
    "summary": "Class ArmorLevelHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hooks for the armor level system to publish events when armor levels are spawned or destroyed. [HarmonyPatch] public class ArmorLevelHook Inheritance object ArmorLevelHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Hooks.BuffHook.BuffDebugSystemPatch.html": {
    "href": "api/RisingV.Core.Hooks.BuffHook.BuffDebugSystemPatch.html",
    "title": "Class BuffHook.BuffDebugSystemPatch | RisingV.Core",
    "summary": "Class BuffHook.BuffDebugSystemPatch Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll [HarmonyPatch] public static class BuffHook.BuffDebugSystemPatch Inheritance object BuffHook.BuffDebugSystemPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.BuffHook.ModifyUnitStatBuffSystemPatch.html": {
    "href": "api/RisingV.Core.Hooks.BuffHook.ModifyUnitStatBuffSystemPatch.html",
    "title": "Class BuffHook.ModifyUnitStatBuffSystemPatch | RisingV.Core",
    "summary": "Class BuffHook.ModifyUnitStatBuffSystemPatch Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll [HarmonyPatch] public static class BuffHook.ModifyUnitStatBuffSystemPatch Inheritance object BuffHook.ModifyUnitStatBuffSystemPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.BuffHook.html": {
    "href": "api/RisingV.Core.Hooks.BuffHook.html",
    "title": "Class BuffHook | RisingV.Core",
    "summary": "Class BuffHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll BuffHook is responsible for hooking into the buff systems to publish events [HarmonyPatch] public static class BuffHook Inheritance object BuffHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.ClientChatHook.html": {
    "href": "api/RisingV.Core.Hooks.ClientChatHook.html",
    "title": "Class ClientChatHook | RisingV.Core",
    "summary": "Class ClientChatHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hook into the client chat system to monitor and handle chat messages. [HarmonyPatch] public static class ClientChatHook Inheritance object ClientChatHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LocalCharacter public static Entity LocalCharacter Field Value Entity LocalSteamId public static ulong LocalSteamId Field Value ulong LocalUser public static Entity LocalUser Field Value Entity"
  },
  "api/RisingV.Core.Hooks.DownedHook.html": {
    "href": "api/RisingV.Core.Hooks.DownedHook.html",
    "title": "Class DownedHook | RisingV.Core",
    "summary": "Class DownedHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hook for the DownedEventSystem to process downed events. [HarmonyPatch] public class DownedHook Inheritance object DownedHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods DownedEventSystemOnUpdate_Postfix(DownedEventSystem) [HarmonyPatch(typeof(DownedEventSystem), \"OnUpdate\")] [HarmonyPostfix] public static void DownedEventSystemOnUpdate_Postfix(DownedEventSystem __instance) Parameters __instance DownedEventSystem DownedEventSystemOnUpdate_Prefix(DownedEventSystem) [HarmonyPatch(typeof(DownedEventSystem), \"OnUpdate\")] [HarmonyPrefix] public static void DownedEventSystemOnUpdate_Prefix(DownedEventSystem __instance) Parameters __instance DownedEventSystem"
  },
  "api/RisingV.Core.Hooks.EquipmentHooks.html": {
    "href": "api/RisingV.Core.Hooks.EquipmentHooks.html",
    "title": "Class EquipmentHooks | RisingV.Core",
    "summary": "Class EquipmentHooks Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hooks for equipment-related systems in the game. [HarmonyPatch] public static class EquipmentHooks Inheritance object EquipmentHooks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.GameplayInputSystemHook.html": {
    "href": "api/RisingV.Core.Hooks.GameplayInputSystemHook.html",
    "title": "Class GameplayInputSystemHook | RisingV.Core",
    "summary": "Class GameplayInputSystemHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hooks for the ProjectM.GameplayInputSystem class. [HarmonyPatch] public class GameplayInputSystemHook Inheritance object GameplayInputSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Hooks.Internal.ClientBootstrapSystemHook.html": {
    "href": "api/RisingV.Core.Hooks.Internal.ClientBootstrapSystemHook.html",
    "title": "Class ClientBootstrapSystemHook | RisingV.Core",
    "summary": "Class ClientBootstrapSystemHook Namespace RisingV.Core.Hooks.Internal Assembly RisingV.Core.dll ClientBootstrapSystemHook is a Harmony patch for the ClientBootstrapSystem. public class ClientBootstrapSystemHook Inheritance object ClientBootstrapSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Hooks.Internal.GameManagerHook.html": {
    "href": "api/RisingV.Core.Hooks.Internal.GameManagerHook.html",
    "title": "Class GameManagerHook | RisingV.Core",
    "summary": "Class GameManagerHook Namespace RisingV.Core.Hooks.Internal Assembly RisingV.Core.dll GameManagerHook is responsible for hooking into the game data manager's update method public static class GameManagerHook Inheritance object GameManagerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.Internal.html": {
    "href": "api/RisingV.Core.Hooks.Internal.html",
    "title": "Namespace RisingV.Core.Hooks.Internal | RisingV.Core",
    "summary": "Namespace RisingV.Core.Hooks.Internal Classes ClientBootstrapSystemHook ClientBootstrapSystemHook is a Harmony patch for the ClientBootstrapSystem. GameManagerHook GameManagerHook is responsible for hooking into the game data manager's update method"
  },
  "api/RisingV.Core.Hooks.SaveSystemHook.html": {
    "href": "api/RisingV.Core.Hooks.SaveSystemHook.html",
    "title": "Class SaveSystemHook | RisingV.Core",
    "summary": "Class SaveSystemHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Patch for the TriggerPersistenceSaveSystem to hook into the TriggerSave method. [HarmonyPatch] public static class SaveSystemHook Inheritance object SaveSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Postfix(TriggerPersistenceSaveSystem, SaveReason, FixedString128Bytes, ServerRuntimeSettings) [HarmonyPatch(typeof(TriggerPersistenceSaveSystem), \"TriggerSave\")] [HarmonyPostfix] public static void Postfix(TriggerPersistenceSaveSystem __instance, SaveReason reason, FixedString128Bytes saveName, ServerRuntimeSettings saveConfig) Parameters __instance TriggerPersistenceSaveSystem reason SaveReason saveName FixedString128Bytes saveConfig ServerRuntimeSettings"
  },
  "api/RisingV.Core.Hooks.Server.GameBootstrapHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.GameBootstrapHook.html",
    "title": "Class GameBootstrapHook | RisingV.Core",
    "summary": "Class GameBootstrapHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hooks for the ProjectM.GameBootstrap class. [HarmonyPatch] public static class GameBootstrapHook Inheritance object GameBootstrapHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GameBootstrapQuit_Postfix() [HarmonyPatch(typeof(GameBootstrap), \"OnApplicationQuit\")] [HarmonyPostfix] public static void GameBootstrapQuit_Postfix() GameBootstrapStart_Postfix() [HarmonyPatch(typeof(GameBootstrap), \"Start\")] [HarmonyPostfix] public static void GameBootstrapStart_Postfix()"
  },
  "api/RisingV.Core.Hooks.Server.KickBanSystemServerHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.KickBanSystemServerHook.html",
    "title": "Class KickBanSystemServerHook | RisingV.Core",
    "summary": "Class KickBanSystemServerHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hook for the KickBanSystem_Server to process ban checks. [HarmonyPatch(typeof(KickBanSystem_Server), \"IsBanned\")] public class KickBanSystemServerHook Inheritance object KickBanSystemServerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Postfix(ulong, ref bool) public static void Postfix(ulong platformId, ref bool __result) Parameters platformId ulong __result bool"
  },
  "api/RisingV.Core.Hooks.Server.LoadPersistenceSystemHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.LoadPersistenceSystemHook.html",
    "title": "Class LoadPersistenceSystemHook | RisingV.Core",
    "summary": "Class LoadPersistenceSystemHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hook for the LoadPersistenceSystemV2 to publish events during the loading process. [HarmonyPatch] public static class LoadPersistenceSystemHook Inheritance object LoadPersistenceSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetLoadState_Postfix(State, LoadPersistenceSystemV2) [HarmonyPatch(typeof(LoadPersistenceSystemV2), \"SetLoadState\")] [HarmonyPostfix] public static void SetLoadState_Postfix(ServerStartupState.State loadState, LoadPersistenceSystemV2 __instance) Parameters loadState ServerStartupState.State __instance LoadPersistenceSystemV2"
  },
  "api/RisingV.Core.Hooks.Server.OnUserConnectedHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.OnUserConnectedHook.html",
    "title": "Class OnUserConnectedHook | RisingV.Core",
    "summary": "Class OnUserConnectedHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Patch for handling user connection events in the server. [HarmonyPatch] public static class OnUserConnectedHook Inheritance object OnUserConnectedHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnUserConnected_Postfix(ServerBootstrapSystem, NetConnectionId) [HarmonyPatch(typeof(ServerBootstrapSystem), \"OnUserConnected\")] [HarmonyPostfix] public static void OnUserConnected_Postfix(ServerBootstrapSystem __instance, NetConnectionId netConnectionId) Parameters __instance ServerBootstrapSystem netConnectionId NetConnectionId"
  },
  "api/RisingV.Core.Hooks.Server.OnUserDisconnectedHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.OnUserDisconnectedHook.html",
    "title": "Class OnUserDisconnectedHook | RisingV.Core",
    "summary": "Class OnUserDisconnectedHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hook for handling user disconnections from the server. [HarmonyPatch] public static class OnUserDisconnectedHook Inheritance object OnUserDisconnectedHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.Server.ScriptDestroyServerHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.ScriptDestroyServerHook.html",
    "title": "Class ScriptDestroyServerHook | RisingV.Core",
    "summary": "Class ScriptDestroyServerHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hook for the ProjectM.Shared.Systems.ScriptDestroyServer to integrate with the ScriptDespawnProcessor. [HarmonyPatch] public class ScriptDestroyServerHook Inheritance object ScriptDestroyServerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ScriptDespawnProcessor public static LazyRetry<ScriptDespawnProcessor?> ScriptDespawnProcessor { get; } Property Value LazyRetry<ScriptDespawnProcessor>"
  },
  "api/RisingV.Core.Hooks.Server.ScriptSpawnServerHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.ScriptSpawnServerHook.html",
    "title": "Class ScriptSpawnServerHook | RisingV.Core",
    "summary": "Class ScriptSpawnServerHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hook for the ScriptSpawnServer to allow pre- and post-processing of script spawn data. [HarmonyPatch] public class ScriptSpawnServerHook Inheritance object ScriptSpawnServerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ScriptSpawnProcessor public static LazyRetry<ScriptSpawnProcessor?> ScriptSpawnProcessor { get; } Property Value LazyRetry<ScriptSpawnProcessor>"
  },
  "api/RisingV.Core.Hooks.Server.ServerBuffHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.ServerBuffHook.html",
    "title": "Class ServerBuffHook | RisingV.Core",
    "summary": "Class ServerBuffHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Hook for the server buff system to publish events when buffs are spawned. [HarmonyPatch] public static class ServerBuffHook Inheritance object ServerBuffHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.Server.SettingsManagerHook.html": {
    "href": "api/RisingV.Core.Hooks.Server.SettingsManagerHook.html",
    "title": "Class SettingsManagerHook | RisingV.Core",
    "summary": "Class SettingsManagerHook Namespace RisingV.Core.Hooks.Server Assembly RisingV.Core.dll Patch for the SettingsManager to hook into the VerifyServerGameSettings method. [HarmonyPatch] public class SettingsManagerHook Inheritance object SettingsManagerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods VerifyServerGameSettings_Postfix() [HarmonyPatch(typeof(SettingsManager), \"VerifyServerGameSettings\")] [HarmonyPostfix] public static void VerifyServerGameSettings_Postfix()"
  },
  "api/RisingV.Core.Hooks.Server.html": {
    "href": "api/RisingV.Core.Hooks.Server.html",
    "title": "Namespace RisingV.Core.Hooks.Server | RisingV.Core",
    "summary": "Namespace RisingV.Core.Hooks.Server Classes GameBootstrapHook Hooks for the ProjectM.GameBootstrap class. KickBanSystemServerHook Hook for the KickBanSystem_Server to process ban checks. LoadPersistenceSystemHook Hook for the LoadPersistenceSystemV2 to publish events during the loading process. OnUserConnectedHook Patch for handling user connection events in the server. OnUserDisconnectedHook Hook for handling user disconnections from the server. ScriptDestroyServerHook Hook for the ProjectM.Shared.Systems.ScriptDestroyServer to integrate with the ScriptDespawnProcessor. ScriptSpawnServerHook Hook for the ScriptSpawnServer to allow pre- and post-processing of script spawn data. ServerBuffHook Hook for the server buff system to publish events when buffs are spawned. SettingsManagerHook Patch for the SettingsManager to hook into the VerifyServerGameSettings method."
  },
  "api/RisingV.Core.Hooks.ServerChatHook.html": {
    "href": "api/RisingV.Core.Hooks.ServerChatHook.html",
    "title": "Class ServerChatHook | RisingV.Core",
    "summary": "Class ServerChatHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Patch for the ChatMessageSystem to hook into the OnUpdate method. [HarmonyPatch] public static class ServerChatHook Inheritance object ServerChatHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Core.Hooks.StatChangeSystemHook.html": {
    "href": "api/RisingV.Core.Hooks.StatChangeSystemHook.html",
    "title": "Class StatChangeSystemHook | RisingV.Core",
    "summary": "Class StatChangeSystemHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Patch for the StatChangeSystem to hook into the ApplyStatChanges method. [HarmonyPatch] public class StatChangeSystemHook Inheritance object StatChangeSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Hooks.UnitSpawnerHook.html": {
    "href": "api/RisingV.Core.Hooks.UnitSpawnerHook.html",
    "title": "Class UnitSpawnerHook | RisingV.Core",
    "summary": "Class UnitSpawnerHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Patch for the UnitSpawnerReactSystem and MinionSpawnSystem to hook into the spawn processing. [HarmonyPatch] public static class UnitSpawnerHook Inheritance object UnitSpawnerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SpawnProcessor public static LazyRetry<SpawnProcessor?> SpawnProcessor { get; } Property Value LazyRetry<SpawnProcessor> Methods MinionSpawnSystem_OnUpdate_Prefix(MinionSpawnSystem) [HarmonyPatch(typeof(MinionSpawnSystem), \"OnUpdate\")] [HarmonyPrefix] public static void MinionSpawnSystem_OnUpdate_Prefix(MinionSpawnSystem __instance) Parameters __instance MinionSpawnSystem UnitSpawnerReactSystem_OnUpdate_Postfix(Dictionary<Entity, (int, int)>) [HarmonyPatch(typeof(UnitSpawnerReactSystem), \"OnUpdate\")] [HarmonyPostfix] public static void UnitSpawnerReactSystem_OnUpdate_Postfix(Dictionary<Entity, (int, int)> __state) Parameters __state Dictionary<Entity, (int, int)> UnitSpawnerReactSystem_OnUpdate_Prefix(UnitSpawnerReactSystem, out Dictionary<Entity, (int, int)>) [HarmonyPatch(typeof(UnitSpawnerReactSystem), \"OnUpdate\")] [HarmonyPrefix] public static void UnitSpawnerReactSystem_OnUpdate_Prefix(UnitSpawnerReactSystem __instance, out Dictionary<Entity, (int, int)> __state) Parameters __instance UnitSpawnerReactSystem __state Dictionary<Entity, (int, int)>"
  },
  "api/RisingV.Core.Hooks.WeaponLevelHook.html": {
    "href": "api/RisingV.Core.Hooks.WeaponLevelHook.html",
    "title": "Class WeaponLevelHook | RisingV.Core",
    "summary": "Class WeaponLevelHook Namespace RisingV.Core.Hooks Assembly RisingV.Core.dll Hooks for the weapon level system to publish events when weapon levels are spawned or destroyed. [HarmonyPatch] public class WeaponLevelHook Inheritance object WeaponLevelHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Hooks.html": {
    "href": "api/RisingV.Core.Hooks.html",
    "title": "Namespace RisingV.Core.Hooks | RisingV.Core",
    "summary": "Namespace RisingV.Core.Hooks Classes AchievementHook This class hooks into the ClaimAchievementSystem to publish an event when an achievement is claimed. AdminAuthSystemHook Hook for the ProjectM.AdminAuthSystem to allow custom admin authentication processing. ArmorLevelHook Hooks for the armor level system to publish events when armor levels are spawned or destroyed. BuffHook BuffHook is responsible for hooking into the buff systems to publish events BuffHook.BuffDebugSystemPatch BuffHook.ModifyUnitStatBuffSystemPatch ClientChatHook Hook into the client chat system to monitor and handle chat messages. DownedHook Hook for the DownedEventSystem to process downed events. EquipmentHooks Hooks for equipment-related systems in the game. GameplayInputSystemHook Hooks for the ProjectM.GameplayInputSystem class. SaveSystemHook Patch for the TriggerPersistenceSaveSystem to hook into the TriggerSave method. ServerChatHook Patch for the ChatMessageSystem to hook into the OnUpdate method. StatChangeSystemHook Patch for the StatChangeSystem to hook into the ApplyStatChanges method. UnitSpawnerHook Patch for the UnitSpawnerReactSystem and MinionSpawnSystem to hook into the spawn processing. WeaponLevelHook Hooks for the weapon level system to publish events when weapon levels are spawned or destroyed."
  },
  "api/RisingV.Core.Items.Drops.IHasItemDrops-1.html": {
    "href": "api/RisingV.Core.Items.Drops.IHasItemDrops-1.html",
    "title": "Interface IHasItemDrops<T> | RisingV.Core",
    "summary": "Interface IHasItemDrops<T> Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Interface for entities that can have item drops. public interface IHasItemDrops<T> where T : IItem, IItemDroppable Type Parameters T Type of item that can be dropped, must implement IItem and IItemDroppable. Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ItemDrops Gets or sets the list of item drops for this entity. List<T> ItemDrops { get; set; } Property Value List<T> LootCompletionMode Gets or sets the loot completion mode for this entity. LootCompletionMode LootCompletionMode { get; set; } Property Value LootCompletionMode LootRollMode Gets or sets the loot roll mode for this entity. LootRollMode LootRollMode { get; set; } Property Value LootRollMode LootSelectionMode Gets or sets the loot selection mode for this entity. LootSelectionMode LootSelectionMode { get; set; } Property Value LootSelectionMode LootShuffleMode Gets or sets the loot shuffle mode for this entity. LootShuffleMode LootShuffleMode { get; set; } Property Value LootShuffleMode"
  },
  "api/RisingV.Core.Items.Drops.IItemDrop.html": {
    "href": "api/RisingV.Core.Items.Drops.IItemDrop.html",
    "title": "Interface IItemDrop | RisingV.Core",
    "summary": "Interface IItemDrop Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Interface for item drops in the game. public interface IItemDrop : IItem Inherited Members IItem.ItemId IItem.Name Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Count Gets or sets the count of items in the drop. int Count { get; set; } Property Value int Dropped Gets or sets a value indicating whether the item has been dropped. bool Dropped { get; set; } Property Value bool"
  },
  "api/RisingV.Core.Items.Drops.IItemDroppable.html": {
    "href": "api/RisingV.Core.Items.Drops.IItemDroppable.html",
    "title": "Interface IItemDroppable | RisingV.Core",
    "summary": "Interface IItemDroppable Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Interface for items that can be dropped from entities. public interface IItemDroppable Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Amount Gets or sets the amount of items to drop. RangeInt? Amount { get; set; } Property Value RangeInt Chance Gets or sets the chance of dropping the item. float Chance { get; set; } Property Value float IsPool Gets a value indicating whether this item droppable is a pool of items. bool IsPool { get; } Property Value bool IsTemplate Gets or sets the item template for the item drop. bool IsTemplate { get; } Property Value bool ItemPool Gets or sets the item pool from which items can be dropped. IEnumerable<IItemDroppable> ItemPool { get; set; } Property Value IEnumerable<IItemDroppable> PoolCompletionMode Gets or sets the completion mode for the item pool. LootCompletionMode PoolCompletionMode { get; set; } Property Value LootCompletionMode PoolRollMode Gets or sets the loot roll mode for the item pool. LootRollMode PoolRollMode { get; set; } Property Value LootRollMode PoolSelectionMode Gets or sets the selection mode for the item pool. LootSelectionMode PoolSelectionMode { get; set; } Property Value LootSelectionMode PoolShuffleMode Gets or sets the shuffle mode for the item pool. LootShuffleMode PoolShuffleMode { get; set; } Property Value LootShuffleMode Template Gets or sets the template for the item drop. string? Template { get; set; } Property Value string"
  },
  "api/RisingV.Core.Items.Drops.ItemDrop.html": {
    "href": "api/RisingV.Core.Items.Drops.ItemDrop.html",
    "title": "Class ItemDrop | RisingV.Core",
    "summary": "Class ItemDrop Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Represents an item drop in the game. public class ItemDrop : IItemDrop, IItem Inheritance object ItemDrop Implements IItemDrop IItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDrop(IItem, int) public ItemDrop(IItem item, int count = 1) Parameters item IItem count int ItemDrop(string, int, int) Represents an item drop in the game. public ItemDrop(string name, int itemId, int count) Parameters name string Name of the item. itemId int Item ID of the item. count int Number of items in the drop. Properties Count Number of items being dropped. Defaults to 1. public int Count { get; set; } Property Value int Dropped Indicates whether the item drop has been dropped or not. public bool Dropped { get; set; } Property Value bool ItemId Item ID of the item being dropped. public int ItemId { get; set; } Property Value int Name Name of the item being dropped. public string Name { get; set; } Property Value string"
  },
  "api/RisingV.Core.Items.Drops.ItemDropData.html": {
    "href": "api/RisingV.Core.Items.Drops.ItemDropData.html",
    "title": "Class ItemDropData | RisingV.Core",
    "summary": "Class ItemDropData Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Represents data for an item drop in the game. public class ItemDropData : IItem, IItemDroppable, IData Inheritance object ItemDropData Implements IItem IItemDroppable IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDropData() public ItemDropData() ItemDropData(ItemDropData) public ItemDropData(ItemDropData itemDropData) Parameters itemDropData ItemDropData ItemDropData(int, string, RangeInt, float, float, float) public ItemDropData(int itemId, string name, RangeInt amount, float chance, float chanceScaling = 1, float amountScaling = 1) Parameters itemId int name string amount RangeInt chance float chanceScaling float amountScaling float Properties Amount Gets or sets the amount of items to drop. public RangeInt? Amount { get; set; } Property Value RangeInt AmountScaling public float AmountScaling { get; set; } Property Value float Chance Gets or sets the chance of dropping the item. public float Chance { get; set; } Property Value float ChanceScaling public float ChanceScaling { get; set; } Property Value float IsPool Gets a value indicating whether this item droppable is a pool of items. [JsonIgnore] public bool IsPool { get; } Property Value bool IsTemplate Gets or sets the item template for the item drop. [JsonIgnore] public bool IsTemplate { get; } Property Value bool ItemId Gets or sets the unique identifier for the item. public int ItemId { get; set; } Property Value int ItemPool public List<ItemDropData> ItemPool { get; set; } Property Value List<ItemDropData> Name Gets or sets the name of the item. public string Name { get; set; } Property Value string PoolCompletionMode Gets or sets the completion mode for the item pool. public LootCompletionMode PoolCompletionMode { get; set; } Property Value LootCompletionMode PoolRollMode Gets or sets the loot roll mode for the item pool. public LootRollMode PoolRollMode { get; set; } Property Value LootRollMode PoolSelectionMode Gets or sets the selection mode for the item pool. public LootSelectionMode PoolSelectionMode { get; set; } Property Value LootSelectionMode PoolShuffleMode Gets or sets the shuffle mode for the item pool. public LootShuffleMode PoolShuffleMode { get; set; } Property Value LootShuffleMode Template Gets or sets the template for the item drop. public string? Template { get; set; } Property Value string TemplateLoaded [JsonIgnore] public bool TemplateLoaded { get; set; } Property Value bool Methods Merge(ItemDropData) Merges the properties of another ItemDropData instance into this instance. public void Merge(ItemDropData from) Parameters from ItemDropData The ItemDropData instance to merge from. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Core.Items.Drops.ItemDropPoolDataLoader.html": {
    "href": "api/RisingV.Core.Items.Drops.ItemDropPoolDataLoader.html",
    "title": "Class ItemDropPoolDataLoader | RisingV.Core",
    "summary": "Class ItemDropPoolDataLoader Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Data loader for item drop pool data. public class ItemDropPoolDataLoader : JsonDataLoader<string, ItemDropData>, IDataStreamLoader<string, ItemDropData>, IDataLoader<string, ItemDropData, Stream>, IDataLoader<string, ItemDropData>, IDataLoader Inheritance object JsonDataLoader<string, ItemDropData> ItemDropPoolDataLoader Implements IDataStreamLoader<string, ItemDropData> IDataLoader<string, ItemDropData, Stream> IDataLoader<string, ItemDropData> IDataLoader Inherited Members JsonDataLoader<string, ItemDropData>.Load<TSource>(TSource, Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Items.Drops.ItemDropPoolDataSource.html": {
    "href": "api/RisingV.Core.Items.Drops.ItemDropPoolDataSource.html",
    "title": "Class ItemDropPoolDataSource | RisingV.Core",
    "summary": "Class ItemDropPoolDataSource Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Data source for item drop pool data. public class ItemDropPoolDataSource : FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>, IDataSource<string, ItemDropData, ItemDropPoolDataLoader>, IDataSource<string, ItemDropData>, IDataSource, IDataCrud, IDataCrud<string, ItemDropData> Inheritance object DataSource<string, ItemDropData, ItemDropPoolDataLoader> MapDataSource<string, ItemDropData, ItemDropPoolDataLoader> FileDataSource<string, ItemDropData, ItemDropPoolDataLoader> ItemDropPoolDataSource Implements IDataSource<string, ItemDropData, ItemDropPoolDataLoader> IDataSource<string, ItemDropData> IDataSource IDataCrud IDataCrud<string, ItemDropData> Inherited Members FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Extension FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.FileName FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.FilePath FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.AutoCreateFile FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.IgnoreMissingFile FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.GetFullFilePath() FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Verify(IDatabase<string, ItemDropData>) FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Initialize(IDatabase<string, ItemDropData>) FileDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Load(IDatabase<string, ItemDropData>, ItemDropPoolDataLoader) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Log MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.KeyResolver MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Ready(IDatabase<string, ItemDropData>) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Unload(IDatabase<string, ItemDropData>) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Terminate(IDatabase<string, ItemDropData>) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Clear() MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Count() MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Get(string) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.TryGet(string) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.GetAll() MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.ForEach(Action<string, ItemDropData>) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Add(string, ItemDropData) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Remove(string) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.Equals(object) MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.GetHashCode() MapDataSource<string, ItemDropData, ItemDropPoolDataLoader>.ToString() DataSource<string, ItemDropData, ItemDropPoolDataLoader>.IsInitialized DataSource<string, ItemDropData, ItemDropPoolDataLoader>.IsLoaded DataSource<string, ItemDropData, ItemDropPoolDataLoader>.IsEmpty() DataSource<string, ItemDropData, ItemDropPoolDataLoader>.Add(ItemDropData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDropPoolDataSource(string) Data source for item drop pool data. public ItemDropPoolDataSource(string filePath) Parameters filePath string The file path where the item drop templates are stored. Properties IgnoreMissingFile public override bool IgnoreMissingFile { get; } Property Value bool KeyResolver Key resolver function to resolve keys from data items. public override Func<ItemDropData, string>? KeyResolver { get; set; } Property Value Func<ItemDropData, string>"
  },
  "api/RisingV.Core.Items.Drops.ItemDropTemplateDatabase.html": {
    "href": "api/RisingV.Core.Items.Drops.ItemDropTemplateDatabase.html",
    "title": "Class ItemDropTemplateDatabase | RisingV.Core",
    "summary": "Class ItemDropTemplateDatabase Namespace RisingV.Core.Items.Drops Assembly RisingV.Core.dll Database for item drop templates. public class ItemDropTemplateDatabase : Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>, IDatabase<string, ItemDropData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<string, ItemDropData> Inheritance object Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader> ItemDropTemplateDatabase Implements IDatabase<string, ItemDropData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<string, ItemDropData> Inherited Members Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Log Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Name Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.IsInitialized Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.IsLoaded Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.DataSource Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.DataLoader Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.VerifySource() Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Initialize(DatabaseManager, List<IPlugin>) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Terminate(DatabaseManager, List<IPlugin>) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Load(DatabaseManager, List<IPlugin>) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Ready(DatabaseManager, List<IPlugin>) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Reload(DatabaseManager) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Unload(DatabaseManager) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Unload(DatabaseManager, List<IPlugin>) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Clear(DatabaseManager) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Clear() Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Count() Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Get(string) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.TryGet(string) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.GetAll() Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.ForEach(Action<string, ItemDropData>) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Add(string, ItemDropData) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Add(ItemDropData) Database<string, ItemDropData, ItemDropPoolDataSource, ItemDropPoolDataLoader>.Remove(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDropTemplateDatabase(string) Database for item drop templates. public ItemDropTemplateDatabase(string filePath) Parameters filePath string The file path where the item drop templates are stored. Properties Log protected override Logger Log { get; } Property Value Logger Methods Initialize(DatabaseManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public override void Initialize(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Items.Drops.html": {
    "href": "api/RisingV.Core.Items.Drops.html",
    "title": "Namespace RisingV.Core.Items.Drops | RisingV.Core",
    "summary": "Namespace RisingV.Core.Items.Drops Classes ItemDrop Represents an item drop in the game. ItemDropData Represents data for an item drop in the game. ItemDropPoolDataLoader Data loader for item drop pool data. ItemDropPoolDataSource Data source for item drop pool data. ItemDropTemplateDatabase Database for item drop templates. Interfaces IHasItemDrops<T> Interface for entities that can have item drops. IItemDrop Interface for item drops in the game. IItemDroppable Interface for items that can be dropped from entities."
  },
  "api/RisingV.Core.Items.IItem.html": {
    "href": "api/RisingV.Core.Items.IItem.html",
    "title": "Interface IItem | RisingV.Core",
    "summary": "Interface IItem Namespace RisingV.Core.Items Assembly RisingV.Core.dll Represents an item in the game. public interface IItem Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ItemId Gets or sets the unique identifier for the item. int ItemId { get; } Property Value int Name Gets or sets the name of the item. string Name { get; } Property Value string"
  },
  "api/RisingV.Core.Items.ItemData.html": {
    "href": "api/RisingV.Core.Items.ItemData.html",
    "title": "Class ItemData | RisingV.Core",
    "summary": "Class ItemData Namespace RisingV.Core.Items Assembly RisingV.Core.dll Base class for item data. public abstract class ItemData : IItem, IData Inheritance object ItemData Implements IItem IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemData(int, string) Base class for item data. protected ItemData(int itemId, string name) Parameters itemId int Item identifier. name string Item name. Properties ItemId public int ItemId { get; } Property Value int Name public string Name { get; } Property Value string"
  },
  "api/RisingV.Core.Items.ItemDataLoader-1.html": {
    "href": "api/RisingV.Core.Items.ItemDataLoader-1.html",
    "title": "Class ItemDataLoader<TItemData> | RisingV.Core",
    "summary": "Class ItemDataLoader<TItemData> Namespace RisingV.Core.Items Assembly RisingV.Core.dll ItemDataLoader is a generic data loader for item data. public class ItemDataLoader<TItemData> : JsonDataLoader<int, TItemData>, IDataStreamLoader<int, TItemData>, IDataLoader<int, TItemData, Stream>, IDataLoader<int, TItemData>, IDataLoader where TItemData : ItemData Type Parameters TItemData The type of item data to load. Inheritance object JsonDataLoader<int, TItemData> ItemDataLoader<TItemData> Implements IDataStreamLoader<int, TItemData> IDataLoader<int, TItemData, Stream> IDataLoader<int, TItemData> IDataLoader Derived ItemDataLoader Inherited Members JsonDataLoader<int, TItemData>.Load<TSource>(TSource, Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Items.ItemDataLoader.html": {
    "href": "api/RisingV.Core.Items.ItemDataLoader.html",
    "title": "Class ItemDataLoader | RisingV.Core",
    "summary": "Class ItemDataLoader Namespace RisingV.Core.Items Assembly RisingV.Core.dll ItemDataLoader is a default data loader for item data. public class ItemDataLoader : ItemDataLoader<ItemData>, IDataStreamLoader<int, ItemData>, IDataLoader<int, ItemData, Stream>, IDataLoader<int, ItemData>, IDataLoader Inheritance object JsonDataLoader<int, ItemData> ItemDataLoader<ItemData> ItemDataLoader Implements IDataStreamLoader<int, ItemData> IDataLoader<int, ItemData, Stream> IDataLoader<int, ItemData> IDataLoader Inherited Members JsonDataLoader<int, ItemData>.Load<TSource>(TSource, Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Items.ItemDataSource-1.html": {
    "href": "api/RisingV.Core.Items.ItemDataSource-1.html",
    "title": "Class ItemDataSource<TItemData> | RisingV.Core",
    "summary": "Class ItemDataSource<TItemData> Namespace RisingV.Core.Items Assembly RisingV.Core.dll ItemDataSource is a data source for item data. public class ItemDataSource<TItemData> : FileDataSource<int, TItemData, ItemDataLoader<TItemData>>, IDataSource<int, TItemData, ItemDataLoader<TItemData>>, IDataSource<int, TItemData>, IDataSource, IDataCrud, IDataCrud<int, TItemData> where TItemData : ItemData Type Parameters TItemData The type of item data to load. Must inherit from ItemData. Inheritance object DataSource<int, TItemData, ItemDataLoader<TItemData>> MapDataSource<int, TItemData, ItemDataLoader<TItemData>> FileDataSource<int, TItemData, ItemDataLoader<TItemData>> ItemDataSource<TItemData> Implements IDataSource<int, TItemData, ItemDataLoader<TItemData>> IDataSource<int, TItemData> IDataSource IDataCrud IDataCrud<int, TItemData> Derived ItemDataSource Inherited Members FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.Extension FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.FileName FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.FilePath FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.AutoCreateFile FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.IgnoreMissingFile FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.GetFullFilePath() FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.Verify(IDatabase<int, TItemData>) FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.Initialize(IDatabase<int, TItemData>) FileDataSource<int, TItemData, ItemDataLoader<TItemData>>.Load(IDatabase<int, TItemData>, ItemDataLoader<TItemData>) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Log MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.KeyResolver MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Ready(IDatabase<int, TItemData>) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Unload(IDatabase<int, TItemData>) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Terminate(IDatabase<int, TItemData>) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Clear() MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Count() MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Get(int) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.TryGet(int) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.GetAll() MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.ForEach(Action<int, TItemData>) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Add(int, TItemData) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Remove(int) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.Equals(object) MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.GetHashCode() MapDataSource<int, TItemData, ItemDataLoader<TItemData>>.ToString() DataSource<int, TItemData, ItemDataLoader<TItemData>>.IsInitialized DataSource<int, TItemData, ItemDataLoader<TItemData>>.IsLoaded DataSource<int, TItemData, ItemDataLoader<TItemData>>.IsEmpty() DataSource<int, TItemData, ItemDataLoader<TItemData>>.Add(TItemData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDataSource(string, bool, string?, string?, bool) ItemDataSource is a data source for item data. public ItemDataSource(string filePath, bool preloadInternalItems = false, string? fileName = \"CustomItems\", string? extension = \"json\", bool autoCreateFile = true) Parameters filePath string The file path where item data is stored. preloadInternalItems bool Whether to preload internal items. fileName string The name of the file where item data is stored. extension string The file extension for item data files. autoCreateFile bool Whether to automatically create the file if it does not exist. Properties KeyResolver Key resolver function to resolve keys from data items. public override Func<TItemData, int>? KeyResolver { get; set; } Property Value Func<TItemData, int> Log protected override Logger Log { get; } Property Value Logger PreloadInternalItems Whether to preload internal items from the enum RisingV.Shared.Prefabs.Item. public bool PreloadInternalItems { get; } Property Value bool Methods CreateItemData(int, string) Creates a new instance of TItemData with the specified item ID and name. protected TItemData CreateItemData(int itemId, string name) Parameters itemId int The item ID to assign to the new item data. name string The name to assign to the new item data. Returns TItemData Returns a new instance of TItemData with the specified item ID and name. Exceptions DatabaseException Thrown if the item data instance cannot be created. Get(int) public override TItemData Get(int key) Parameters key int Returns TItemData Initialize(IDatabase<int, TItemData>) public override void Initialize(IDatabase<int, TItemData> database) Parameters database IDatabase<int, TItemData>"
  },
  "api/RisingV.Core.Items.ItemDataSource.html": {
    "href": "api/RisingV.Core.Items.ItemDataSource.html",
    "title": "Class ItemDataSource | RisingV.Core",
    "summary": "Class ItemDataSource Namespace RisingV.Core.Items Assembly RisingV.Core.dll ItemDataSource is a default data source for item data. public class ItemDataSource : ItemDataSource<ItemData>, IDataSource<int, ItemData, ItemDataLoader<ItemData>>, IDataSource<int, ItemData>, IDataSource, IDataCrud, IDataCrud<int, ItemData> Inheritance object DataSource<int, ItemData, ItemDataLoader<ItemData>> MapDataSource<int, ItemData, ItemDataLoader<ItemData>> FileDataSource<int, ItemData, ItemDataLoader<ItemData>> ItemDataSource<ItemData> ItemDataSource Implements IDataSource<int, ItemData, ItemDataLoader<ItemData>> IDataSource<int, ItemData> IDataSource IDataCrud IDataCrud<int, ItemData> Inherited Members ItemDataSource<ItemData>.PreloadInternalItems ItemDataSource<ItemData>.KeyResolver ItemDataSource<ItemData>.Initialize(IDatabase<int, ItemData>) ItemDataSource<ItemData>.Get(int) ItemDataSource<ItemData>.CreateItemData(int, string) FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.Extension FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.FileName FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.FilePath FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.AutoCreateFile FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.IgnoreMissingFile FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.GetFullFilePath() FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.Verify(IDatabase<int, ItemData>) FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.Initialize(IDatabase<int, ItemData>) FileDataSource<int, ItemData, ItemDataLoader<ItemData>>.Load(IDatabase<int, ItemData>, ItemDataLoader<ItemData>) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Log MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.KeyResolver MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Ready(IDatabase<int, ItemData>) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Unload(IDatabase<int, ItemData>) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Terminate(IDatabase<int, ItemData>) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Clear() MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Count() MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Get(int) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.TryGet(int) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.GetAll() MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.ForEach(Action<int, ItemData>) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Add(int, ItemData) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Remove(int) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.Equals(object) MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.GetHashCode() MapDataSource<int, ItemData, ItemDataLoader<ItemData>>.ToString() DataSource<int, ItemData, ItemDataLoader<ItemData>>.IsInitialized DataSource<int, ItemData, ItemDataLoader<ItemData>>.IsLoaded DataSource<int, ItemData, ItemDataLoader<ItemData>>.IsEmpty() DataSource<int, ItemData, ItemDataLoader<ItemData>>.Add(ItemData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDataSource(string, bool, string?, string?, bool) ItemDataSource is a default data source for item data. public ItemDataSource(string filePath, bool preloadInternalItems = false, string? fileName = \"CustomItems\", string? extension = \"json\", bool autoCreateFile = true) Parameters filePath string The file path where item data is stored. preloadInternalItems bool Whether to preload internal items from the enum RisingV.Shared.Prefabs.Item. fileName string The name of the file where item data is stored. extension string The file extension for item data files. autoCreateFile bool Whether to automatically create the file if it does not exist. Properties Log protected override Logger Log { get; } Property Value Logger"
  },
  "api/RisingV.Core.Items.ItemDatabase-1.html": {
    "href": "api/RisingV.Core.Items.ItemDatabase-1.html",
    "title": "Class ItemDatabase<TItemData> | RisingV.Core",
    "summary": "Class ItemDatabase<TItemData> Namespace RisingV.Core.Items Assembly RisingV.Core.dll ItemDatabase is a database for managing item data. public class ItemDatabase<TItemData> : Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>, IDatabase<int, TItemData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<int, TItemData> where TItemData : ItemData Type Parameters TItemData The type of item data to manage in the database. Must inherit from ItemData. Inheritance object Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>> ItemDatabase<TItemData> Implements IDatabase<int, TItemData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<int, TItemData> Derived ItemDatabase Inherited Members Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Log Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Name Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.IsInitialized Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.IsLoaded Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.DataSource Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.DataLoader Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.VerifySource() Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Initialize(DatabaseManager, List<IPlugin>) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Terminate(DatabaseManager, List<IPlugin>) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Load(DatabaseManager, List<IPlugin>) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Ready(DatabaseManager, List<IPlugin>) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Reload(DatabaseManager) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Unload(DatabaseManager) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Unload(DatabaseManager, List<IPlugin>) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Clear(DatabaseManager) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Clear() Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Count() Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Get(int) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.TryGet(int) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.GetAll() Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.ForEach(Action<int, TItemData>) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Add(int, TItemData) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Add(TItemData) Database<int, TItemData, ItemDataSource<TItemData>, ItemDataLoader<TItemData>>.Remove(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDatabase(string, ItemDataSource<TItemData>, ItemDataLoader<TItemData>) ItemDatabase is a database for managing item data. public ItemDatabase(string name, ItemDataSource<TItemData> itemDataSource, ItemDataLoader<TItemData> itemLoader) Parameters name string The name of the database. itemDataSource ItemDataSource<TItemData> The data source for item data. itemLoader ItemDataLoader<TItemData> The loader for item data. Properties Log protected override Logger Log { get; } Property Value Logger"
  },
  "api/RisingV.Core.Items.ItemDatabase.html": {
    "href": "api/RisingV.Core.Items.ItemDatabase.html",
    "title": "Class ItemDatabase | RisingV.Core",
    "summary": "Class ItemDatabase Namespace RisingV.Core.Items Assembly RisingV.Core.dll ItemDatabase is a default database for managing item data. public class ItemDatabase : ItemDatabase<ItemData>, IDatabase<int, ItemData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<int, ItemData> Inheritance object Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>> ItemDatabase<ItemData> ItemDatabase Implements IDatabase<int, ItemData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<int, ItemData> Inherited Members Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Log Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Name Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.IsInitialized Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.IsLoaded Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.DataSource Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.DataLoader Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.VerifySource() Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Initialize(DatabaseManager, List<IPlugin>) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Terminate(DatabaseManager, List<IPlugin>) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Load(DatabaseManager, List<IPlugin>) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Ready(DatabaseManager, List<IPlugin>) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Reload(DatabaseManager) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Unload(DatabaseManager) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Unload(DatabaseManager, List<IPlugin>) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Clear(DatabaseManager) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Clear() Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Count() Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Get(int) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.TryGet(int) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.GetAll() Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.ForEach(Action<int, ItemData>) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Add(int, ItemData) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Add(ItemData) Database<int, ItemData, ItemDataSource<ItemData>, ItemDataLoader<ItemData>>.Remove(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ItemDatabase(ItemDataSource, ItemDataLoader, string) public ItemDatabase(ItemDataSource itemDataSource, ItemDataLoader loader, string name = \"ItemDatabase\") Parameters itemDataSource ItemDataSource loader ItemDataLoader name string ItemDatabase(ItemDataSource, string) public ItemDatabase(ItemDataSource itemDataSource, string name = \"ItemDatabase\") Parameters itemDataSource ItemDataSource name string Properties Log protected override Logger Log { get; } Property Value Logger"
  },
  "api/RisingV.Core.Items.html": {
    "href": "api/RisingV.Core.Items.html",
    "title": "Namespace RisingV.Core.Items | RisingV.Core",
    "summary": "Namespace RisingV.Core.Items Classes ItemData Base class for item data. ItemDataLoader ItemDataLoader is a default data loader for item data. ItemDataLoader<TItemData> ItemDataLoader is a generic data loader for item data. ItemDataSource ItemDataSource is a default data source for item data. ItemDataSource<TItemData> ItemDataSource is a data source for item data. ItemDatabase ItemDatabase is a default database for managing item data. ItemDatabase<TItemData> ItemDatabase is a database for managing item data. Interfaces IItem Represents an item in the game."
  },
  "api/RisingV.Core.LogTags.html": {
    "href": "api/RisingV.Core.LogTags.html",
    "title": "Class LogTags | RisingV.Core",
    "summary": "Class LogTags Namespace RisingV.Core Assembly RisingV.Core.dll Represents a collection of log tags used throughout the RisingV.Core project. public class LogTags Inheritance object LogTags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Aspects public static readonly LogTag Aspects Field Value LogTag Buffs public static readonly LogTag Buffs Field Value LogTag Commands public static readonly LogTag Commands Field Value LogTag Config public static readonly LogTag Config Field Value LogTag Damage public static readonly LogTag Damage Field Value LogTag Databases public static readonly LogTag Databases Field Value LogTag Death public static readonly LogTag Death Field Value LogTag Engines public static readonly LogTag Engines Field Value LogTag Entities public static readonly LogTag Entities Field Value LogTag Events public static readonly LogTag Events Field Value LogTag Features public static readonly LogTag Features Field Value LogTag Hooks public static readonly LogTag Hooks Field Value LogTag ItemDrops public static readonly LogTag ItemDrops Field Value LogTag Items public static readonly LogTag Items Field Value LogTag Players public static readonly LogTag Players Field Value LogTag Plugins public static readonly LogTag Plugins Field Value LogTag Processors public static readonly LogTag Processors Field Value LogTag Scripting public static readonly LogTag Scripting Field Value LogTag Services public static readonly LogTag Services Field Value LogTag Systems public static readonly LogTag Systems Field Value LogTag Transport public static readonly LogTag Transport Field Value LogTag Utils public static readonly LogTag Utils Field Value LogTag"
  },
  "api/RisingV.Core.Logging.LogTagCore.html": {
    "href": "api/RisingV.Core.Logging.LogTagCore.html",
    "title": "Class LogTagCore | RisingV.Core",
    "summary": "Class LogTagCore Namespace RisingV.Core.Logging Assembly RisingV.Core.dll LogTagCore is a specialized logging tag for the RisingV.Core namespace. public class LogTagCore : LogTag, ILogTag Inheritance object LogTag LogTagCore Implements ILogTag Inherited Members LogTag.Parent LogTag.Space LogTag.Name LogTag.Equals(LogTag) LogTag.Equals(object) LogTag.GetHashCode() LogTag.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors LogTagCore(ILogTag, string) public LogTagCore(ILogTag parent, string name = \"\") Parameters parent ILogTag name string LogTagCore(string) public LogTagCore(string name) Parameters name string"
  },
  "api/RisingV.Core.Logging.html": {
    "href": "api/RisingV.Core.Logging.html",
    "title": "Namespace RisingV.Core.Logging | RisingV.Core",
    "summary": "Namespace RisingV.Core.Logging Classes LogTagCore LogTagCore is a specialized logging tag for the RisingV.Core namespace."
  },
  "api/RisingV.Core.MyPluginInfo.html": {
    "href": "api/RisingV.Core.MyPluginInfo.html",
    "title": "Class MyPluginInfo | RisingV.Core",
    "summary": "Class MyPluginInfo Namespace RisingV.Core Assembly RisingV.Core.dll public static class MyPluginInfo Inheritance object MyPluginInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PLUGIN_GUID public const string PLUGIN_GUID = \"RisingV.Core\" Field Value string PLUGIN_NAME public const string PLUGIN_NAME = \"RisingV.Core\" Field Value string PLUGIN_VERSION public const string PLUGIN_VERSION = \"1.0.0\" Field Value string"
  },
  "api/RisingV.Core.Players.PlayerDatabase.html": {
    "href": "api/RisingV.Core.Players.PlayerDatabase.html",
    "title": "Class PlayerDatabase | RisingV.Core",
    "summary": "Class PlayerDatabase Namespace RisingV.Core.Players Assembly RisingV.Core.dll PlayerDatabase is responsible for managing player data in the game. public class PlayerDatabase : Database<FixedString64Bytes, PlayerAspect>, IDatabase<FixedString64Bytes, PlayerAspect>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<FixedString64Bytes, PlayerAspect> Inheritance object Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>> Database<FixedString64Bytes, PlayerAspect> PlayerDatabase Implements IDatabase<FixedString64Bytes, PlayerAspect> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<FixedString64Bytes, PlayerAspect> Inherited Members Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Log Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Name Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.IsInitialized Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.IsLoaded Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.DataSource Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.DataLoader Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.VerifySource() Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Initialize(DatabaseManager, List<IPlugin>) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Terminate(DatabaseManager, List<IPlugin>) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Load(DatabaseManager, List<IPlugin>) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Ready(DatabaseManager, List<IPlugin>) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Reload(DatabaseManager) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Unload(DatabaseManager) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Unload(DatabaseManager, List<IPlugin>) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Clear(DatabaseManager) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Clear() Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Count() Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Get(FixedString64Bytes) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.TryGet(FixedString64Bytes) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.GetAll() Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.ForEach(Action<FixedString64Bytes, PlayerAspect>) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Add(FixedString64Bytes, PlayerAspect) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Add(PlayerAspect) Database<FixedString64Bytes, PlayerAspect, MapDataSource<FixedString64Bytes, PlayerAspect>, MapDataLoader<FixedString64Bytes, PlayerAspect>>.Remove(FixedString64Bytes) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerDatabase() PlayerDatabase is responsible for managing player data in the game. public PlayerDatabase() Fields NamePlayerCache Cache for player data indexed by character name. public static readonly Map<FixedString64Bytes, PlayerAspect> NamePlayerCache Field Value Map<FixedString64Bytes, PlayerAspect> SteamPlayerCache Cache for player data indexed by Steam ID. public static readonly Map<ulong, PlayerAspect> SteamPlayerCache Field Value Map<ulong, PlayerAspect> Properties Log protected override Logger Log { get; } Property Value Logger Methods Add(FixedString64Bytes, PlayerAspect) public override void Add(FixedString64Bytes key, PlayerAspect playerAspect) Parameters key FixedString64Bytes playerAspect PlayerAspect Clear(DatabaseManager) Clears the database, removing all data. public override void Clear(DatabaseManager manager) Parameters manager DatabaseManager Count() public override int Count() Returns int FindPlayer(string, bool, out Entity, out Entity) Finds a player by their name, checking if they are online and retrieving their player and user entities. public static bool FindPlayer(string name, bool mustOnline, out Entity playerEntity, out Entity userEntity) Parameters name string The name of the player to find. mustOnline bool Indicates whether the player must be online for the search to succeed. playerEntity Entity The Entity representing the player's character. userEntity Entity The Entity representing the user associated with the player. Returns bool True if the player is found and online (if required), false otherwise. FindPlayer(ulong, bool, out Entity, out Entity, out User) Finds a player by their Steam ID, checking if they are online and retrieving their player and user entities. public static bool FindPlayer(ulong steamID, bool mustOnline, out Entity playerEntity, out Entity userEntity, out User user) Parameters steamID ulong The Steam ID of the player to find. mustOnline bool Indicates whether the player must be online for the search to succeed. playerEntity Entity The Entity representing the player's character. userEntity Entity The Entity representing the user associated with the player. user User The User component associated with the player. Returns bool True if the player is found and online (if required), false otherwise. FindPlayerData(string) Finds player data by character name. public static PlayerAspect? FindPlayerData(string name) Parameters name string The character name of the player to find. Returns PlayerAspect The PlayerAspect instance representing the player, or null if not found. FindPlayerData(ulong) Finds player data by Steam ID. public static PlayerAspect? FindPlayerData(ulong steamId) Parameters steamId ulong The Steam ID of the player to find. Returns PlayerAspect The PlayerAspect instance representing the player, or null if not found. FindPlayerData(FixedString64Bytes) Finds player data by character name using a FixedString64Bytes. public static PlayerAspect? FindPlayerData(FixedString64Bytes name) Parameters name FixedString64Bytes The FixedString64Bytes character name of the player to find. Returns PlayerAspect The PlayerAspect instance representing the player, or null if not found. Get(FixedString64Bytes) public override PlayerAspect Get(FixedString64Bytes key) Parameters key FixedString64Bytes Returns PlayerAspect GetAll() public override List<PlayerAspect> GetAll() Returns List<PlayerAspect> GetNameFromSteamID(ulong) Retrieves the character name associated with a given Steam ID. public static string? GetNameFromSteamID(ulong steamID) Parameters steamID ulong The Steam ID of the player. Returns string The character name of the player, or null if not found. GetSteamIDFromName(string) Retrieves the Steam ID associated with a given character name. public static ulong GetSteamIDFromName(string name) Parameters name string The character name of the player. Returns ulong The Steam ID of the player, or 0 if not found. Initialize(DatabaseManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public override void Initialize(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> IsPlayerOnline(ulong) Checks if a player is currently online based on their Steam ID. public static bool IsPlayerOnline(ulong steamID) Parameters steamID ulong The Steam ID of the player to check. Returns bool True if the player is online, false otherwise. Load(DatabaseManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> Offline(ulong) Marks a player as offline by updating their status in the database. public PlayerAspect Offline(ulong steamID) Parameters steamID ulong The Steam ID of the player to mark as offline. Returns PlayerAspect The PlayerAspect instance representing the player. Online(Entity, User) Creates a new PlayerAspect for the user and adds it to the database. public PlayerAspect Online(Entity userEntity, User userData) Parameters userEntity Entity The entity representing the user. userData User The User data containing character name and platform ID. Returns PlayerAspect A new PlayerAspect instance representing the user. Remove(FixedString64Bytes) public override PlayerAspect Remove(FixedString64Bytes key) Parameters key FixedString64Bytes Returns PlayerAspect Terminate(DatabaseManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public override void Terminate(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> Unload(DatabaseManager, List<IPlugin>) Unloads the manager and its dependencies with a specific type. public override void Unload(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> VerifySource() Verify the source of the database. public override void VerifySource()"
  },
  "api/RisingV.Core.Players.html": {
    "href": "api/RisingV.Core.Players.html",
    "title": "Namespace RisingV.Core.Players | RisingV.Core",
    "summary": "Namespace RisingV.Core.Players Classes PlayerDatabase PlayerDatabase is responsible for managing player data in the game."
  },
  "api/RisingV.Core.Plugin.html": {
    "href": "api/RisingV.Core.Plugin.html",
    "title": "Class Plugin | RisingV.Core",
    "summary": "Class Plugin Namespace RisingV.Core Assembly RisingV.Core.dll [BepInPlugin(\"RisingV.Core\", \"RisingV.Core\", \"1.0.0\")] [BepInDependency(\"gg.deca.VampireCommandFramework\", BepInDependency.DependencyFlags.HardDependency)] [BepInDependency(\"RisingV.Shared\", BepInDependency.DependencyFlags.HardDependency)] public class Plugin : RisingPlugin<CorePluginContext>, IDisposable, IPlugin<CorePluginContext>, IPlugin, IManageable<PluginManager>, IReloadable<PluginManager>, IReloadable, IHasPluginContext<CorePluginContext>, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object BasePlugin RisingPluginBase RisingPlugin<CorePluginContext> Plugin Implements IDisposable IPlugin<CorePluginContext> IPlugin IManageable<PluginManager> IReloadable<PluginManager> IReloadable IHasPluginContext<CorePluginContext> IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members RisingPlugin<CorePluginContext>.Get() RisingPlugin<CorePluginContext>.Get<TX>() RisingPlugin<CorePluginContext>.Context RisingPlugin<CorePluginContext>.Load() RisingPlugin<CorePluginContext>.Unload() RisingPlugin<CorePluginContext>.OnPluginsReadying(EventBridge.OnPluginsReadyingEvent) RisingPluginBase.PluginInfo RisingPluginBase.PluginConfig RisingPluginBase.PluginTarget RisingPluginBase.Harmony RisingPluginBase.EventBus RisingPluginBase.SystemManager RisingPluginBase.ProcessorManager RisingPluginBase.DatabaseManager RisingPluginBase.EngineManager RisingPluginBase.Log RisingPluginBase.Initialized RisingPluginBase.OnReload(IManager, List<IPlugin>, ReloadReason) RisingPluginBase.OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent) RisingPluginBase.OnReload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, ReloadReason) RisingPluginBase.OnPluginsLoading(EventBridge.OnPluginsLoadingEvent) RisingPluginBase.RegisterSharedComponents(PluginComponentsManager) RisingPluginBase.RegisterSystems(SystemManager) RisingPluginBase.RegisterProcessors(ProcessorManager) RisingPluginBase.RegisterEngines(EngineManager) RisingPluginBase.SetupConfiguration(PluginConfig) RisingPluginBase.SetupSharedEventBus(ManagedEventBus) RisingPluginBase.GetSharedComponent(Type) RisingPluginBase.GetSharedComponent<TX>() RisingPluginBase.AddSharedComponent<T>(IPlugin) RisingPluginBase.AddSharedComponent<T>(IPlugin, T) RisingPluginBase.Dispose() BasePlugin.AddComponent<T>() BasePlugin.Config object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods OnLoad() Called when the plugin is loaded. This method should be overridden by derived classes to perform protected override void OnLoad() OnPluginsInitializing(OnPluginsInitializingEvent) Called when the plugins are initializing. This method is triggered by the RisingV.Shared.EventBridge.OnPluginsInitializingEvent. Called after OnGameDataInitializedEvent, but before OnPluginsLoadingEvent. protected override void OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent @event) Parameters event EventBridge.OnPluginsInitializingEvent The event containing the initialized game data. OnUnload() Called when the plugin is unloaded. This method should be overridden by derived classes to perform protected override bool OnUnload() Returns bool RegisterDatabases(DatabaseManager) Registers databases for the plugin. This method can be overridden by derived classes protected override void RegisterDatabases(DatabaseManager databaseManager) Parameters databaseManager DatabaseManager The database manager to register databases with. RegisterGameEventHooks() Registers game event hooks for the plugin. This method can be overridden by derived classes protected override void RegisterGameEventHooks()"
  },
  "api/RisingV.Core.Plugins.PluginContext.html": {
    "href": "api/RisingV.Core.Plugins.PluginContext.html",
    "title": "Class PluginContext | RisingV.Core",
    "summary": "Class PluginContext Namespace RisingV.Core.Plugins Assembly RisingV.Core.dll Represents the context for a plugin, providing access to plugin information, configuration, and Harmony instance. public abstract class PluginContext : IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object PluginContext Implements IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Derived CorePluginContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PluginContext(Type, PluginConfig?, PluginTarget) protected PluginContext(Type infoStaticType, PluginConfig? pluginConfig = null, PluginTarget pluginTarget = PluginTarget.Server) Parameters infoStaticType Type pluginConfig PluginConfig pluginTarget PluginTarget Properties Harmony Gets the Harmony instance associated with this plugin, used for patching methods in the game. public Harmony Harmony { get; } Property Value Harmony PluginConfig Gets the plugin configuration, which may include settings and options for the plugin. public PluginConfig? PluginConfig { get; } Property Value PluginConfig PluginInfo Gets the plugin information, including name, version, and GUID. public PluginInfo PluginInfo { get; } Property Value PluginInfo PluginTarget Gets the target platform for the plugin, indicating whether it is for the server or client. public PluginTarget PluginTarget { get; } Property Value PluginTarget"
  },
  "api/RisingV.Core.Plugins.RisingPlugin-1.html": {
    "href": "api/RisingV.Core.Plugins.RisingPlugin-1.html",
    "title": "Class RisingPlugin<TContext> | RisingV.Core",
    "summary": "Class RisingPlugin<TContext> Namespace RisingV.Core.Plugins Assembly RisingV.Core.dll Base class for RisingV plugins with a specific context. public abstract class RisingPlugin<TContext> : RisingPluginBase, IDisposable, IPlugin<TContext>, IPlugin, IManageable<PluginManager>, IReloadable<PluginManager>, IReloadable, IHasPluginContext<TContext>, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable where TContext : PluginContext Type Parameters TContext The type of the plugin context, which must inherit from PluginContext. Inheritance object BasePlugin RisingPluginBase RisingPlugin<TContext> Implements IDisposable IPlugin<TContext> IPlugin IManageable<PluginManager> IReloadable<PluginManager> IReloadable IHasPluginContext<TContext> IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Derived Plugin Inherited Members RisingPluginBase.PluginInfo RisingPluginBase.PluginConfig RisingPluginBase.PluginTarget RisingPluginBase.Harmony RisingPluginBase.EventBus RisingPluginBase.SystemManager RisingPluginBase.ProcessorManager RisingPluginBase.DatabaseManager RisingPluginBase.EngineManager RisingPluginBase.Log RisingPluginBase.Initialized RisingPluginBase.OnLoad() RisingPluginBase.OnUnload() RisingPluginBase.OnReload(IManager, List<IPlugin>, ReloadReason) RisingPluginBase.OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent) RisingPluginBase.OnReload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, ReloadReason) RisingPluginBase.OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent) RisingPluginBase.OnPluginsLoading(EventBridge.OnPluginsLoadingEvent) RisingPluginBase.RegisterSharedComponents(PluginComponentsManager) RisingPluginBase.RegisterGameEventHooks() RisingPluginBase.RegisterSystems(SystemManager) RisingPluginBase.RegisterProcessors(ProcessorManager) RisingPluginBase.RegisterDatabases(DatabaseManager) RisingPluginBase.RegisterEngines(EngineManager) RisingPluginBase.SetupConfiguration(PluginConfig) RisingPluginBase.SetupSharedEventBus(ManagedEventBus) RisingPluginBase.GetSharedComponent(Type) RisingPluginBase.GetSharedComponent<TX>() RisingPluginBase.AddSharedComponent<T>(IPlugin) RisingPluginBase.AddSharedComponent<T>(IPlugin, T) RisingPluginBase.Dispose() BasePlugin.AddComponent<T>() BasePlugin.Config object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors RisingPlugin() protected RisingPlugin() RisingPlugin(TContext) protected RisingPlugin(TContext context) Parameters context TContext Properties Context Gets the context for the plugin, which contains information about the plugin's configuration, target, and other details. public TContext Context { get; } Property Value TContext Methods Get() Gets the current instance of the RisingPlugin. public static RisingPlugin<TContext>? Get() Returns RisingPlugin<TContext> Returns the current instance of the RisingPlugin, or null if it has not been initialized. Get<TX>() Gets the current instance of the RisingPlugin as a specific type. public static TX Get<TX>() where TX : RisingPlugin<TContext> Returns TX Returns the current instance of the RisingPlugin as the specified type, or throws an exception if it is not loaded. Type Parameters TX The type of the plugin to retrieve, which must inherit from RisingPlugin<TContext>. Exceptions InvalidOperationException Thrown if the plugin of the specified type is not loaded. Load() Loads the plugin, initializing it and registering necessary components and events. public override void Load() OnPluginsReadying(OnPluginsReadyingEvent) Called when all the plugins are loaded. This method is triggered by the RisingV.Shared.EventBridge.OnPluginsReadyingEvent. protected override void OnPluginsReadying(EventBridge.OnPluginsReadyingEvent @event) Parameters event EventBridge.OnPluginsReadyingEvent The event containing the state of the plugins readying. Unload() Unloads the plugin, unregistering events and cleaning up resources. public override bool Unload() Returns bool Returns true if the plugin was successfully unloaded, otherwise false."
  },
  "api/RisingV.Core.Plugins.RisingPluginBase.html": {
    "href": "api/RisingV.Core.Plugins.RisingPluginBase.html",
    "title": "Class RisingPluginBase | RisingV.Core",
    "summary": "Class RisingPluginBase Namespace RisingV.Core.Plugins Assembly RisingV.Core.dll Base class for RisingV plugins. Example Usage: using BepInEx; using RisingV.Shared.Plugins; using RisingV.Shared.Engines; using RisingV.Core.Engines; public class MyCoolPluginConfig() : PluginConfig(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_GUID) { public ConfigEntry<float> AttackModifier { get; set; } = new(\"Gameplay\", \"AttackModifier\", 1f, \"Modifier for attack damage\"); } public class MyCoolPluginContext() : PluginContext(typeof(MyPluginInfo), new MyCoolPluginConfig()); [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)] [BepInDependency(\"gg.deca.VampireCommandFramework\")] [BepInDependency(\"RisingV.Core\")] [BepInDependency(\"RisingV.Scripting\")] public class Plugin : RisingPlugin<MyCoolPluginContext> { protected override void OnLoad() { // Plugin startup logic (pre-initialization) } protected override bool OnUnload() { return true; } protected override void RegisterEngines(EngineManager engineManager) { engineManager.AddEngine<ScriptingEngine>(this); engineManager.AddEngine<DamageEngine>(this); engineManager.AddEngine<DeathEngine>(this); } // You can also override other methods to register systems, processors, databases, etc. } public abstract class RisingPluginBase : BasePlugin, IPlugin, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable<PluginManager>, IManageable, IReloadable<PluginManager>, IReloadable, IDisposable Inheritance object BasePlugin RisingPluginBase Implements IPlugin IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable<PluginManager> IManageable IReloadable<PluginManager> IReloadable IDisposable Derived RisingPlugin<TContext> Inherited Members BasePlugin.AddComponent<T>() BasePlugin.Config object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors RisingPluginBase(PluginContext) Initializes a new instance of the RisingPluginBase class with the specified plugin context. protected RisingPluginBase(PluginContext context) Parameters context PluginContext The context for the plugin, containing information about the plugin's configuration, target, and other details. Properties Context Context for the plugin, containing information about the plugin's configuration, target, and other details. public PluginContext Context { get; } Property Value PluginContext DatabaseManager Gets the DatabaseManager instance, which is responsible for managing databases within the plugin. public DatabaseManager DatabaseManager { get; } Property Value DatabaseManager EngineManager Gets the EngineManager instance, which is responsible for managing engines within the plugin. public EngineManager EngineManager { get; } Property Value EngineManager EventBus The event bus used for managing events within the plugin. This allows the plugin to publish and subscribe events. public ManagedEventBus EventBus { get; } Property Value ManagedEventBus Harmony The Harmony instance used for patching methods in the plugin. public Harmony Harmony { get; } Property Value Harmony Initialized Indicates whether the plugin has been initialized and is ready for use. protected bool Initialized { get; } Property Value bool Log protected Logger Log { get; } Property Value Logger PluginConfig Configuration for the plugin, if available. This can be used to access settings and options defined in the plugin's configuration file. public PluginConfig? PluginConfig { get; } Property Value PluginConfig PluginInfo Information about the plugin, such as its name, version, and GUID. public PluginInfo PluginInfo { get; } Property Value PluginInfo PluginTarget The target platform for the plugin, which can be either Client or DedicatedServer. This indicates where the plugin is intended to run. public PluginTarget PluginTarget { get; } Property Value PluginTarget ProcessorManager Gets the ProcessorManager instance, which is responsible for managing processors within the plugin. public ProcessorManager ProcessorManager { get; } Property Value ProcessorManager SystemManager Gets the SystemManager instance, which is responsible for managing systems within the plugin. public SystemManager SystemManager { get; } Property Value SystemManager Methods AddSharedComponent<T>(IPlugin) Adds a shared component of the specified type to the plugin's shared components. public T? AddSharedComponent<T>(IPlugin plugin) where T : class, IPluginComponent Parameters plugin IPlugin The plugin that owns the shared component. Returns T Returns the added shared component of the specified type, or null if it could not be added. Type Parameters T The type of the shared component to add. Must implement RisingV.Shared.Plugins.IPluginComponent. AddSharedComponent<T>(IPlugin, T) Adds a shared component of the specified type to the plugin's shared components. public void AddSharedComponent<T>(IPlugin plugin, T obj) where T : class, IPluginComponent Parameters plugin IPlugin The plugin that owns the shared component. obj T The shared component instance to add. Type Parameters T The type of the shared component to add. Must implement RisingV.Shared.Plugins.IPluginComponent. Dispose() Disposes of the plugin, cleaning up resources and unregistering events. public virtual void Dispose() GetSharedComponent(Type) Gets a shared component of the specified type from the plugin's shared components. public IPluginComponent? GetSharedComponent(Type type) Parameters type Type The type of the shared component to retrieve. Returns IPluginComponent Returns the shared component of the specified type, or null if it does not exist. Exceptions AccessViolationException Thrown if the plugin is not initialized when trying to get a shared component. GetSharedComponent<TX>() Gets a shared component of the specified type from the plugin's shared components. public TX? GetSharedComponent<TX>() where TX : class, IPluginComponent Returns TX Returns the shared component of the specified type, or null if it does not exist. Type Parameters TX The type of the shared component to retrieve. Must implement RisingV.Shared.Plugins.IPluginComponent. Exceptions AccessViolationException Thrown if the plugin is not initialized when trying to get a shared component. Load() Loads the plugin, initializing it and registering necessary components and events. public override void Load() OnGameDataInitialized(OnGameDataInitializedEvent) Called when the game data is initialized. This method is triggered by the RisingV.Shared.EventBridge.OnGameDataInitializedEvent. protected virtual void OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent @event) Parameters event EventBridge.OnGameDataInitializedEvent The event containing the initialized game data. OnLoad() Called when the plugin is loaded. This method should be overridden by derived classes to perform protected abstract void OnLoad() OnPluginsInitializing(OnPluginsInitializingEvent) Called when the plugins are initializing. This method is triggered by the RisingV.Shared.EventBridge.OnPluginsInitializingEvent. Called after OnGameDataInitializedEvent, but before OnPluginsLoadingEvent. protected virtual void OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent @event) Parameters event EventBridge.OnPluginsInitializingEvent The event containing the initialized game data. OnPluginsLoading(OnPluginsLoadingEvent) Called when all the plugins are initialized and soft loaded. This method is triggered by the RisingV.Shared.EventBridge.OnPluginsPartialLoadedEvent. protected virtual void OnPluginsLoading(EventBridge.OnPluginsLoadingEvent @event) Parameters event EventBridge.OnPluginsLoadingEvent The event containing the state of the plugins initializing. OnPluginsReadying(OnPluginsReadyingEvent) Called when all the plugins are loaded. This method is triggered by the RisingV.Shared.EventBridge.OnPluginsReadyingEvent. protected virtual void OnPluginsReadying(EventBridge.OnPluginsReadyingEvent @event) Parameters event EventBridge.OnPluginsReadyingEvent The event containing the state of the plugins readying. OnReload(IManager, List<IPlugin>, ReloadReason) Called when the manager is reloaded. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. public bool OnReload(IManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager IManager plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop OnReload(PluginManager, List<IPlugin>, ReloadReason) Called when the manager is reloaded with a specific type. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. public bool OnReload(PluginManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager PluginManager plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop OnUnload() Called when the plugin is unloaded. This method should be overridden by derived classes to perform protected abstract bool OnUnload() Returns bool RegisterDatabases(DatabaseManager) Registers databases for the plugin. This method can be overridden by derived classes protected virtual void RegisterDatabases(DatabaseManager databaseManager) Parameters databaseManager DatabaseManager The database manager to register databases with. RegisterEngines(EngineManager) Registers engines for the plugin. This method can be overridden by derived classes protected virtual void RegisterEngines(EngineManager engineManager) Parameters engineManager EngineManager The engine manager to register engines with. RegisterGameEventHooks() Registers game event hooks for the plugin. This method can be overridden by derived classes protected virtual void RegisterGameEventHooks() RegisterProcessors(ProcessorManager) Registers processors for the plugin. This method can be overridden by derived classes protected virtual void RegisterProcessors(ProcessorManager processorManager) Parameters processorManager ProcessorManager The processor manager to register processors with. RegisterSharedComponents(PluginComponentsManager) Registers shared components for the plugin. This method can be overridden by derived classes protected virtual void RegisterSharedComponents(PluginComponentsManager sharedComponents) Parameters sharedComponents PluginComponentsManager The shared components manager to register components with. RegisterSystems(SystemManager) Registers systems for the plugin. This method can be overridden by derived classes protected virtual void RegisterSystems(SystemManager systemManager) Parameters systemManager SystemManager The system manager to register systems with. Reload(PluginManager, ReloadReason) public void Reload(PluginManager manager, ReloadReason reason) Parameters manager PluginManager reason ReloadReason Reload(PluginManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public void Reload(PluginManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager PluginManager plugins List<IPlugin> reason ReloadReason SetupConfiguration(PluginConfig?) Sets up the plugin configuration. This method can be overridden by derived classes protected virtual void SetupConfiguration(PluginConfig? pluginConfig) Parameters pluginConfig PluginConfig The plugin configuration to set up. SetupSharedEventBus(ManagedEventBus) Sets up the shared event bus for the plugin. This method can be overridden by derived classes protected virtual void SetupSharedEventBus(ManagedEventBus eventBus) Parameters eventBus ManagedEventBus The event bus to set up. Unload() Unloads the plugin, unregistering events and cleaning up resources. public override bool Unload() Returns bool Returns true if the plugin was successfully unloaded, otherwise false."
  },
  "api/RisingV.Core.Plugins.html": {
    "href": "api/RisingV.Core.Plugins.html",
    "title": "Namespace RisingV.Core.Plugins | RisingV.Core",
    "summary": "Namespace RisingV.Core.Plugins Classes PluginContext Represents the context for a plugin, providing access to plugin information, configuration, and Harmony instance. RisingPluginBase Base class for RisingV plugins. Example Usage: using BepInEx; using RisingV.Shared.Plugins; using RisingV.Shared.Engines; using RisingV.Core.Engines; public class MyCoolPluginConfig() : PluginConfig(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_GUID) { public ConfigEntry<float> AttackModifier { get; set; } = new(\"Gameplay\", \"AttackModifier\", 1f, \"Modifier for attack damage\"); } public class MyCoolPluginContext() : PluginContext(typeof(MyPluginInfo), new MyCoolPluginConfig()); [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)] [BepInDependency(\"gg.deca.VampireCommandFramework\")] [BepInDependency(\"RisingV.Core\")] [BepInDependency(\"RisingV.Scripting\")] public class Plugin : RisingPlugin<MyCoolPluginContext> { protected override void OnLoad() { // Plugin startup logic (pre-initialization) } protected override bool OnUnload() { return true; } protected override void RegisterEngines(EngineManager engineManager) { engineManager.AddEngine<ScriptingEngine>(this); engineManager.AddEngine<DamageEngine>(this); engineManager.AddEngine<DeathEngine>(this); } // You can also override other methods to register systems, processors, databases, etc. } RisingPlugin<TContext> Base class for RisingV plugins with a specific context."
  },
  "api/RisingV.Core.Processors.AdminAuthProcessor.html": {
    "href": "api/RisingV.Core.Processors.AdminAuthProcessor.html",
    "title": "Class AdminAuthProcessor | RisingV.Core",
    "summary": "Class AdminAuthProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Abstract class for processing ban status of players. Inherit to implement specific admin checks. public abstract class AdminAuthProcessor : DefaultProcessor<ulong>, IProcessor<ulong, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<ulong, bool?> DefaultProcessor<ulong> AdminAuthProcessor Implements IProcessor<ulong, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members ProcessorBase<ulong, bool?>.CanProcess(ulong, bool) ProcessorBase<ulong, bool?>.PreProcess(ulong, out bool?) ProcessorBase<ulong, bool?>.PostProcess(ulong, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods CanProcess(ulong, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(ulong steamId, bool isPost) Parameters steamId ulong isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. IsAdmin(PlayerAspect) protected abstract bool? IsAdmin(PlayerAspect player) Parameters player PlayerAspect Returns bool? PostProcess(ulong, out bool?) Processes the admin status of a player based on their Steam ID. public override ProcessToken PostProcess(ulong steamId, out bool? result) Parameters steamId ulong Steam ID of the player. result bool? /// Output parameter to hold the result of the admin check. Returns ProcessToken A RisingV.Shared.Processors.ProcessToken indicating the processing status."
  },
  "api/RisingV.Core.Processors.BanProcessor.html": {
    "href": "api/RisingV.Core.Processors.BanProcessor.html",
    "title": "Class BanProcessor | RisingV.Core",
    "summary": "Class BanProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Abstract class for processing ban status of players. Inherit to implement specific ban logic. public abstract class BanProcessor : DefaultProcessor<ulong>, IProcessor<ulong, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<ulong, bool?> DefaultProcessor<ulong> BanProcessor Implements IProcessor<ulong, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members ProcessorBase<ulong, bool?>.CanProcess(ulong, bool) ProcessorBase<ulong, bool?>.PreProcess(ulong, out bool?) ProcessorBase<ulong, bool?>.PostProcess(ulong, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods CanProcess(ulong, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(ulong steamId, bool isPost) Parameters steamId ulong isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. IsBanned(PlayerAspect) protected abstract bool? IsBanned(PlayerAspect player) Parameters player PlayerAspect Returns bool? PostProcess(ulong, out bool?) Processes the ban status of a player based on their Steam ID. public override ProcessToken PostProcess(ulong steamId, out bool? result) Parameters steamId ulong Steam ID of the player. result bool? Output parameter to hold the result of the ban check. Returns ProcessToken Token indicating the result of the processing."
  },
  "api/RisingV.Core.Processors.DeathProcessor.html": {
    "href": "api/RisingV.Core.Processors.DeathProcessor.html",
    "title": "Class DeathProcessor | RisingV.Core",
    "summary": "Class DeathProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Processes and route death events based on the types of entity involved in the death. public class DeathProcessor : SourceToTargetEntityProcessor<DeathEvent>, IProcessor<DeathEvent, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<DeathEvent, bool?> DefaultProcessor<DeathEvent> TargetEntityProcessor<DeathEvent> SourceToTargetEntityProcessor<DeathEvent> DeathProcessor Implements IProcessor<DeathEvent, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members SourceToTargetEntityProcessor<DeathEvent>.GetAndVerifySourceEntity(DeathEvent, Entity) SourceToTargetEntityProcessor<DeathEvent>.OnAnyTarget(Entity, DeathEvent, bool) SourceToTargetEntityProcessor<DeathEvent>.OnUnitTarget(Entity, DeathEvent, bool) SourceToTargetEntityProcessor<DeathEvent>.OnPlayerTarget(Entity, DeathEvent, bool) SourceToTargetEntityProcessor<DeathEvent>.OnBossTarget(Entity, DeathEvent, bool) SourceToTargetEntityProcessor<DeathEvent>.OnMinionTarget(Entity, DeathEvent, bool) SourceToTargetEntityProcessor<DeathEvent>.OnGatherableTarget(Entity, DeathEvent, bool) TargetEntityProcessor<DeathEvent>.PreProcess(DeathEvent, out bool?) TargetEntityProcessor<DeathEvent>.PostProcess(DeathEvent, out bool?) TargetEntityProcessor<DeathEvent>.OnProcess(DeathEvent, out bool?, bool) ProcessorBase<DeathEvent, bool?>.CanProcess(DeathEvent, bool) ProcessorBase<DeathEvent, bool?>.PreProcess(DeathEvent, out bool?) ProcessorBase<DeathEvent, bool?>.PostProcess(DeathEvent, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods CanProcess(DeathEvent, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(DeathEvent @event, bool isPost) Parameters event DeathEvent The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. GetSourceEntity(DeathEvent) Gets the source entity from the event. protected override Entity GetSourceEntity(DeathEvent @event) Parameters event DeathEvent The event containing the source entity. Returns Entity The source entity. GetTargetEntity(DeathEvent) protected override Entity GetTargetEntity(DeathEvent @event) Parameters event DeathEvent Returns Entity OnAnyTarget(Entity, Entity, DeathEvent, bool) Called for any target entity, regardless of type. protected override void OnAnyTarget(Entity sourceEntity, Entity targetEntity, DeathEvent deathEvent, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. deathEvent DeathEvent isPost bool Indicates whether this is a post-processing event. OnBossTarget(Entity, Entity, DeathEvent, bool) Called for boss target entities. protected override bool OnBossTarget(Entity sourceEntity, Entity targetEntity, DeathEvent deathEvent, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. deathEvent DeathEvent isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnGatherableTarget(Entity, Entity, DeathEvent, bool) Called for gatherable target entities. protected override bool OnGatherableTarget(Entity sourceEntity, Entity targetEntity, DeathEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event DeathEvent The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnMinionTarget(Entity, Entity, DeathEvent, bool) Called for minion target entities. protected override bool OnMinionTarget(Entity sourceEntity, Entity targetEntity, DeathEvent deathEvent, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. deathEvent DeathEvent isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnPlayerTarget(Entity, Entity, DeathEvent, bool) Called for player target entities. protected override bool OnPlayerTarget(Entity sourceEntity, Entity targetEntity, DeathEvent deathEvent, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. deathEvent DeathEvent isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnUnitTarget(Entity, Entity, DeathEvent, bool) Called for unit target entities. protected override bool OnUnitTarget(Entity sourceEntity, Entity targetEntity, DeathEvent deathEvent, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. deathEvent DeathEvent isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false."
  },
  "api/RisingV.Core.Processors.DownedProcessor.html": {
    "href": "api/RisingV.Core.Processors.DownedProcessor.html",
    "title": "Class DownedProcessor | RisingV.Core",
    "summary": "Class DownedProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Processor for routing downed events for the entity types involved. public class DownedProcessor : TargetEntityProcessor<DownedEvent>, IProcessor<DownedEvent, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<DownedEvent, bool?> DefaultProcessor<DownedEvent> TargetEntityProcessor<DownedEvent> DownedProcessor Implements IProcessor<DownedEvent, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members TargetEntityProcessor<DownedEvent>.PreProcess(DownedEvent, out bool?) TargetEntityProcessor<DownedEvent>.PostProcess(DownedEvent, out bool?) TargetEntityProcessor<DownedEvent>.OnProcess(DownedEvent, out bool?, bool) ProcessorBase<DownedEvent, bool?>.CanProcess(DownedEvent, bool) ProcessorBase<DownedEvent, bool?>.PreProcess(DownedEvent, out bool?) ProcessorBase<DownedEvent, bool?>.PostProcess(DownedEvent, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods CanProcess(DownedEvent, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(DownedEvent @event, bool isPost) Parameters event DownedEvent The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. GetDamageDealerData(DownedEvent, Entity) Gets the damage dealer data for the target entity involved in the downed event. protected virtual List<EntityDamageEntry> GetDamageDealerData(DownedEvent @event, Entity target) Parameters event DownedEvent The downed event containing the target entity. target Entity The target entity that was downed. Returns List<EntityDamageEntry> A list of damage dealer entries associated with the target entity. GetTargetEntity(DownedEvent) protected override Entity GetTargetEntity(DownedEvent @event) Parameters event DownedEvent Returns Entity OnAnyTarget(Entity, DownedEvent, bool) Called for any target entity when an event occurs. protected override void OnAnyTarget(Entity targetEntity, DownedEvent downedEvent, bool isPost) Parameters targetEntity Entity The target entity. downedEvent DownedEvent isPost bool Indicates if the event is post-processing. OnBossTarget(Entity, DownedEvent, bool) Called for boss target entities when an event occurs. protected override bool OnBossTarget(Entity targetEntity, DownedEvent downedEvent, bool isPost) Parameters targetEntity Entity The target entity. downedEvent DownedEvent isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnGatherableTarget(Entity, DownedEvent, bool) Called for gatherable target entities when an event occurs. protected override bool OnGatherableTarget(Entity targetEntity, DownedEvent downedEvent, bool isPost) Parameters targetEntity Entity The target entity. downedEvent DownedEvent isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnMinionTarget(Entity, DownedEvent, bool) Called for minion target entities when an event occurs. protected override bool OnMinionTarget(Entity targetEntity, DownedEvent downedEvent, bool isPost) Parameters targetEntity Entity The target entity. downedEvent DownedEvent isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnPlayerTarget(Entity, DownedEvent, bool) Called for player target entities when an event occurs. protected override bool OnPlayerTarget(Entity targetEntity, DownedEvent downedEvent, bool isPost) Parameters targetEntity Entity The target entity. downedEvent DownedEvent isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnUnitTarget(Entity, DownedEvent, bool) Called for unit target entities when an event occurs. protected override bool OnUnitTarget(Entity targetEntity, DownedEvent downedEvent, bool isPost) Parameters targetEntity Entity The target entity. downedEvent DownedEvent isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false."
  },
  "api/RisingV.Core.Processors.ScriptDespawnProcessor.html": {
    "href": "api/RisingV.Core.Processors.ScriptDespawnProcessor.html",
    "title": "Class ScriptDespawnProcessor | RisingV.Core",
    "summary": "Class ScriptDespawnProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll public class ScriptDespawnProcessor : TargetEntityProcessor<ScriptSpawnData>, IProcessor<ScriptSpawnData, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<ScriptSpawnData, bool?> DefaultProcessor<ScriptSpawnData> TargetEntityProcessor<ScriptSpawnData> ScriptDespawnProcessor Implements IProcessor<ScriptSpawnData, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members TargetEntityProcessor<ScriptSpawnData>.PreProcess(ScriptSpawnData, out bool?) TargetEntityProcessor<ScriptSpawnData>.PostProcess(ScriptSpawnData, out bool?) TargetEntityProcessor<ScriptSpawnData>.OnProcess(ScriptSpawnData, out bool?, bool) ProcessorBase<ScriptSpawnData, bool?>.CanProcess(ScriptSpawnData, bool) ProcessorBase<ScriptSpawnData, bool?>.PreProcess(ScriptSpawnData, out bool?) ProcessorBase<ScriptSpawnData, bool?>.PostProcess(ScriptSpawnData, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods CanProcess(ScriptSpawnData, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(ScriptSpawnData @event, bool isPost) Parameters event ScriptSpawnData The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. GetTargetEntity(ScriptSpawnData) protected override Entity GetTargetEntity(ScriptSpawnData @event) Parameters event ScriptSpawnData Returns Entity OnAnyTarget(Entity, ScriptSpawnData, bool) Called for any target entity when an event occurs. protected override void OnAnyTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. OnBossTarget(Entity, ScriptSpawnData, bool) Called for boss target entities when an event occurs. protected override bool OnBossTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnGatherableTarget(Entity, ScriptSpawnData, bool) Called for gatherable target entities when an event occurs. protected override bool OnGatherableTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnMinionTarget(Entity, ScriptSpawnData, bool) Called for minion target entities when an event occurs. protected override bool OnMinionTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnPlayerTarget(Entity, ScriptSpawnData, bool) Called for player target entities when an event occurs. protected override bool OnPlayerTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnUnitTarget(Entity, ScriptSpawnData, bool) Called for unit target entities when an event occurs. protected override bool OnUnitTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false."
  },
  "api/RisingV.Core.Processors.ScriptSpawnProcessor.html": {
    "href": "api/RisingV.Core.Processors.ScriptSpawnProcessor.html",
    "title": "Class ScriptSpawnProcessor | RisingV.Core",
    "summary": "Class ScriptSpawnProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll public class ScriptSpawnProcessor : TargetEntityProcessor<ScriptSpawnData>, IProcessor<ScriptSpawnData, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<ScriptSpawnData, bool?> DefaultProcessor<ScriptSpawnData> TargetEntityProcessor<ScriptSpawnData> ScriptSpawnProcessor Implements IProcessor<ScriptSpawnData, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members TargetEntityProcessor<ScriptSpawnData>.PreProcess(ScriptSpawnData, out bool?) TargetEntityProcessor<ScriptSpawnData>.PostProcess(ScriptSpawnData, out bool?) TargetEntityProcessor<ScriptSpawnData>.OnProcess(ScriptSpawnData, out bool?, bool) ProcessorBase<ScriptSpawnData, bool?>.CanProcess(ScriptSpawnData, bool) ProcessorBase<ScriptSpawnData, bool?>.PreProcess(ScriptSpawnData, out bool?) ProcessorBase<ScriptSpawnData, bool?>.PostProcess(ScriptSpawnData, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods CanProcess(ScriptSpawnData, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(ScriptSpawnData @event, bool isPost) Parameters event ScriptSpawnData The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. GetTargetEntity(ScriptSpawnData) protected override Entity GetTargetEntity(ScriptSpawnData @event) Parameters event ScriptSpawnData Returns Entity OnAnyTarget(Entity, ScriptSpawnData, bool) Called for any target entity when an event occurs. protected override void OnAnyTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. OnBossTarget(Entity, ScriptSpawnData, bool) Called for boss target entities when an event occurs. protected override bool OnBossTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnGatherableTarget(Entity, ScriptSpawnData, bool) Called for gatherable target entities when an event occurs. protected override bool OnGatherableTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnMinionTarget(Entity, ScriptSpawnData, bool) Called for minion target entities when an event occurs. protected override bool OnMinionTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnPlayerTarget(Entity, ScriptSpawnData, bool) Called for player target entities when an event occurs. protected override bool OnPlayerTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnUnitTarget(Entity, ScriptSpawnData, bool) Called for unit target entities when an event occurs. protected override bool OnUnitTarget(Entity targetEntity, ScriptSpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event ScriptSpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false."
  },
  "api/RisingV.Core.Processors.SourceToTargetEntityProcessor-1.html": {
    "href": "api/RisingV.Core.Processors.SourceToTargetEntityProcessor-1.html",
    "title": "Class SourceToTargetEntityProcessor<TEvent> | RisingV.Core",
    "summary": "Class SourceToTargetEntityProcessor<TEvent> Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Base class for entity processors that operate on a source entity and a target entity. public abstract class SourceToTargetEntityProcessor<TEvent> : TargetEntityProcessor<TEvent>, IProcessor<TEvent, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Type Parameters TEvent Inheritance object ProcessorBase<TEvent, bool?> DefaultProcessor<TEvent> TargetEntityProcessor<TEvent> SourceToTargetEntityProcessor<TEvent> Implements IProcessor<TEvent, bool?> IProcessor IManageable<ProcessorManager> IManageable Derived DeathProcessor StatChangeProcessor Inherited Members TargetEntityProcessor<TEvent>.Log TargetEntityProcessor<TEvent>.GetTargetEntity(TEvent) TargetEntityProcessor<TEvent>.PreProcess(TEvent, out bool?) TargetEntityProcessor<TEvent>.PostProcess(TEvent, out bool?) TargetEntityProcessor<TEvent>.OnProcess(TEvent, out bool?, bool) ProcessorBase<TEvent, bool?>.CanProcess(TEvent, bool) ProcessorBase<TEvent, bool?>.PreProcess(TEvent, out bool?) ProcessorBase<TEvent, bool?>.PostProcess(TEvent, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods GetAndVerifySourceEntity(TEvent, Entity) Verifies that the source entity exists in the global entity manager. protected virtual Entity GetAndVerifySourceEntity(TEvent @event, Entity targetEntity) Parameters event TEvent The event containing the source entity. targetEntity Entity The target entity. Returns Entity The source entity if it exists, otherwise Entity.Null. GetSourceEntity(TEvent) Gets the source entity from the event. protected abstract Entity GetSourceEntity(TEvent @event) Parameters event TEvent The event containing the source entity. Returns Entity The source entity. OnAnyTarget(Entity, Entity, TEvent, bool) Called for any target entity, regardless of type. protected abstract void OnAnyTarget(Entity sourceEntity, Entity targetEntity, TEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event TEvent The event being processed. isPost bool Indicates whether this is a post-processing event. OnAnyTarget(Entity, TEvent, bool) Called for any target entity when an event occurs. protected override void OnAnyTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. OnBossTarget(Entity, Entity, TEvent, bool) Called for boss target entities. protected abstract bool OnBossTarget(Entity sourceEntity, Entity targetEntity, TEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event TEvent The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnBossTarget(Entity, TEvent, bool) Called for boss target entities when an event occurs. protected override bool OnBossTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnGatherableTarget(Entity, Entity, TEvent, bool) Called for gatherable target entities. protected abstract bool OnGatherableTarget(Entity sourceEntity, Entity targetEntity, TEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event TEvent The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnGatherableTarget(Entity, TEvent, bool) Called for gatherable target entities when an event occurs. protected override bool OnGatherableTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnMinionTarget(Entity, Entity, TEvent, bool) Called for minion target entities. protected abstract bool OnMinionTarget(Entity sourceEntity, Entity targetEntity, TEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event TEvent The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnMinionTarget(Entity, TEvent, bool) Called for minion target entities when an event occurs. protected override bool OnMinionTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnPlayerTarget(Entity, Entity, TEvent, bool) Called for player target entities. protected abstract bool OnPlayerTarget(Entity sourceEntity, Entity targetEntity, TEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event TEvent The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnPlayerTarget(Entity, TEvent, bool) Called for player target entities when an event occurs. protected override bool OnPlayerTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnUnitTarget(Entity, Entity, TEvent, bool) Called for unit target entities. protected abstract bool OnUnitTarget(Entity sourceEntity, Entity targetEntity, TEvent @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event TEvent The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnUnitTarget(Entity, TEvent, bool) Called for unit target entities when an event occurs. protected override bool OnUnitTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false."
  },
  "api/RisingV.Core.Processors.SpawnProcessor.html": {
    "href": "api/RisingV.Core.Processors.SpawnProcessor.html",
    "title": "Class SpawnProcessor | RisingV.Core",
    "summary": "Class SpawnProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Processes and routes spawn events for various entity types involved. public class SpawnProcessor : TargetEntityProcessor<SpawnData>, IProcessor<SpawnData, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<SpawnData, bool?> DefaultProcessor<SpawnData> TargetEntityProcessor<SpawnData> SpawnProcessor Implements IProcessor<SpawnData, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members TargetEntityProcessor<SpawnData>.PreProcess(SpawnData, out bool?) TargetEntityProcessor<SpawnData>.PostProcess(SpawnData, out bool?) TargetEntityProcessor<SpawnData>.OnProcess(SpawnData, out bool?, bool) ProcessorBase<SpawnData, bool?>.CanProcess(SpawnData, bool) ProcessorBase<SpawnData, bool?>.PreProcess(SpawnData, out bool?) ProcessorBase<SpawnData, bool?>.PostProcess(SpawnData, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods CanProcess(SpawnData, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(SpawnData @event, bool isPost) Parameters event SpawnData The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. GetTargetEntity(SpawnData) protected override Entity GetTargetEntity(SpawnData @event) Parameters event SpawnData Returns Entity OnAnyTarget(Entity, SpawnData, bool) Called for any target entity when an event occurs. protected override void OnAnyTarget(Entity targetEntity, SpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event SpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. OnBossTarget(Entity, SpawnData, bool) Called for boss target entities when an event occurs. protected override bool OnBossTarget(Entity targetEntity, SpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event SpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnGatherableTarget(Entity, SpawnData, bool) Called for gatherable target entities when an event occurs. protected override bool OnGatherableTarget(Entity targetEntity, SpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event SpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnMinionTarget(Entity, SpawnData, bool) Called for minion target entities when an event occurs. protected override bool OnMinionTarget(Entity targetEntity, SpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event SpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnPlayerTarget(Entity, SpawnData, bool) Called for player target entities when an event occurs. protected override bool OnPlayerTarget(Entity targetEntity, SpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event SpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnUnitTarget(Entity, SpawnData, bool) Called for unit target entities when an event occurs. protected override bool OnUnitTarget(Entity targetEntity, SpawnData @event, bool isPost) Parameters targetEntity Entity The target entity. event SpawnData The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false."
  },
  "api/RisingV.Core.Processors.StatChangeProcessor.html": {
    "href": "api/RisingV.Core.Processors.StatChangeProcessor.html",
    "title": "Class StatChangeProcessor | RisingV.Core",
    "summary": "Class StatChangeProcessor Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Processes stat changes for entities and publishes events based on the type of entity and the reason for the stat change. public class StatChangeProcessor : SourceToTargetEntityProcessor<StatChangeData>, IProcessor<StatChangeData, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<StatChangeData, bool?> DefaultProcessor<StatChangeData> TargetEntityProcessor<StatChangeData> SourceToTargetEntityProcessor<StatChangeData> StatChangeProcessor Implements IProcessor<StatChangeData, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members SourceToTargetEntityProcessor<StatChangeData>.GetAndVerifySourceEntity(StatChangeData, Entity) SourceToTargetEntityProcessor<StatChangeData>.OnAnyTarget(Entity, StatChangeData, bool) SourceToTargetEntityProcessor<StatChangeData>.OnUnitTarget(Entity, StatChangeData, bool) SourceToTargetEntityProcessor<StatChangeData>.OnPlayerTarget(Entity, StatChangeData, bool) SourceToTargetEntityProcessor<StatChangeData>.OnBossTarget(Entity, StatChangeData, bool) SourceToTargetEntityProcessor<StatChangeData>.OnMinionTarget(Entity, StatChangeData, bool) SourceToTargetEntityProcessor<StatChangeData>.OnGatherableTarget(Entity, StatChangeData, bool) TargetEntityProcessor<StatChangeData>.PreProcess(StatChangeData, out bool?) TargetEntityProcessor<StatChangeData>.PostProcess(StatChangeData, out bool?) TargetEntityProcessor<StatChangeData>.OnProcess(StatChangeData, out bool?, bool) ProcessorBase<StatChangeData, bool?>.CanProcess(StatChangeData, bool) ProcessorBase<StatChangeData, bool?>.PreProcess(StatChangeData, out bool?) ProcessorBase<StatChangeData, bool?>.PostProcess(StatChangeData, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties AnyEventMap public LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> AnyEventMap { get; } Property Value LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> BossEventMap public LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> BossEventMap { get; } Property Value LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> GatherableEventMap public LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> GatherableEventMap { get; } Property Value LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> Log protected override Logger Log { get; } Property Value Logger MinionEventMap public LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> MinionEventMap { get; } Property Value LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> PlayerEventMap public LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> PlayerEventMap { get; } Property Value LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> UnitEventMap public LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> UnitEventMap { get; } Property Value LazyMap<StatType, LazyMap<StatChangeReason, List<Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent>>>> Methods CanProcess(StatChangeData, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(StatChangeData @event, bool isPost) Parameters event StatChangeData The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. GetSourceEntity(StatChangeData) Gets the source entity from the event. protected override Entity GetSourceEntity(StatChangeData @event) Parameters event StatChangeData The event containing the source entity. Returns Entity The source entity. GetTargetEntity(StatChangeData) protected override Entity GetTargetEntity(StatChangeData @event) Parameters event StatChangeData Returns Entity OnAnyTarget(Entity, Entity, StatChangeData, bool) Called for any target entity, regardless of type. protected override void OnAnyTarget(Entity sourceEntity, Entity targetEntity, StatChangeData @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event StatChangeData The event being processed. isPost bool Indicates whether this is a post-processing event. OnBossTarget(Entity, Entity, StatChangeData, bool) Called for boss target entities. protected override bool OnBossTarget(Entity sourceEntity, Entity targetEntity, StatChangeData @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event StatChangeData The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnGatherableTarget(Entity, Entity, StatChangeData, bool) Called for gatherable target entities. protected override bool OnGatherableTarget(Entity sourceEntity, Entity targetEntity, StatChangeData @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event StatChangeData The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnMinionTarget(Entity, Entity, StatChangeData, bool) Called for minion target entities. protected override bool OnMinionTarget(Entity sourceEntity, Entity targetEntity, StatChangeData @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event StatChangeData The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnPlayerTarget(Entity, Entity, StatChangeData, bool) Called for player target entities. protected override bool OnPlayerTarget(Entity sourceEntity, Entity targetEntity, StatChangeData @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event StatChangeData The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. OnUnitTarget(Entity, Entity, StatChangeData, bool) Called for unit target entities. protected override bool OnUnitTarget(Entity sourceEntity, Entity targetEntity, StatChangeData @event, bool isPost) Parameters sourceEntity Entity The source entity that initiated the event. targetEntity Entity The target entity that the event is being processed for. event StatChangeData The event being processed. isPost bool Indicates whether this is a post-processing event. Returns bool Returns true if the event was handled, otherwise false. RegisterAnyEvent(StatType, StatChangeReason, Func<Entity, Entity, StatChangeData, StatChangedEvent>) Registers an event factory for any entity type and stat change reason. public void RegisterAnyEvent(StatType type, StatChangeReason reason, Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> factory) Parameters type StatType The type of stat that is changing. reason StatChangeReason The reason for the stat change. factory Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> The factory function that creates the event. RegisterBossEvent(StatType, StatChangeReason, Func<Entity, Entity, StatChangeData, StatChangedEvent>) Registers an event factory for boss entities and a specific stat change reason. public void RegisterBossEvent(StatType type, StatChangeReason reason, Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> factory) Parameters type StatType The type of stat that is changing. reason StatChangeReason The reason for the stat change. factory Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> The factory function that creates the event. RegisterGatherableEvent(StatType, StatChangeReason, Func<Entity, Entity, StatChangeData, StatChangedEvent>) Registers an event factory for gatherable entities and a specific stat change reason. public void RegisterGatherableEvent(StatType type, StatChangeReason reason, Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> factory) Parameters type StatType The type of stat that is changing. reason StatChangeReason The reason for the stat change. factory Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> The factory function that creates the event. RegisterMinionEvent(StatType, StatChangeReason, Func<Entity, Entity, StatChangeData, StatChangedEvent>) Registers an event factory for minion entities and a specific stat change reason. public void RegisterMinionEvent(StatType type, StatChangeReason reason, Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> factory) Parameters type StatType The type of stat that is changing. reason StatChangeReason The reason for the stat change. factory Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> The factory function that creates the event. RegisterPlayerEvent(StatType, StatChangeReason, Func<Entity, Entity, StatChangeData, StatChangedEvent>) Registers an event factory for player entities and a specific stat change reason. public void RegisterPlayerEvent(StatType type, StatChangeReason reason, Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> factory) Parameters type StatType The type of stat that is changing. reason StatChangeReason The reason for the stat change. factory Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> The factory function that creates the event. RegisterUnitEvent(StatType, StatChangeReason, Func<Entity, Entity, StatChangeData, StatChangedEvent>) Registers an event factory for unit entities and a specific stat change reason. public void RegisterUnitEvent(StatType type, StatChangeReason reason, Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> factory) Parameters type StatType The type of stat that is changing. reason StatChangeReason The reason for the stat change. factory Func<Entity, Entity, StatChangeData, EventBridge.StatChangedEvent> The factory function that creates the event."
  },
  "api/RisingV.Core.Processors.TargetEntityProcessor-1.html": {
    "href": "api/RisingV.Core.Processors.TargetEntityProcessor-1.html",
    "title": "Class TargetEntityProcessor<TEvent> | RisingV.Core",
    "summary": "Class TargetEntityProcessor<TEvent> Namespace RisingV.Core.Processors Assembly RisingV.Core.dll Base class for processors that target a specific entity type. public abstract class TargetEntityProcessor<TEvent> : DefaultProcessor<TEvent>, IProcessor<TEvent, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Type Parameters TEvent Inheritance object ProcessorBase<TEvent, bool?> DefaultProcessor<TEvent> TargetEntityProcessor<TEvent> Implements IProcessor<TEvent, bool?> IProcessor IManageable<ProcessorManager> IManageable Derived DownedProcessor ScriptDespawnProcessor ScriptSpawnProcessor SourceToTargetEntityProcessor<TEvent> SpawnProcessor Inherited Members ProcessorBase<TEvent, bool?>.CanProcess(TEvent, bool) ProcessorBase<TEvent, bool?>.PreProcess(TEvent, out bool?) ProcessorBase<TEvent, bool?>.PostProcess(TEvent, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected abstract Logger Log { get; } Property Value Logger Methods GetTargetEntity(TEvent) protected abstract Entity GetTargetEntity(TEvent @event) Parameters event TEvent Returns Entity OnAnyTarget(Entity, TEvent, bool) Called for any target entity when an event occurs. protected abstract void OnAnyTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. OnBossTarget(Entity, TEvent, bool) Called for boss target entities when an event occurs. protected abstract bool OnBossTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnGatherableTarget(Entity, TEvent, bool) Called for gatherable target entities when an event occurs. protected abstract bool OnGatherableTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnMinionTarget(Entity, TEvent, bool) Called for minion target entities when an event occurs. protected abstract bool OnMinionTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnPlayerTarget(Entity, TEvent, bool) Called for player target entities when an event occurs. protected abstract bool OnPlayerTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. OnProcess(TEvent, out bool?, bool) protected virtual ProcessToken OnProcess(TEvent @event, out bool? result, bool isPost = false) Parameters event TEvent result bool? isPost bool Returns ProcessToken OnUnitTarget(Entity, TEvent, bool) Called for unit target entities when an event occurs. protected abstract bool OnUnitTarget(Entity targetEntity, TEvent @event, bool isPost) Parameters targetEntity Entity The target entity. event TEvent The event containing the source entity. isPost bool Indicates if the event is post-processing. Returns bool True if the event was handled, otherwise false. PostProcess(TEvent, out bool?) Processes the given event and returns a token indicating the processing result. public override ProcessToken PostProcess(TEvent @event, out bool? result) Parameters event TEvent The event to process. result bool? An output parameter that will hold the result of the processing. Returns ProcessToken A token indicating the processing result. PreProcess(TEvent, out bool?) Pre-process the event before it is processed. public override ProcessToken PreProcess(TEvent @event, out bool? result) Parameters event TEvent The event to process. result bool? The result of the processing. Returns ProcessToken A token indicating whether to continue processing or not."
  },
  "api/RisingV.Core.Processors.html": {
    "href": "api/RisingV.Core.Processors.html",
    "title": "Namespace RisingV.Core.Processors | RisingV.Core",
    "summary": "Namespace RisingV.Core.Processors Classes AdminAuthProcessor Abstract class for processing ban status of players. Inherit to implement specific admin checks. BanProcessor Abstract class for processing ban status of players. Inherit to implement specific ban logic. DeathProcessor Processes and route death events based on the types of entity involved in the death. DownedProcessor Processor for routing downed events for the entity types involved. ScriptDespawnProcessor ScriptSpawnProcessor SourceToTargetEntityProcessor<TEvent> Base class for entity processors that operate on a source entity and a target entity. SpawnProcessor Processes and routes spawn events for various entity types involved. StatChangeProcessor Processes stat changes for entities and publishes events based on the type of entity and the reason for the stat change. TargetEntityProcessor<TEvent> Base class for processors that target a specific entity type."
  },
  "api/RisingV.Core.Systems.CastleHeartSystem.html": {
    "href": "api/RisingV.Core.Systems.CastleHeartSystem.html",
    "title": "Class CastleHeartSystem | RisingV.Core",
    "summary": "Class CastleHeartSystem Namespace RisingV.Core.Systems Assembly RisingV.Core.dll System for locating CastleHeart entities in the world. public class CastleHeartSystem : System, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System CastleHeartSystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System.Config System.Initialize(SystemManager, List<IPlugin>) System.Load(SystemManager, List<IPlugin>) System.Ready(SystemManager, List<IPlugin>) System.Terminate(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors CastleHeartSystem() Default constructor. public CastleHeartSystem() Fields CastleHeartQuery Lazily initialized query for all CastleHeart + Team components. public static readonly LazyRetry<EntityQuery> CastleHeartQuery Field Value LazyRetry<EntityQuery> Methods TryGetById(NetworkId, out Entity) Attempts to find the castle entity matching the given castleId. public static bool TryGetById(NetworkId castleId, out Entity castle) Parameters castleId NetworkId castle Entity Returns bool TryGetByOwnerUser(User, out Entity) Attempts to find a castle entity owned by the specified user. public static bool TryGetByOwnerUser(User user, out Entity castle) Parameters user User User whose castle to find. castle Entity Output entity if found; otherwise Unity.Entities.Entity.Null. Returns bool True if an owned castle entity is found."
  },
  "api/RisingV.Core.Systems.CastleTerritorySystem.html": {
    "href": "api/RisingV.Core.Systems.CastleTerritorySystem.html",
    "title": "Class CastleTerritorySystem | RisingV.Core",
    "summary": "Class CastleTerritorySystem Namespace RisingV.Core.Systems Assembly RisingV.Core.dll System that maps world positions to castle territories and provides lookup utilities. public class CastleTerritorySystem : System, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System CastleTerritorySystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System.Config System.Initialize(SystemManager, List<IPlugin>) System.Ready(SystemManager, List<IPlugin>) System.Terminate(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors CastleTerritorySystem() public CastleTerritorySystem() Methods ConvertPosToBlockCoord(float3) Converts a world position to discrete block coordinates. public static int2 ConvertPosToBlockCoord(float3 pos) Parameters pos float3 World-space position. Returns int2 Block coordinate as an Unity.Mathematics.int2. ConvertPosToGrid(float3) Transforms a world position into the grid system used by castle territories. public static float3 ConvertPosToGrid(float3 pos) Parameters pos float3 World-space position. Returns float3 Position shifted and floored for grid alignment. GetHeartForTerritory(int) Finds the CastleHeart entity that corresponds to a given territory index. public static Entity GetHeartForTerritory(int territoryIndex) Parameters territoryIndex int Index of the territory. Returns Entity The CastleHeart entity, or Unity.Entities.Entity.Null if not found. GetTerritoryIndex(float3) Retrieves the territory index for a world position. public static int GetTerritoryIndex(float3 pos) Parameters pos float3 World-space position. Returns int The territory index, or –1 if none. Load(SystemManager, List<IPlugin>) Loads all ProjectM.CastleBuilding.CastleTerritory entities, builds lookup dictionaries, and must be called during system initialization. public override void Load(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager The system manager hosting this system. plugins List<IPlugin> List of loaded plugins. TryGetCastleTerritory(Entity, out Entity) Attempts to find the territory entity containing the given entity based on its position. public static bool TryGetCastleTerritory(Entity entity, out Entity territoryEntity) Parameters entity Entity An entity which must have a Unity.Transforms.Translation component. territoryEntity Entity The found territory entity, or Unity.Entities.Entity.Null if none. Returns bool True if a territory was found for the entity’s position."
  },
  "api/RisingV.Core.Systems.ChatSystem.html": {
    "href": "api/RisingV.Core.Systems.ChatSystem.html",
    "title": "Class ChatSystem | RisingV.Core",
    "summary": "Class ChatSystem Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public class ChatSystem : System, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System ChatSystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System.Config System.Initialize(SystemManager, List<IPlugin>) System.Load(SystemManager, List<IPlugin>) System.Ready(SystemManager, List<IPlugin>) System.Terminate(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods RegisterClientNonce(ulong, int) Used by the client to register their nonce so that messages can be deserialised correctly in the client public static void RegisterClientNonce(ulong steamId, int clientNonce) Parameters steamId ulong clientNonce int RegisterType<T>(Action<T, ulong>) public static void RegisterType<T>(Action<T, ulong> onMessageEvent) where T : IChatMessage, new() Parameters onMessageEvent Action<T, ulong> Type Parameters T SendToClient<T>(User, T) Send a IChatMessage message to the client via the in-game chat mechanism. If the client has not yet been initialised (via InitialiseClient) then this will not send any message. Note: If the client has not registered the IChatMessage type that we are sending, then they will not receive that message. public static void SendToClient<T>(User toCharacter, T msg) where T : IChatMessage Parameters toCharacter User This is the user that the message will be sent to msg T This is the data packet that will be sent to the user Type Parameters T SerialiseMessage<T>(T, int) public static string SerialiseMessage<T>(T msg, int clientNonce) where T : IChatMessage Parameters msg T clientNonce int Returns string Type Parameters T Events OnClientRegisterEvent The server should add an action on this event to be able to respond with any start-up requests now that the user is ready for messages. public static event ClientRegisterMessageHandler? OnClientRegisterEvent Event Type ClientRegisterMessageHandler"
  },
  "api/RisingV.Core.Systems.ClanSystem.html": {
    "href": "api/RisingV.Core.Systems.ClanSystem.html",
    "title": "Class ClanSystem | RisingV.Core",
    "summary": "Class ClanSystem Namespace RisingV.Core.Systems Assembly RisingV.Core.dll Provides lookup utilities for clan entities and their membership. public class ClanSystem : System, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System ClanSystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System.Config System.Initialize(SystemManager, List<IPlugin>) System.Load(SystemManager, List<IPlugin>) System.Ready(SystemManager, List<IPlugin>) System.Terminate(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ClanSystem() Default constructor. public ClanSystem() Methods GetAll() Enumerates all existing clan entities. public static IEnumerable<Entity> GetAll() Returns IEnumerable<Entity> An IEnumerable<T> of clan entities. GetByGuid(Guid) Finds a clan entity by its GUID. public static Entity GetByGuid(Guid guid) Parameters guid Guid The Il2CppSystem.Guid of the clan. Returns Entity The matching Unity.Entities.Entity, or Unity.Entities.Entity.Null. GetByName(string) Finds a clan entity by its display name. Only clans with at least one synced user are considered. public static Entity GetByName(string clanName) Parameters clanName string The clan's name to search for (case-insensitive). Returns Entity The matching Unity.Entities.Entity, or Unity.Entities.Entity.Null if none found. GetByNetworkId(NetworkId) Finds a clan entity by its network identifier. public static Entity GetByNetworkId(NetworkId networkId) Parameters networkId NetworkId The ProjectM.Network.NetworkId of the clan. Returns Entity The matching Unity.Entities.Entity, or Unity.Entities.Entity.Null. GetClanLeader(Entity) Retrieves the ProjectM.Network.User who is the leader of the specified clan. public static User GetClanLeader(Entity clanEntity) Parameters clanEntity Entity The clan Unity.Entities.Entity. Returns User The leader ProjectM.Network.User instance. GetClanLeaderAsPlayer(Entity) Retrieves the clan leader as a PlayerAspect. public static PlayerAspect GetClanLeaderAsPlayer(Entity clanEntity) Parameters clanEntity Entity The clan Unity.Entities.Entity. Returns PlayerAspect The leader as PlayerAspect. GetClanLeaderIndex(DynamicBuffer<ClanMemberStatus>) Returns the index within a Unity.Entities.DynamicBuffer<T> of the Leader. public static int GetClanLeaderIndex(DynamicBuffer<ClanMemberStatus> clanBuffer) Parameters clanBuffer DynamicBuffer<ClanMemberStatus> Buffer of clan member statuses. Returns int Index of the leader role, or -1 if not found. GetClanMembers(Entity) Enumerates all ProjectM.Network.Users in the specified clan. public static IEnumerable<User> GetClanMembers(Entity clanEntity) Parameters clanEntity Entity The clan Unity.Entities.Entity. Returns IEnumerable<User> An IEnumerable<T> of clan members. GetClanMembersAsPlayers(Entity) Enumerates all clan members as PlayerAspect. public static IEnumerable<PlayerAspect> GetClanMembersAsPlayers(Entity clanEntity) Parameters clanEntity Entity The clan Unity.Entities.Entity. Returns IEnumerable<PlayerAspect> An IEnumerable<T> of clan member players. IsClanLeader(User) Determines if the specified ProjectM.Network.User is the leader of their clan. public static bool IsClanLeader(User user) Parameters user User The ProjectM.Network.User to check. Returns bool True if they hold the Leader role; otherwise false."
  },
  "api/RisingV.Core.Systems.ClientRegisterMessageHandler.html": {
    "href": "api/RisingV.Core.Systems.ClientRegisterMessageHandler.html",
    "title": "Delegate ClientRegisterMessageHandler | RisingV.Core",
    "summary": "Delegate ClientRegisterMessageHandler Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public delegate void ClientRegisterMessageHandler(ulong steamId) Parameters steamId ulong Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Systems.DamageTrackingSystem.html": {
    "href": "api/RisingV.Core.Systems.DamageTrackingSystem.html",
    "title": "Class DamageTrackingSystem | RisingV.Core",
    "summary": "Class DamageTrackingSystem Namespace RisingV.Core.Systems Assembly RisingV.Core.dll System for tracking damage dealt to entities. public class DamageTrackingSystem : System<DamageTrackingSystemConfig>, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System System<DamageTrackingSystemConfig> DamageTrackingSystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System<DamageTrackingSystemConfig>.Config System.Ready(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamageTrackingSystem() System for tracking damage dealt to entities. public DamageTrackingSystem() Methods ClearDamage(Entity) public static void ClearDamage(Entity targetEntity) Parameters targetEntity Entity Initialize(SystemManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public override void Initialize(SystemManager systemManager, List<IPlugin> plugins) Parameters systemManager SystemManager plugins List<IPlugin> Load(SystemManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(SystemManager systemManager, List<IPlugin> plugins) Parameters systemManager SystemManager plugins List<IPlugin> OnDamagedEvent(DamagedEvent) public void OnDamagedEvent(EventBridge.DamagedEvent @event) Parameters event EventBridge.DamagedEvent OnDeathEvent(IDeathEvent) public void OnDeathEvent(EventBridge.IDeathEvent @event) Parameters event EventBridge.IDeathEvent Terminate(SystemManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public override void Terminate(SystemManager systemManager, List<IPlugin> plugins) Parameters systemManager SystemManager plugins List<IPlugin> TrackDamage(Entity, Entity, StatChangeData) public void TrackDamage(Entity sourceEntity, Entity targetEntity, StatChangeData damageData) Parameters sourceEntity Entity targetEntity Entity damageData StatChangeData"
  },
  "api/RisingV.Core.Systems.DamageTrackingSystemConfig.html": {
    "href": "api/RisingV.Core.Systems.DamageTrackingSystemConfig.html",
    "title": "Class DamageTrackingSystemConfig | RisingV.Core",
    "summary": "Class DamageTrackingSystemConfig Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public class DamageTrackingSystemConfig : SystemConfig, ISystemConfig, IConfig Inheritance object BaseConfig SystemConfig DamageTrackingSystemConfig Implements ISystemConfig IConfig Inherited Members SystemConfig.Log BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamageTrackingSystemConfig() public DamageTrackingSystemConfig() Properties CleanUpJobDelay public ConfigEntry<int>? CleanUpJobDelay { get; } Property Value ConfigEntry<int> OnDeathClearDelay public ConfigEntry<int>? OnDeathClearDelay { get; } Property Value ConfigEntry<int> OnlyTrackPlayerDamage public ConfigEntry<bool>? OnlyTrackPlayerDamage { get; } Property Value ConfigEntry<bool> Methods Load() public override void Load()"
  },
  "api/RisingV.Core.Systems.EntityDamageEntry.html": {
    "href": "api/RisingV.Core.Systems.EntityDamageEntry.html",
    "title": "Struct EntityDamageEntry | RisingV.Core",
    "summary": "Struct EntityDamageEntry Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public struct EntityDamageEntry Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields EquipmentLevel public float EquipmentLevel Field Value float Source public Entity Source Field Value Entity TargetLevel public float TargetLevel Field Value float TargetMaxHealth public float TargetMaxHealth Field Value float TotalDamage public float TotalDamage Field Value float TotalDamagePercent public float TotalDamagePercent Field Value float Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/RisingV.Core.Systems.EntityDamageTrackingComponent.html": {
    "href": "api/RisingV.Core.Systems.EntityDamageTrackingComponent.html",
    "title": "Class EntityDamageTrackingComponent | RisingV.Core",
    "summary": "Class EntityDamageTrackingComponent Namespace RisingV.Core.Systems Assembly RisingV.Core.dll Tracks damage dealt to entities, allowing retrieval of damage statistics by source entity. public class EntityDamageTrackingComponent : LazyMap<ulong, EntityDamageEntry>, IReadOnlyDictionary<ulong, EntityDamageEntry>, IReadOnlyCollection<KeyValuePair<ulong, EntityDamageEntry>>, IDeserializationCallback, ISerializable, IMap<ulong, EntityDamageEntry>, IDictionary<ulong, EntityDamageEntry>, ICollection<KeyValuePair<ulong, EntityDamageEntry>>, IEnumerable<KeyValuePair<ulong, EntityDamageEntry>>, IMap, IDictionary, ICollection, IEnumerable, IEntityComponentData, IData Inheritance object Dictionary<ulong, EntityDamageEntry> Map<ulong, EntityDamageEntry> LazyMap<ulong, EntityDamageEntry> EntityDamageTrackingComponent Implements IReadOnlyDictionary<ulong, EntityDamageEntry> IReadOnlyCollection<KeyValuePair<ulong, EntityDamageEntry>> IDeserializationCallback ISerializable IMap<ulong, EntityDamageEntry> IDictionary<ulong, EntityDamageEntry> ICollection<KeyValuePair<ulong, EntityDamageEntry>> IEnumerable<KeyValuePair<ulong, EntityDamageEntry>> IMap IDictionary ICollection IEnumerable IEntityComponentData IData Inherited Members LazyMap<ulong, EntityDamageEntry>.this[ulong] LazyMap<ulong, EntityDamageEntry>.TryRemove(ulong, out EntityDamageEntry) Map<ulong, EntityDamageEntry>.Keys Map<ulong, EntityDamageEntry>.Values Map<ulong, EntityDamageEntry>.ToString() Dictionary<ulong, EntityDamageEntry>.Add(ulong, EntityDamageEntry) Dictionary<ulong, EntityDamageEntry>.Clear() Dictionary<ulong, EntityDamageEntry>.ContainsKey(ulong) Dictionary<ulong, EntityDamageEntry>.ContainsValue(EntityDamageEntry) Dictionary<ulong, EntityDamageEntry>.EnsureCapacity(int) Dictionary<ulong, EntityDamageEntry>.GetEnumerator() Dictionary<ulong, EntityDamageEntry>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<ulong, EntityDamageEntry>.OnDeserialization(object) Dictionary<ulong, EntityDamageEntry>.Remove(ulong) Dictionary<ulong, EntityDamageEntry>.Remove(ulong, out EntityDamageEntry) Dictionary<ulong, EntityDamageEntry>.TrimExcess() Dictionary<ulong, EntityDamageEntry>.TrimExcess(int) Dictionary<ulong, EntityDamageEntry>.TryAdd(ulong, EntityDamageEntry) Dictionary<ulong, EntityDamageEntry>.TryGetValue(ulong, out EntityDamageEntry) Dictionary<ulong, EntityDamageEntry>.Comparer Dictionary<ulong, EntityDamageEntry>.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods GetPlayerParticipants() public List<PlayerAspect> GetPlayerParticipants() Returns List<PlayerAspect> GetUnitParticipants() public List<UnitAspect> GetUnitParticipants() Returns List<UnitAspect> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Core.Systems.LootCompletionMode.html": {
    "href": "api/RisingV.Core.Systems.LootCompletionMode.html",
    "title": "Enum LootCompletionMode | RisingV.Core",
    "summary": "Enum LootCompletionMode Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public enum LootCompletionMode Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields CompleteOnFailure = 2 CompleteOnSuccess = 1 OneIteration = 0 RerollWhenNoSuccess = 3"
  },
  "api/RisingV.Core.Systems.LootRollMode.html": {
    "href": "api/RisingV.Core.Systems.LootRollMode.html",
    "title": "Enum LootRollMode | RisingV.Core",
    "summary": "Enum LootRollMode Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public enum LootRollMode Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Always = 0 Never = 1"
  },
  "api/RisingV.Core.Systems.LootSelectionMode.html": {
    "href": "api/RisingV.Core.Systems.LootSelectionMode.html",
    "title": "Enum LootSelectionMode | RisingV.Core",
    "summary": "Enum LootSelectionMode Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public enum LootSelectionMode Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields AllFailure = 1 AllSuccess = 0 SelectFromFailureRandomly = 3 SelectFromSuccessRandomly = 2 SelectHalfFromFailure = 5 SelectHalfFromSuccess = 4 SelectQuarterFromFailure = 7 SelectQuarterFromSuccess = 6"
  },
  "api/RisingV.Core.Systems.LootShuffleMode.html": {
    "href": "api/RisingV.Core.Systems.LootShuffleMode.html",
    "title": "Enum LootShuffleMode | RisingV.Core",
    "summary": "Enum LootShuffleMode Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public enum LootShuffleMode Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields None = 0 Shuffle = 1"
  },
  "api/RisingV.Core.Systems.LootSystem.html": {
    "href": "api/RisingV.Core.Systems.LootSystem.html",
    "title": "Class LootSystem | RisingV.Core",
    "summary": "Class LootSystem Namespace RisingV.Core.Systems Assembly RisingV.Core.dll LootSystem is responsible for generating item drops based on the configured loot rules. public class LootSystem : System<LootSystemConfig>, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System System<LootSystemConfig> LootSystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System<LootSystemConfig>.Config System.Ready(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods DropItemsNearby<T>(Entity, List<T>, string) public static List<IItemDrop> DropItemsNearby<T>(Entity entity, List<T> itemsToDrop, string sourceName = \"\") where T : class, IItemDrop Parameters entity Entity itemsToDrop List<T> sourceName string Returns List<IItemDrop> Type Parameters T GenerateItemDrops<T>(IHasItemDrops<T>, Func<T, float>?, Func<T, float>?, RangeInt?) public static List<IItemDrop> GenerateItemDrops<T>(IHasItemDrops<T> hasDrops, Func<T, float>? calculateDropScaleFunc = null, Func<T, float>? calculateAmountScaleFunc = null, RangeInt? defaultAmountRange = null) where T : IItem, IItemDroppable Parameters hasDrops IHasItemDrops<T> calculateDropScaleFunc Func<T, float> calculateAmountScaleFunc Func<T, float> defaultAmountRange RangeInt Returns List<IItemDrop> Type Parameters T GenerateItemDrops<T>(IEnumerable<T>, Func<T, float>?, Func<T, float>?, RangeInt?, LootRollMode, LootCompletionMode, LootSelectionMode, LootShuffleMode, uint) public static List<IItemDrop> GenerateItemDrops<T>(IEnumerable<T> hasDrops, Func<T, float>? calculateDropScaleFunc = null, Func<T, float>? calculateAmountScaleFunc = null, RangeInt? defaultAmountRange = null, LootRollMode rollMode = LootRollMode.Always, LootCompletionMode completionMode = LootCompletionMode.OneIteration, LootSelectionMode selectionMode = LootSelectionMode.AllSuccess, LootShuffleMode shuffleMode = LootShuffleMode.Shuffle, uint indent = 0) where T : IItem, IItemDroppable Parameters hasDrops IEnumerable<T> calculateDropScaleFunc Func<T, float> calculateAmountScaleFunc Func<T, float> defaultAmountRange RangeInt rollMode LootRollMode completionMode LootCompletionMode selectionMode LootSelectionMode shuffleMode LootShuffleMode indent uint Returns List<IItemDrop> Type Parameters T Initialize(SystemManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public override void Initialize(SystemManager systemManager, List<IPlugin> plugins) Parameters systemManager SystemManager plugins List<IPlugin> Load(SystemManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(SystemManager systemManager, List<IPlugin> plugins) Parameters systemManager SystemManager plugins List<IPlugin> Terminate(SystemManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public override void Terminate(SystemManager systemManager, List<IPlugin> plugins) Parameters systemManager SystemManager plugins List<IPlugin>"
  },
  "api/RisingV.Core.Systems.LootSystemConfig.html": {
    "href": "api/RisingV.Core.Systems.LootSystemConfig.html",
    "title": "Class LootSystemConfig | RisingV.Core",
    "summary": "Class LootSystemConfig Namespace RisingV.Core.Systems Assembly RisingV.Core.dll public class LootSystemConfig : SystemConfig, ISystemConfig, IConfig Inheritance object BaseConfig SystemConfig LootSystemConfig Implements ISystemConfig IConfig Inherited Members SystemConfig.Log BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors LootSystemConfig() public LootSystemConfig() Methods Load() public override void Load()"
  },
  "api/RisingV.Core.Systems.html": {
    "href": "api/RisingV.Core.Systems.html",
    "title": "Namespace RisingV.Core.Systems | RisingV.Core",
    "summary": "Namespace RisingV.Core.Systems Classes CastleHeartSystem System for locating CastleHeart entities in the world. CastleTerritorySystem System that maps world positions to castle territories and provides lookup utilities. ChatSystem ClanSystem Provides lookup utilities for clan entities and their membership. DamageTrackingSystem System for tracking damage dealt to entities. DamageTrackingSystemConfig EntityDamageTrackingComponent Tracks damage dealt to entities, allowing retrieval of damage statistics by source entity. LootSystem LootSystem is responsible for generating item drops based on the configured loot rules. LootSystemConfig Structs EntityDamageEntry Enums LootCompletionMode LootRollMode LootSelectionMode LootShuffleMode Delegates ClientRegisterMessageHandler"
  },
  "api/RisingV.Core.Transport.MessageHandler.html": {
    "href": "api/RisingV.Core.Transport.MessageHandler.html",
    "title": "Class MessageHandler | RisingV.Core",
    "summary": "Class MessageHandler Namespace RisingV.Core.Transport Assembly RisingV.Core.dll public class MessageHandler Inheritance object MessageHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods ServerSendToClient<T>(User, T) Send a IChatMessage based message to the specified user client. public static void ServerSendToClient<T>(User toCharacter, T msg) where T : IChatMessage Parameters toCharacter User msg T Type Parameters T Events OnServerMessageEvent Event for the server to subscribe to messages sent from the client public static event ServerMessageHandler? OnServerMessageEvent Event Type ServerMessageHandler"
  },
  "api/RisingV.Core.Transport.ServerMessageHandler.html": {
    "href": "api/RisingV.Core.Transport.ServerMessageHandler.html",
    "title": "Delegate ServerMessageHandler | RisingV.Core",
    "summary": "Delegate ServerMessageHandler Namespace RisingV.Core.Transport Assembly RisingV.Core.dll public delegate void ServerMessageHandler(User fromCharacter, ClientAction msg) Parameters fromCharacter User msg ClientAction Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Transport.TransportUtil.html": {
    "href": "api/RisingV.Core.Transport.TransportUtil.html",
    "title": "Class TransportUtil | RisingV.Core",
    "summary": "Class TransportUtil Namespace RisingV.Core.Transport Assembly RisingV.Core.dll public static class TransportUtil Inheritance object TransportUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ServerSendNotification(User, string, string, LogLevel, string) public static void ServerSendNotification(User playerCharacter, string id, string message, LogLevel severity, string colourOverride = \"\") Parameters playerCharacter User id string message string severity LogLevel colourOverride string ServerSetAction(User, string, string, string, string) public static void ServerSetAction(User playerCharacter, string group, string id, string label, string colour = \"#808080\") Parameters playerCharacter User group string id string label string colour string ServerSetBarData(User, string, string, string, float, string, ActiveState, string, string) public static void ServerSetBarData(User playerCharacter, string barGroup, string bar, string header, float progressPercentage, string tooltip, ProgressSerialisedMessage.ActiveState activeState, string colour, string change = \"\") Parameters playerCharacter User barGroup string bar string header string progressPercentage float tooltip string activeState ProgressSerialisedMessage.ActiveState colour string change string"
  },
  "api/RisingV.Core.Transport.html": {
    "href": "api/RisingV.Core.Transport.html",
    "title": "Namespace RisingV.Core.Transport | RisingV.Core",
    "summary": "Namespace RisingV.Core.Transport Classes MessageHandler TransportUtil Delegates ServerMessageHandler"
  },
  "api/RisingV.Core.Util.Helper.html": {
    "href": "api/RisingV.Core.Util.Helper.html",
    "title": "Class Helper | RisingV.Core",
    "summary": "Class Helper Namespace RisingV.Core.Util Assembly RisingV.Core.dll public class Helper Inheritance object Helper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Core.Util.UnitSpawn.html": {
    "href": "api/RisingV.Core.Util.UnitSpawn.html",
    "title": "Class UnitSpawn | RisingV.Core",
    "summary": "Class UnitSpawn Namespace RisingV.Core.Util Assembly RisingV.Core.dll public static class UnitSpawn Inheritance object UnitSpawn Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DecodeLifetime(float, out int, out int) public static bool DecodeLifetime(float lifetime, out int level, out int faction) Parameters lifetime float level int faction int Returns bool EncodeLifetime(int, int, int) public static float EncodeLifetime(int lifetime, int level, int faction) Parameters lifetime int level int faction int Returns float Spawn(Unit, float3, int, float, float, float) public static void Spawn(Unit type, float3 position, int count, float minRange, float maxRange, float lifetime) Parameters type Unit position float3 count int minRange float maxRange float lifetime float SpawnCustom(out float, string, float3, float, float, float) public static bool SpawnCustom(out float identifier, string name, float3 position, float minRange = 1, float maxRange = 2, float duration = -1) Parameters identifier float name string position float3 minRange float maxRange float duration float Returns bool"
  },
  "api/RisingV.Core.Util.html": {
    "href": "api/RisingV.Core.Util.html",
    "title": "Namespace RisingV.Core.Util | RisingV.Core",
    "summary": "Namespace RisingV.Core.Util Classes Helper UnitSpawn"
  },
  "api/RisingV.Core.html": {
    "href": "api/RisingV.Core.html",
    "title": "Namespace RisingV.Core | RisingV.Core",
    "summary": "Namespace RisingV.Core Classes Caches CorePluginContext EventBridge Also see RisingV.Shared.EventBridge EventBridge.DownedAllEvent Event triggered when an entity is downed. EventBridge.DownedBossEvent Event triggered when a boss is downed. EventBridge.DownedMinionEvent Event triggered when a minion is downed. EventBridge.DownedPlayerEvent Event triggered when a unit is downed. EventBridge.DownedUnitEvent Event triggered when a gatherable entity is downed. EventBridge.ScriptDespawnBossEvent Event triggered by scripts to despawn a boss. EventBridge.ScriptDespawnGatherableEvent Event triggered by scripts to despawn a gatherable entity. EventBridge.ScriptDespawnMinionEvent Event triggered by scripts to despawn a minion. EventBridge.ScriptDespawnPlayerEvent Event triggered by scripts to despawn a player. EventBridge.ScriptDespawnUnitEvent Event triggered by scripts to despawn a unit. EventBridge.ScriptSpawnBossEvent Event triggered by scripts to spawn a boss. EventBridge.ScriptSpawnGatherableEvent Event triggered by scripts to spawn a gatherable entity. EventBridge.ScriptSpawnMinionEvent Event triggered by scripts to spawn a minion. EventBridge.ScriptSpawnPlayerEvent Event triggered by scripts to spawn a player. EventBridge.ScriptSpawnUnitEvent Event triggered by scripts to spawn a unit. EventBridge.SpawnBossEvent Event triggered when a boss is spawned. EventBridge.SpawnGatherableEvent Event triggered when a gatherable entity is spawned. EventBridge.SpawnMinionEvent Event triggered when a minion is spawned. EventBridge.SpawnPlayerEvent Event triggered when a player is spawned. EventBridge.SpawnUnitEvent Event triggered when a unit is spawned. Global Global access point for core systems and managers. LogTags Represents a collection of log tags used throughout the RisingV.Core project. MyPluginInfo Plugin"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | RisingV.Core",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | RisingV.Core",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "RisingV.Core | RisingV.Core",
    "summary": "RisingV.Core RisingV.Core is a core mod for V Rising that allows you to use RisingV mods. It provides a set of APIs and utilities that make it easier to create and manage mods for V Rising. Resources Credits"
  }
}