{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| RisingV.Shared",
    "summary": "latest 0.1.0"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "CONTRIBUTING to RisingV | RisingV.Shared",
    "summary": "CONTRIBUTING to RisingV"
  },
  "README.html": {
    "href": "README.html",
    "title": "| RisingV.Shared",
    "summary": "Common utilities and building-blocks for every other RisingV mod. This library provides a set of APIs and utilities that make it easier to create and manage mods for V Rising. RisingV.Shared is designed to be an unopinionated library that does not depend on any other RisingV mod or game data (data that will break upon game updates), so it can be used standalone. “RisingV.Shared is a shared mod for V Rising that allows you to use RisingV mods. It provides a set of APIs and utilities that make it easier to create and manage mods for V Rising.” Features Feature Link Description Aspecting Docs An aspect wraps a target instance and exposes a tailored API for cross‑cutting concerns (validation, convenience methods, helper logic, etc.) while preserving the original model’s purity. Event bus Docs decoupled, async pub-sub pipeline for game-wide events. Engine modules Docs modular architecture for loading/unloading systems, processors and hooks. Config base Docs hot-reloadable config manageable class with type-safe access. Custom collections Docs generic collections like TypeKeyedMap<T>, TimestampedMap<K,V>, etc. Database abstraction Docs a database API for storing and retrieving data, with support for JSON or Maps. Comprehensive extensions Docs Class extensions for common operations on Entity, collections, strings, and more. File system observers Docs watch for file changes with a simple API. Manager abstraction Docs a base class for managing game objects with automatic object management with a lifecycle. Plugin base API Docs a base class for creating BepInEx plugins with a managed lifecycle. Processor system Docs a high-level abstraction for processing game objects/events in a type-safe manner. Strings and localization Docs a simple string localization system with support for multiple languages. Systems Docs a high-level abstraction for creating and managing systems for use in RisingV mods. Logging facade Docs a unified logging interface with support for tagging and levels. Utilities Docs various utility classes for common tasks. Note: This may not be the entire list—refer to the API docs for every class, interface, and extension method that RisingV.Shared provides. Installation dotnet add package RisingV.Shared Prerequisites V Rising (vanilla game/dedicated server installed) BepInEx (version compatible with your V Rising installation) Build/Download Clone or download the latest RisingV.Shared.<version>.zip from the Releases. Deploy Extract the zip file to your /BepInEx directory. Quick start // Added to your plugin class [BepInDependency(\"RisingV.Shared\")] Configurations RisingV.Shared.Config has a base class configuration management class BaseConfig. This allows you to define your plugin's configuration in a type-safe manner, with support for hot-reloading and easy access to configuration values. It also means that majority of the systems/components in the RisingV ecosystem can be configured via json files. BepInEx/configs └── RisingV.Shared └── RisingV.Shared.cfg Documentation For a deeper dive, API reference, and design docs see https://docs.risingv.dev/shared. Contributing PRs that add new functionality—or improve existing ones—are warmly welcomed. Please open an issue first if you plan a large refactor. See CONTRIBUTING.md for more information. Community Join the V Rising Mod Community Discord for modding support, updates, and discussions! License GNU GPL-3.0. See LICENSE for details."
  },
  "api/RisingV.Shared.Application.html": {
    "href": "api/RisingV.Shared.Application.html",
    "title": "Class Application | RisingV.Shared",
    "summary": "Class Application Namespace RisingV.Shared Assembly RisingV.Shared.dll Represents the application state and provides access to various systems and managers within the RisingV game. public static class Application Inheritance object Application Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClaimAchievementSystem Gets the ClaimAchievementSystem system, which handles the claiming of achievements within the game. public static ClaimAchievementSystem ClaimAchievementSystem { get; } Property Value ClaimAchievementSystem DebugEventsSystem Gets the DebugEventsSystem system, which handles debug events within the game. public static DebugEventsSystem DebugEventsSystem { get; } Property Value DebugEventsSystem DumpUnqualifiedAspectEntities Indicates whether the application should dump unqualified aspect entities. public static bool DumpUnqualifiedAspectEntities { get; } Property Value bool EndSimECBSystem Gets the Unity.Entities.EndSimulationEntityCommandBufferSystem system, which processes commands at the end of the simulation step in the game world. public static EndSimulationEntityCommandBufferSystem EndSimECBSystem { get; } Property Value EndSimulationEntityCommandBufferSystem EntityCommandBufferSystem Gets the EntityCommandBufferSystem system, which allows for deferred execution of entity commands in the game world. public static EntityCommandBufferSystem EntityCommandBufferSystem { get; } Property Value EntityCommandBufferSystem EntityManager The entity manager for managing entities within the current world. public static EntityManager EntityManager { get; } Property Value EntityManager EventBus Application event bus for managing events within the RisingV framework. public static ManagedEventBus EventBus { get; } Property Value ManagedEventBus GameDataSystem Gets the GameDataSystem system, which provides access to game data and configurations. public static GameDataSystem GameDataSystem { get; } Property Value GameDataSystem InternalSystems The internal systems used by the RisingV framework, providing access to various game systems. public static InternalSystems InternalSystems { get; } Property Value InternalSystems IsClient Indicates whether the application is running as a client (not a server). public static bool IsClient { get; } Property Value bool IsClientWorld Indicates whether the current world is a client world. public static bool IsClientWorld { get; } Property Value bool IsDevelopmentMode Indicates whether the application is running in development mode. public static bool IsDevelopmentMode { get; } Property Value bool IsInitialized Indicates whether the application has been initialized. public static bool IsInitialized { get; set; } Property Value bool IsLoaded Indicates whether the application has been fully loaded and is ready for use. public static bool IsLoaded { get; set; } Property Value bool IsServer Indicates whether the application is running as a server or a client. public static bool IsServer { get; } Property Value bool IsServerWorld Indicates whether the current world is a server world. public static bool IsServerWorld { get; } Property Value bool PrefabCollectionSystem Gets the PrefabCollectionSystem system, which manages prefabs and their associated data within the game world. public static PrefabCollectionSystem PrefabCollectionSystem { get; } Property Value PrefabCollectionSystem PrefabLookupMap Gets the PrefabLookupMap system, which provides a mapping of prefab GUIDs to their corresponding entities in the game world. public static PrefabLookupMap PrefabLookupMap { get; } Property Value PrefabLookupMap ServerGameManager Gets the ServerGameManager system, which manages the game state and interactions on the server side. public static ServerGameManager ServerGameManager { get; } Property Value ServerGameManager ServerScriptMapper Gets the ServerScriptMapper system, which maps server scripts to their corresponding game managers and systems. public static ServerScriptMapper ServerScriptMapper { get; } Property Value ServerScriptMapper TileModelSpatialLookup Gets the Unity.Entities.Entity system specific to tile models, which manages spatial lookups for tile models in the game world. public static Entity TileModelSpatialLookup { get; } Property Value Entity World The world instance representing the current game world. public static World World { get; } Property Value World"
  },
  "api/RisingV.Shared.Aspects.BaseAspect-1.html": {
    "href": "api/RisingV.Shared.Aspects.BaseAspect-1.html",
    "title": "Class BaseAspect<T> | RisingV.Shared",
    "summary": "Class BaseAspect<T> Namespace RisingV.Shared.Aspects Assembly RisingV.Shared.dll Base class for aspects that operate on a specific type of entity. See IAspect for more details on aspects. public abstract class BaseAspect<T> : IAspect<T>, IAspect Type Parameters T Inheritance object BaseAspect<T> Implements IAspect<T> IAspect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BaseAspect(IAspect<T>, bool) Initializes a new instance of the BaseAspect<T> class with another aspect as the base. protected BaseAspect(IAspect<T> aspect, bool strict = true) Parameters aspect IAspect<T> The aspect to base this instance on. strict bool If true, throws an exception if the target does not qualify for the aspect. BaseAspect(T, bool) Initializes a new instance of the BaseAspect<T> class with the specified target object. protected BaseAspect(T obj, bool strict = true) Parameters obj T Target object to apply the aspect to. strict bool If true, throws an exception if the target does not qualify for the aspect. Properties DumpUnqualifiedTargets public static bool DumpUnqualifiedTargets { get; } Property Value bool EntityManager protected EntityManager EntityManager { get; } Property Value EntityManager IsEntity Indicates whether this aspect is an entity aspect. public virtual bool IsEntity { get; } Property Value bool IsEquipment Indicates whether this aspect is an equipment aspect. public virtual bool IsEquipment { get; } Property Value bool Log protected virtual Logger Log { get; } Property Value Logger MetaSerializer Serializer for metadata associated with this aspect. public IMetaSerializer MetaSerializer { get; set; } Property Value IMetaSerializer Strict public bool Strict { get; set; } Property Value bool Target The wrapped object this aspect operates on. public T Target { get; } Property Value T World public World World { get; } Property Value World Methods As<TX>(bool, params object?[]?) Converts this aspect to a specific type TX if it qualifies. public TX As<TX>(bool strict = true, params object?[]? args) where TX : IAspect Parameters strict bool args object[] Returns TX Type Parameters TX Exceptions InvalidOperationException Create<TX>(T, bool, params object?[]?) Creates an instance of the aspect for the specified target object. public static TX Create<TX>(T target, bool strict = true, params object?[]? args) where TX : class, IAspect Parameters target T Target object to apply the aspect to. strict bool If true, throws an exception if the target does not qualify for the aspect. args object[] Optional additional arguments to pass to the aspect constructor. Returns TX An instance of the aspect type TX. Type Parameters TX Type of the aspect to create, must implement IAspect. DisplayName() Returns a display name for the target object. public virtual string DisplayName() Returns string DisplayName(T) Returns a display name for the target object. protected virtual string DisplayName(T obj) Parameters obj T Returns string DumpUnqualifiedTarget(T, string) protected virtual void DumpUnqualifiedTarget(T obj, string errorMessage) Parameters obj T errorMessage string ExtraDetails(T) Returns additional details about the target object, which can be used in logging or error messages. protected virtual string ExtraDetails(T obj) Parameters obj T Returns string GetRawMetadata() Gets the raw metadata for this aspect, must be overridden to add support. protected virtual string GetRawMetadata() Returns string Exceptions NotImplementedException Initialize(T) Initializes the aspect with the target object. protected void Initialize(T obj) Parameters obj T Exceptions Exception OnUnqualifiedTarget(T, string) Called when the target object does not qualify for this aspect. protected virtual void OnUnqualifiedTarget(T obj, string errorMessage) Parameters obj T errorMessage string Qualifies(T) Determines if the target object qualifies for this aspect. public abstract bool Qualifies(T obj) Parameters obj T Returns bool ReadMetadata<TData>() Reads metadata of type TData from the aspect's raw metadata. public virtual TData? ReadMetadata<TData>() where TData : struct Returns TData? Type Parameters TData SetRawMetadata(string) Sets the raw metadata for this aspect, must be overridden to add support. protected virtual void SetRawMetadata(string json) Parameters json string Exceptions NotImplementedException UnqualifiedTargetError(T, string?) Throws an exception indicating that the target object does not qualify for this aspect. protected Exception UnqualifiedTargetError(T obj, string? message = null) Parameters obj T message string Returns Exception Exceptions UnqualifiedTargetException UnqualifiedTargetMessage(T) Generates a default error message when the target object does not qualify for this aspect. protected virtual string UnqualifiedTargetMessage(T obj) Parameters obj T Returns string WriteMetadata<TData>(TData) Writes metadata of type TData to the aspect's raw metadata. public virtual string WriteMetadata<TData>(TData data) where TData : struct Parameters data TData Returns string Type Parameters TData"
  },
  "api/RisingV.Shared.Aspects.Exceptions.UnqualifiedTargetException.html": {
    "href": "api/RisingV.Shared.Aspects.Exceptions.UnqualifiedTargetException.html",
    "title": "Class UnqualifiedTargetException | RisingV.Shared",
    "summary": "Class UnqualifiedTargetException Namespace RisingV.Shared.Aspects.Exceptions Assembly RisingV.Shared.dll Exception thrown when a target is not qualified as an aspect. public class UnqualifiedTargetException : BaseException, ISerializable Inheritance object Exception BaseException UnqualifiedTargetException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors UnqualifiedTargetException(object?) public UnqualifiedTargetException(object? target) Parameters target object UnqualifiedTargetException(string, Exception, object?) public UnqualifiedTargetException(string message, Exception innerException, object? target) Parameters message string innerException Exception target object UnqualifiedTargetException(string, object?) public UnqualifiedTargetException(string message, object? target) Parameters message string target object Properties Target public object? Target { get; } Property Value object"
  },
  "api/RisingV.Shared.Aspects.Exceptions.html": {
    "href": "api/RisingV.Shared.Aspects.Exceptions.html",
    "title": "Namespace RisingV.Shared.Aspects.Exceptions | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Aspects.Exceptions Classes UnqualifiedTargetException Exception thrown when a target is not qualified as an aspect."
  },
  "api/RisingV.Shared.Aspects.IAspect-1.html": {
    "href": "api/RisingV.Shared.Aspects.IAspect-1.html",
    "title": "Interface IAspect<T> | RisingV.Shared",
    "summary": "Interface IAspect<T> Namespace RisingV.Shared.Aspects Assembly RisingV.Shared.dll Base contract for a strongly-typed aspect. public interface IAspect<T> : IAspect Type Parameters T The compile-time type of object this aspect can wrap (e.g. Entity, Equipment, plain Character DTO, …). Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Target The wrapped object this aspect operates on. T Target { get; } Property Value T Methods Qualifies(T) Returns true if entity satisfies the structural and semantic requirements of this aspect (components present, tags set, valid state, etc.). bool Qualifies(T entity) Parameters entity T Returns bool"
  },
  "api/RisingV.Shared.Aspects.IAspect.html": {
    "href": "api/RisingV.Shared.Aspects.IAspect.html",
    "title": "Interface IAspect | RisingV.Shared",
    "summary": "Interface IAspect Namespace RisingV.Shared.Aspects Assembly RisingV.Shared.dll Aspect (a.k.a. Aspecting) is the pattern this SDK uses to give a domain object or ECS entity one or more typed views without polluting the underlying model with cross-cutting concerns. An aspect is: • a zero-allocation façade created on demand over an existing object • strongly-typed – each concrete aspect advertises the exact type it can wrap • qualifiable – construction calls Qualifies so the instance only represents objects that meet the aspect’s contract • side effect free – it never owns the data; it merely exposes convenience helpers, computed state, or thin write-through setters. Use As<TAspect>() (see BaseAspect.As) to obtain a richer API for a target if that target qualifies. When the strict flag is true, a non-qualifying target throws UnqualifiedTargetException; otherwise the instance logs a warning and remains inert. Aspects keep the core model clean, promote single-responsibility, and give you fluent, discoverable syntax such as: var unit = entity.As<UnitAspect>(); // throws if entity is not a unit unit.AddHealth(-10); Or in a less strict mode: var unit = entity.As<UnitAspect>(false); // warns if entity is not a unit, but returns null unit?.AddHealth(-10); public interface IAspect Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Aspects.Meta.IMetaSerializer.html": {
    "href": "api/RisingV.Shared.Aspects.Meta.IMetaSerializer.html",
    "title": "Interface IMetaSerializer | RisingV.Shared",
    "summary": "Interface IMetaSerializer Namespace RisingV.Shared.Aspects.Meta Assembly RisingV.Shared.dll Interface for serializing and deserializing metadata. public interface IMetaSerializer Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Deserialize<TData>(string) TData? Deserialize<TData>(string json) Parameters json string Returns TData Type Parameters TData Serialize(object) string Serialize(object data) Parameters data object Returns string"
  },
  "api/RisingV.Shared.Aspects.Meta.MetaSerializer.html": {
    "href": "api/RisingV.Shared.Aspects.Meta.MetaSerializer.html",
    "title": "Class MetaSerializer | RisingV.Shared",
    "summary": "Class MetaSerializer Namespace RisingV.Shared.Aspects.Meta Assembly RisingV.Shared.dll Default implementation of IMetaSerializer using JSON serialization. public class MetaSerializer : IMetaSerializer Inheritance object MetaSerializer Implements IMetaSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Deserialize<TData>(string) public TData? Deserialize<TData>(string json) Parameters json string Returns TData Type Parameters TData Serialize(object) public string Serialize(object data) Parameters data object Returns string"
  },
  "api/RisingV.Shared.Aspects.Meta.html": {
    "href": "api/RisingV.Shared.Aspects.Meta.html",
    "title": "Namespace RisingV.Shared.Aspects.Meta | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Aspects.Meta Classes MetaSerializer Default implementation of IMetaSerializer using JSON serialization. Interfaces IMetaSerializer Interface for serializing and deserializing metadata."
  },
  "api/RisingV.Shared.Aspects.html": {
    "href": "api/RisingV.Shared.Aspects.html",
    "title": "Namespace RisingV.Shared.Aspects | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Aspects Namespaces RisingV.Shared.Aspects.Exceptions RisingV.Shared.Aspects.Meta Classes BaseAspect<T> Base class for aspects that operate on a specific type of entity. See IAspect for more details on aspects. Interfaces IAspect Aspect (a.k.a. Aspecting) is the pattern this SDK uses to give a domain object or ECS entity one or more typed views without polluting the underlying model with cross-cutting concerns. An aspect is: • a zero-allocation façade created on demand over an existing object • strongly-typed – each concrete aspect advertises the exact type it can wrap • qualifiable – construction calls Qualifies so the instance only represents objects that meet the aspect’s contract • side effect free – it never owns the data; it merely exposes convenience helpers, computed state, or thin write-through setters. Use As<TAspect>() (see BaseAspect.As) to obtain a richer API for a target if that target qualifies. When the strict flag is true, a non-qualifying target throws UnqualifiedTargetException; otherwise the instance logs a warning and remains inert. Aspects keep the core model clean, promote single-responsibility, and give you fluent, discoverable syntax such as: var unit = entity.As<UnitAspect>(); // throws if entity is not a unit unit.AddHealth(-10); Or in a less strict mode: var unit = entity.As<UnitAspect>(false); // warns if entity is not a unit, but returns null unit?.AddHealth(-10); IAspect<T> Base contract for a strongly-typed aspect."
  },
  "api/RisingV.Shared.Bootstrap.html": {
    "href": "api/RisingV.Shared.Bootstrap.html",
    "title": "Class Bootstrap | RisingV.Shared",
    "summary": "Class Bootstrap Namespace RisingV.Shared Assembly RisingV.Shared.dll public static class Bootstrap Inheritance object Bootstrap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Configurations Static reference to the plugin configurations manager. public static PluginConfigManager Configurations { get; } Property Value PluginConfigManager Plugin Static reference to the Bootstrap plugin instance. public static IPlugin<BootstrapPluginContext> Plugin { get; } Property Value IPlugin<BootstrapPluginContext> PluginManager Static reference to the PluginManager instance. public static PluginManager PluginManager { get; } Property Value PluginManager ProxyPlugins Static reference to the proxy plugins map. public static Map<string, IPlugin> ProxyPlugins { get; } Property Value Map<string, IPlugin> SharedComponents Static reference to the shared component's manager. public static PluginComponentsManager SharedComponents { get; } Property Value PluginComponentsManager Methods AddSharedComponent<T>(IPlugin, bool) Adds a shared component of the specified type to the plugin's shared components. public static T? AddSharedComponent<T>(IPlugin plugin, bool failIfExists = true) where T : class, IPluginComponent Parameters plugin IPlugin The plugin that owns the shared component. failIfExists bool Throw an exception if the shared component already exists. Default: true Returns T Returns the added shared component of the specified type, or null if it could not be added. Type Parameters T The type of the shared component to add. Must implement IPluginComponent. AddSharedComponent<T>(IPlugin, T, bool) Adds a shared component of the specified type to the plugin's shared components. public static void AddSharedComponent<T>(IPlugin plugin, T obj, bool failIfExists = true) where T : class, IPluginComponent Parameters plugin IPlugin The plugin that owns the shared component. obj T The shared component instance to add. failIfExists bool Throw an exception if the shared component already exists. Default: true Type Parameters T The type of the shared component to add. Must implement IPluginComponent. GetSharedComponent(Type) Gets a shared component of the specified type from the plugin's shared components. public static IPluginComponent? GetSharedComponent(Type type) Parameters type Type The type of the shared component to retrieve. Returns IPluginComponent Returns the shared component of the specified type, or null if it does not exist. Exceptions AccessViolationException Thrown if the plugin is not initialized when trying to get a shared component. GetSharedComponent<TX>() Gets a shared component of the specified type from the plugin's shared components. public static TX? GetSharedComponent<TX>() where TX : class, IPluginComponent Returns TX Returns the shared component of the specified type, or null if it does not exist. Type Parameters TX The type of the shared component to retrieve. Must implement IPluginComponent. Exceptions AccessViolationException Thrown if the plugin is not initialized when trying to get a shared component. Load(IPlugin?) public static void Load(IPlugin? plugin = null) Parameters plugin IPlugin Load(string, string, string, Action<IPlugin>) public static IPlugin Load(string pluginGuid, string pluginName, string pluginVersion, Action<IPlugin> onLoading) Parameters pluginGuid string pluginName string pluginVersion string onLoading Action<IPlugin> Returns IPlugin OnGameDataInitialized(OnGameDataInitializedEvent) Called when the game data is initialized. This method is triggered by the EventBridge.OnGameDataInitializedEvent. public static void OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent @event) Parameters event EventBridge.OnGameDataInitializedEvent The event containing the initialized game data. OnPluginsInitializing(OnPluginsInitializingEvent, IPlugin) public static void OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent @event, IPlugin plugin) Parameters event EventBridge.OnPluginsInitializingEvent plugin IPlugin OnPluginsLoaded(OnPluginsLoadedEvent, IPlugin) public static void OnPluginsLoaded(EventBridge.OnPluginsLoadedEvent @event, IPlugin plugin) Parameters event EventBridge.OnPluginsLoadedEvent plugin IPlugin OnPluginsLoading(OnPluginsLoadingEvent, IPlugin) public static void OnPluginsLoading(EventBridge.OnPluginsLoadingEvent @event, IPlugin plugin) Parameters event EventBridge.OnPluginsLoadingEvent plugin IPlugin Reload(IPlugin?) public static void Reload(IPlugin? plugin = null) Parameters plugin IPlugin Unload(IPlugin?) Unloads the plugin, unregistering events and cleaning up resources. public static void Unload(IPlugin? plugin = null) Parameters plugin IPlugin"
  },
  "api/RisingV.Shared.BootstrapPlugin.html": {
    "href": "api/RisingV.Shared.BootstrapPlugin.html",
    "title": "Class BootstrapPlugin | RisingV.Shared",
    "summary": "Class BootstrapPlugin Namespace RisingV.Shared Assembly RisingV.Shared.dll public class BootstrapPlugin : RisingSharedPlugin<BootstrapPluginContext>, IPlugin<BootstrapPluginContext>, IPlugin, IManageable<PluginManager>, IReloadable<PluginManager>, IReloadable, IDisposable, IHasPluginContext<BootstrapPluginContext>, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object RisingPluginBase RisingSharedPlugin<BootstrapPluginContext> BootstrapPlugin Implements IPlugin<BootstrapPluginContext> IPlugin IManageable<PluginManager> IReloadable<PluginManager> IReloadable IDisposable IHasPluginContext<BootstrapPluginContext> IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members RisingSharedPlugin<BootstrapPluginContext>.Get() RisingSharedPlugin<BootstrapPluginContext>.Get<TX>() RisingSharedPlugin<BootstrapPluginContext>.Context RisingSharedPlugin<BootstrapPluginContext>.OnPluginsLoaded(EventBridge.OnPluginsLoadedEvent) RisingPluginBase.PluginInfo RisingPluginBase.PluginConfig RisingPluginBase.PluginTarget RisingPluginBase.Harmony RisingPluginBase.EventBus RisingPluginBase.SystemManager RisingPluginBase.ProcessorManager RisingPluginBase.DatabaseManager RisingPluginBase.EngineManager RisingPluginBase.Composites RisingPluginBase.Log RisingPluginBase.OnPreLoad() RisingPluginBase.OnInitialize() RisingPluginBase.OnLoad() RisingPluginBase.OnUnload() RisingPluginBase.Load() RisingPluginBase.OnReload(IManager, List<IPlugin>, ReloadReason) RisingPluginBase.Unload() RisingPluginBase.OnReload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, ReloadReason) RisingPluginBase.OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent) RisingPluginBase.OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent) RisingPluginBase.OnPluginsLoading(EventBridge.OnPluginsLoadingEvent) RisingPluginBase.SetupConfiguration(PluginConfig) RisingPluginBase.SetupSharedEventBus(ManagedEventBus) RisingPluginBase.GetSharedComponent(Type) RisingPluginBase.GetSharedComponent<TX>() RisingPluginBase.AddSharedComponent<T>(IPlugin, bool) RisingPluginBase.AddSharedComponent<T>(IPlugin, T, bool) RisingPluginBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BootstrapPlugin(string, string?, string?, string?) public BootstrapPlugin(string pluginGuid, string? pluginName = null, string? pluginVersion = null, string? configRelativePath = null) Parameters pluginGuid string pluginName string pluginVersion string configRelativePath string"
  },
  "api/RisingV.Shared.BootstrapPluginContext.html": {
    "href": "api/RisingV.Shared.BootstrapPluginContext.html",
    "title": "Class BootstrapPluginContext | RisingV.Shared",
    "summary": "Class BootstrapPluginContext Namespace RisingV.Shared Assembly RisingV.Shared.dll public class BootstrapPluginContext : PluginContext, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object PluginContext BootstrapPluginContext Implements IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members PluginContext.PluginInfo PluginContext.PluginConfig PluginContext.Harmony PluginContext.PluginTarget object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BootstrapPluginContext(string, string?, string?, string?) public BootstrapPluginContext(string pluginGuid, string? pluginName = null, string? pluginVersion = null, string? configRelativePath = null) Parameters pluginGuid string pluginName string pluginVersion string configRelativePath string"
  },
  "api/RisingV.Shared.Caches.html": {
    "href": "api/RisingV.Shared.Caches.html",
    "title": "Class Caches | RisingV.Shared",
    "summary": "Class Caches Namespace RisingV.Shared Assembly RisingV.Shared.dll Provides a collection of caches used throughout the application. (Not currently used) public class Caches Inheritance object Caches Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Collections.Concurrent.ConcurrentMap-2.html": {
    "href": "api/RisingV.Shared.Collections.Concurrent.ConcurrentMap-2.html",
    "title": "Class ConcurrentMap<TKey, TValue> | RisingV.Shared",
    "summary": "Class ConcurrentMap<TKey, TValue> Namespace RisingV.Shared.Collections.Concurrent Assembly RisingV.Shared.dll Represents a thread-safe map (dictionary) that allows concurrent access. public class ConcurrentMap<TKey, TValue> : ConcurrentDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IMap<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IMap, IDictionary, ICollection, IEnumerable where TKey : notnull Type Parameters TKey TValue Inheritance object ConcurrentDictionary<TKey, TValue> ConcurrentMap<TKey, TValue> Implements IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IMap<TKey, TValue> IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IMap IDictionary ICollection IEnumerable Inherited Members ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>) ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg) ConcurrentDictionary<TKey, TValue>.Clear() ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey) ConcurrentDictionary<TKey, TValue>.GetEnumerator() ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, Func<TKey, TValue>) ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue) ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, TValue>, TArg) ConcurrentDictionary<TKey, TValue>.ToArray() ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue) ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) ConcurrentDictionary<TKey, TValue>.TryRemove(KeyValuePair<TKey, TValue>) ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue) ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue) ConcurrentDictionary<TKey, TValue>.Comparer ConcurrentDictionary<TKey, TValue>.Count ConcurrentDictionary<TKey, TValue>.IsEmpty ConcurrentDictionary<TKey, TValue>.this[TKey] ConcurrentDictionary<TKey, TValue>.Keys ConcurrentDictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.IsEmpty<T>(IEnumerable<T>) EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>?) EnumerableExtensions.PrependRange<T>(IEnumerable<T>, IEnumerable<T>) EnumerableExtensions.ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) EnumerableExtensions.ShuffleToList<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, string) EntityExtensions.IsAspect<TAspect>(object) Constructors ConcurrentMap() public ConcurrentMap() ConcurrentMap(IEnumerable<KeyValuePair<TKey, TValue>>) public ConcurrentMap(IEnumerable<KeyValuePair<TKey, TValue>> collection) Parameters collection IEnumerable<KeyValuePair<TKey, TValue>> ConcurrentMap(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) public ConcurrentMap(IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey>? comparer) Parameters collection IEnumerable<KeyValuePair<TKey, TValue>> comparer IEqualityComparer<TKey> ConcurrentMap(IEqualityComparer<TKey>?) public ConcurrentMap(IEqualityComparer<TKey>? comparer) Parameters comparer IEqualityComparer<TKey> ConcurrentMap(int, IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>?) public ConcurrentMap(int concurrencyLevel, IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey>? comparer) Parameters concurrencyLevel int collection IEnumerable<KeyValuePair<TKey, TValue>> comparer IEqualityComparer<TKey> ConcurrentMap(int, int) public ConcurrentMap(int concurrencyLevel, int capacity) Parameters concurrencyLevel int capacity int ConcurrentMap(int, int, IEqualityComparer<TKey>?) public ConcurrentMap(int concurrencyLevel, int capacity, IEqualityComparer<TKey>? comparer) Parameters concurrencyLevel int capacity int comparer IEqualityComparer<TKey>"
  },
  "api/RisingV.Shared.Collections.Concurrent.html": {
    "href": "api/RisingV.Shared.Collections.Concurrent.html",
    "title": "Namespace RisingV.Shared.Collections.Concurrent | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Collections.Concurrent Classes ConcurrentMap<TKey, TValue> Represents a thread-safe map (dictionary) that allows concurrent access."
  },
  "api/RisingV.Shared.Collections.IMap-2.html": {
    "href": "api/RisingV.Shared.Collections.IMap-2.html",
    "title": "Interface IMap<TKey, TValue> | RisingV.Shared",
    "summary": "Interface IMap<TKey, TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll Represents a generic map interface that extends IDictionary with specific key and value types. public interface IMap<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters TKey TValue Inherited Members IDictionary<TKey, TValue>.Add(TKey, TValue) IDictionary<TKey, TValue>.ContainsKey(TKey) IDictionary<TKey, TValue>.Remove(TKey) IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) IDictionary<TKey, TValue>.this[TKey] IDictionary<TKey, TValue>.Keys IDictionary<TKey, TValue>.Values ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>) ICollection<KeyValuePair<TKey, TValue>>.Clear() ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>) ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], int) ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>) ICollection<KeyValuePair<TKey, TValue>>.Count ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.IsEmpty<T>(IEnumerable<T>) EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>?) EnumerableExtensions.PrependRange<T>(IEnumerable<T>, IEnumerable<T>) EnumerableExtensions.ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) EnumerableExtensions.ShuffleToList<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, string) EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Collections.IMap.html": {
    "href": "api/RisingV.Shared.Collections.IMap.html",
    "title": "Interface IMap | RisingV.Shared",
    "summary": "Interface IMap Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll Represents a generic map interface that extends IDictionary. public interface IMap : IDictionary, ICollection, IEnumerable Inherited Members IDictionary.Add(object, object) IDictionary.Clear() IDictionary.Contains(object) IDictionary.GetEnumerator() IDictionary.Remove(object) IDictionary.IsFixedSize IDictionary.IsReadOnly IDictionary.this[object] IDictionary.Keys IDictionary.Values ICollection.CopyTo(Array, int) ICollection.Count ICollection.IsSynchronized ICollection.SyncRoot Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Collections.LazyMap-2.html": {
    "href": "api/RisingV.Shared.Collections.LazyMap-2.html",
    "title": "Class LazyMap<TKey, TValue> | RisingV.Shared",
    "summary": "Class LazyMap<TKey, TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll A map that lazily initializes values when accessed. public class LazyMap<TKey, TValue> : Map<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IDeserializationCallback, ISerializable, IMap<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IMap, IDictionary, ICollection, IEnumerable where TKey : notnull Type Parameters TKey TValue Inheritance object Dictionary<TKey, TValue> Map<TKey, TValue> LazyMap<TKey, TValue> Implements IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IDeserializationCallback ISerializable IMap<TKey, TValue> IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IMap IDictionary ICollection IEnumerable Inherited Members Map<TKey, TValue>.Keys Map<TKey, TValue>.Values Map<TKey, TValue>.ToString() Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.this[TKey] Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictionaryExtensions.ToMap<TSource, TKey>(Dictionary<TKey, TSource>, Func<TSource, TKey>) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.IsEmpty<T>(IEnumerable<T>) EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>?) EnumerableExtensions.PrependRange<T>(IEnumerable<T>, IEnumerable<T>) EnumerableExtensions.ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) EnumerableExtensions.ShuffleToList<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, string) EntityExtensions.IsAspect<TAspect>(object) Properties this[TKey] public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods TryRemove(TKey, out TValue?) public bool TryRemove(TKey key, out TValue? value) Parameters key TKey value TValue Returns bool"
  },
  "api/RisingV.Shared.Collections.Map-2.html": {
    "href": "api/RisingV.Shared.Collections.Map-2.html",
    "title": "Class Map<TKey, TValue> | RisingV.Shared",
    "summary": "Class Map<TKey, TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll Represents a generic map that extends Dictionary with specific key and value types. public class Map<TKey, TValue> : Dictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IDeserializationCallback, ISerializable, IMap<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IMap, IDictionary, ICollection, IEnumerable where TKey : notnull Type Parameters TKey TValue Inheritance object Dictionary<TKey, TValue> Map<TKey, TValue> Implements IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IDeserializationCallback ISerializable IMap<TKey, TValue> IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IMap IDictionary ICollection IEnumerable Derived LazyMap<TKey, TValue> Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.this[TKey] Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DictionaryExtensions.ToMap<TSource, TKey>(Dictionary<TKey, TSource>, Func<TSource, TKey>) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.IsEmpty<T>(IEnumerable<T>) EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>?) EnumerableExtensions.PrependRange<T>(IEnumerable<T>, IEnumerable<T>) EnumerableExtensions.ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) EnumerableExtensions.ShuffleToList<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, string) EntityExtensions.IsAspect<TAspect>(object) Constructors Map() public Map() Map(IDictionary<TKey, TValue>) public Map(IDictionary<TKey, TValue> dictionary) Parameters dictionary IDictionary<TKey, TValue> Map(IDictionary<TKey, TValue>, IEqualityComparer<TKey>) public Map(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer) Parameters dictionary IDictionary<TKey, TValue> comparer IEqualityComparer<TKey> Map(IEnumerable<KeyValuePair<TKey, TValue>>) public Map(IEnumerable<KeyValuePair<TKey, TValue>> collection) Parameters collection IEnumerable<KeyValuePair<TKey, TValue>> Map(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>) public Map(IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer) Parameters collection IEnumerable<KeyValuePair<TKey, TValue>> comparer IEqualityComparer<TKey> Map(IEqualityComparer<TKey>?) public Map(IEqualityComparer<TKey>? comparer) Parameters comparer IEqualityComparer<TKey> Map(int) public Map(int capacity) Parameters capacity int Map(int, IEqualityComparer<TKey>) public Map(int capacity, IEqualityComparer<TKey> comparer) Parameters capacity int comparer IEqualityComparer<TKey> Map(SerializationInfo, StreamingContext) [Obsolete(\"Obsolete\")] protected Map(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext Properties Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Shared.Collections.OrderedMap-2.html": {
    "href": "api/RisingV.Shared.Collections.OrderedMap-2.html",
    "title": "Class OrderedMap<TKey, TValue> | RisingV.Shared",
    "summary": "Class OrderedMap<TKey, TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll Represents a map that maintains the order of insertion. public class OrderedMap<TKey, TValue> : IMap<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TKey : notnull where TValue : notnull Type Parameters TKey TValue Inheritance object OrderedMap<TKey, TValue> Implements IMap<TKey, TValue> IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.IsEmpty<T>(IEnumerable<T>) EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>?) EnumerableExtensions.PrependRange<T>(IEnumerable<T>, IEnumerable<T>) EnumerableExtensions.ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) EnumerableExtensions.ShuffleToList<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, string) EntityExtensions.IsAspect<TAspect>(object) Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null."
  },
  "api/RisingV.Shared.Collections.SizedDictionaryAsync-2.html": {
    "href": "api/RisingV.Shared.Collections.SizedDictionaryAsync-2.html",
    "title": "Class SizedDictionaryAsync<TKey, TValue> | RisingV.Shared",
    "summary": "Class SizedDictionaryAsync<TKey, TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll Represents a thread-safe dictionary with a maximum size. public sealed class SizedDictionaryAsync<TKey, TValue> : ConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable where TKey : notnull Type Parameters TKey TValue Inheritance object ConcurrentDictionary<TKey, TValue> SizedDictionaryAsync<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable Inherited Members ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>) ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg) ConcurrentDictionary<TKey, TValue>.Clear() ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey) ConcurrentDictionary<TKey, TValue>.GetEnumerator() ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, Func<TKey, TValue>) ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue) ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, TValue>, TArg) ConcurrentDictionary<TKey, TValue>.ToArray() ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue) ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) ConcurrentDictionary<TKey, TValue>.TryRemove(KeyValuePair<TKey, TValue>) ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue) ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue) ConcurrentDictionary<TKey, TValue>.Comparer ConcurrentDictionary<TKey, TValue>.Count ConcurrentDictionary<TKey, TValue>.IsEmpty ConcurrentDictionary<TKey, TValue>.this[TKey] ConcurrentDictionary<TKey, TValue>.Keys ConcurrentDictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) EnumerableExtensions.ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) EnumerableExtensions.IsEmpty<T>(IEnumerable<T>) EnumerableExtensions.IsNullOrEmpty<T>(IEnumerable<T>?) EnumerableExtensions.PrependRange<T>(IEnumerable<T>, IEnumerable<T>) EnumerableExtensions.ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) EnumerableExtensions.ShuffleToList<T>(IEnumerable<T>) EnumerableExtensions.Shuffle<T>(IEnumerable<T>) EnumerableExtensions.ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) EnumerableExtensions.ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) EnumerableExtensions.ToStringBy<T>(IEnumerable<T>, string) EntityExtensions.IsAspect<TAspect>(object) Constructors SizedDictionaryAsync(int) public SizedDictionaryAsync(int size) Parameters size int Methods Add(TKey, TValue) public void Add(TKey key, TValue value) Parameters key TKey value TValue Remove(TKey) public bool Remove(TKey key) Parameters key TKey Returns bool"
  },
  "api/RisingV.Shared.Collections.TimestampedList-1.html": {
    "href": "api/RisingV.Shared.Collections.TimestampedList-1.html",
    "title": "Class TimestampedList<T> | RisingV.Shared",
    "summary": "Class TimestampedList<T> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll A thread-safe list that tracks items with timestamps. public class TimestampedList<T> Type Parameters T Inheritance object TimestampedList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Count public int Count { get; } Property Value int Items All current items (ignores timestamps). public IEnumerable<T> Items { get; } Property Value IEnumerable<T> TimedItems All items paired with their timestamps. public IEnumerable<(T Item, DateTime Timestamp)> TimedItems { get; } Property Value IEnumerable<(T Item, DateTime Timestamp)> Methods Add(T) Adds a new item stamped with the current time. public void Add(T item) Parameters item T Clear() Clears the entire list. public void Clear() GetItemsNewerThan(TimeSpan) Items newer than or equal to (now – age). public IEnumerable<T> GetItemsNewerThan(TimeSpan age) Parameters age TimeSpan Returns IEnumerable<T> GetItemsOlderThan(TimeSpan) Items older than (now – age). public IEnumerable<T> GetItemsOlderThan(TimeSpan age) Parameters age TimeSpan Returns IEnumerable<T> GetTimestamp(T) Gets the timestamp for when the item was added or last touched, or null if missing. public DateTime? GetTimestamp(T item) Parameters item T Returns DateTime? OrderByAscending() public void OrderByAscending() OrderByDescending() public void OrderByDescending() Remove(T) Removes the first matching item. public bool Remove(T item) Parameters item T Returns bool RemoveOlderThan(TimeSpan) Removes all entries older than the specified age. public void RemoveOlderThan(TimeSpan age) Parameters age TimeSpan RemoveRange(IEnumerable<T>) public void RemoveRange(IEnumerable<T> items) Parameters items IEnumerable<T> Touch(T) “Touches” an existing item, resetting its timestamp to now. public void Touch(T item) Parameters item T"
  },
  "api/RisingV.Shared.Collections.TimestampedMap-2.html": {
    "href": "api/RisingV.Shared.Collections.TimestampedMap-2.html",
    "title": "Class TimestampedMap<TKey, TValue> | RisingV.Shared",
    "summary": "Class TimestampedMap<TKey, TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll A map that associates keys with values, each stamped with a UTC timestamp. public class TimestampedMap<TKey, TValue> where TKey : notnull Type Parameters TKey TValue Inheritance object TimestampedMap<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Count public int Count { get; } Property Value int Keys All current keys. public IEnumerable<TKey> Keys { get; } Property Value IEnumerable<TKey> Values All current values (ignores timestamps). public IEnumerable<TValue> Values { get; } Property Value IEnumerable<TValue> Methods AddOrUpdate(TKey, TValue) Adds or replaces the value for the given key, stamping it with the current time. public void AddOrUpdate(TKey key, TValue value) Parameters key TKey value TValue Clear() public void Clear() GetItemsNewerThan(TimeSpan) Returns all (key, value) pairs whose timestamp is later than or equal to (now - age). public IEnumerable<KeyValuePair<TKey, TValue>> GetItemsNewerThan(TimeSpan age) Parameters age TimeSpan Returns IEnumerable<KeyValuePair<TKey, TValue>> GetItemsOlderThan(TimeSpan) Returns all (key, value) pairs whose timestamp is earlier than (now - age). public IEnumerable<KeyValuePair<TKey, TValue>> GetItemsOlderThan(TimeSpan age) Parameters age TimeSpan Returns IEnumerable<KeyValuePair<TKey, TValue>> GetTimestamp(TKey) Gets the UTC timestamp for when the key was last set or touched, or null if missing. public DateTime? GetTimestamp(TKey key) Parameters key TKey Returns DateTime? OrderByAscending() public List<TValue> OrderByAscending() Returns List<TValue> OrderByDescending() public List<TValue> OrderByDescending() Returns List<TValue> Remove(TKey) Removes an entry entirely. public bool Remove(TKey key) Parameters key TKey Returns bool RemoveOlderThan(TimeSpan) Removes all entries older than the specified age. public void RemoveOlderThan(TimeSpan age) Parameters age TimeSpan Touch(TKey) “Touches” an existing key, resetting its timestamp to now. Throws if the key is not present. public void Touch(TKey key) Parameters key TKey TryGetValue(TKey, out TValue) Attempts to get the current value (ignores timestamp). public bool TryGetValue(TKey key, out TValue value) Parameters key TKey value TValue Returns bool"
  },
  "api/RisingV.Shared.Collections.TypeKeyedMap-1.html": {
    "href": "api/RisingV.Shared.Collections.TypeKeyedMap-1.html",
    "title": "Class TypeKeyedMap<TValue> | RisingV.Shared",
    "summary": "Class TypeKeyedMap<TValue> Namespace RisingV.Shared.Collections Assembly RisingV.Shared.dll Represents a map (dictionary) that uses types as keys. public class TypeKeyedMap<TValue> Type Parameters TValue Inheritance object TypeKeyedMap<TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors TypeKeyedMap(IMap<Type, TValue>?) Represents a map (dictionary) that uses types as keys. public TypeKeyedMap(IMap<Type, TValue>? map = null) Parameters map IMap<Type, TValue> Properties Count public int Count { get; } Property Value int this[Type] public TValue this[Type type] { get; set; } Parameters type Type Property Value TValue Keys public IEnumerable<Type> Keys { get; } Property Value IEnumerable<Type> Values public IEnumerable<TValue> Values { get; } Property Value IEnumerable<TValue> Methods Add<TX>() public TX Add<TX>() where TX : TValue Returns TX Type Parameters TX Add<TX>(TX) public void Add<TX>(TX value) where TX : TValue Parameters value TX Type Parameters TX Clear() public void Clear() Contains<TX>() public bool Contains<TX>() where TX : TValue Returns bool Type Parameters TX GetOrCreate<TX>() public TX GetOrCreate<TX>() where TX : TValue Returns TX Type Parameters TX Remove<TX>() public TX Remove<TX>() where TX : TValue Returns TX Type Parameters TX TryGet<TX>(out TX?) public bool TryGet<TX>(out TX? value) where TX : TValue Parameters value TX Returns bool Type Parameters TX TryRemove<TX>() public TX? TryRemove<TX>() where TX : TValue Returns TX Type Parameters TX"
  },
  "api/RisingV.Shared.Collections.html": {
    "href": "api/RisingV.Shared.Collections.html",
    "title": "Namespace RisingV.Shared.Collections | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Collections Namespaces RisingV.Shared.Collections.Concurrent Classes LazyMap<TKey, TValue> A map that lazily initializes values when accessed. Map<TKey, TValue> Represents a generic map that extends Dictionary with specific key and value types. OrderedMap<TKey, TValue> Represents a map that maintains the order of insertion. SizedDictionaryAsync<TKey, TValue> Represents a thread-safe dictionary with a maximum size. TimestampedList<T> A thread-safe list that tracks items with timestamps. TimestampedMap<TKey, TValue> A map that associates keys with values, each stamped with a UTC timestamp. TypeKeyedMap<TValue> Represents a map (dictionary) that uses types as keys. Interfaces IMap Represents a generic map interface that extends IDictionary. IMap<TKey, TValue> Represents a generic map interface that extends IDictionary with specific key and value types."
  },
  "api/RisingV.Shared.Config.BaseConfig.html": {
    "href": "api/RisingV.Shared.Config.BaseConfig.html",
    "title": "Class BaseConfig | RisingV.Shared",
    "summary": "Class BaseConfig Namespace RisingV.Shared.Config Assembly RisingV.Shared.dll Base class for configuration management. public abstract class BaseConfig : IConfig Inheritance object BaseConfig Implements IConfig Derived FeatureConfig PluginConfig SystemConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BaseConfig(string?, string?) protected BaseConfig(string? configFileName = null, string? configRelativePath = null) Parameters configFileName string configRelativePath string Properties ConfigFile public ConfigFile? ConfigFile { get; } Property Value ConfigFile ConfigFileName public string? ConfigFileName { get; } Property Value string ConfigRelativePath public string? ConfigRelativePath { get; } Property Value string ConfigsToLoad protected List<ConfigEntryInfo> ConfigsToLoad { get; } Property Value List<ConfigEntryInfo> Enabled public ConfigEntry<bool>? Enabled { get; } Property Value ConfigEntry<bool> Log protected abstract Logger Log { get; } Property Value Logger Methods Bind<T>(string, string, T, string?) protected virtual ConfigEntry<T>? Bind<T>(string section, string key, T defaultValue, string? description = null) Parameters section string key string defaultValue T description string Returns ConfigEntry<T> Type Parameters T GetEntry<T>(string, string) protected virtual ConfigEntry<T>? GetEntry<T>(string section, string key) Parameters section string key string Returns ConfigEntry<T> Type Parameters T GetValue<T>(string, string, T?) protected virtual T? GetValue<T>(string section, string key, T? defaultValue = default) Parameters section string key string defaultValue T Returns T Type Parameters T Initialize() public virtual void Initialize() Load() public virtual void Load() Ready() public virtual void Ready() Reload(ReloadReason) public virtual void Reload(ReloadReason reason) Parameters reason ReloadReason Start() public virtual void Start() Terminate() public virtual void Terminate() Unload() public void Unload()"
  },
  "api/RisingV.Shared.Config.ConfigEntryInfo.html": {
    "href": "api/RisingV.Shared.Config.ConfigEntryInfo.html",
    "title": "Class ConfigEntryInfo | RisingV.Shared",
    "summary": "Class ConfigEntryInfo Namespace RisingV.Shared.Config Assembly RisingV.Shared.dll Represents a configuration entry with its section, key, default value, and description. public record ConfigEntryInfo : IEquatable<ConfigEntryInfo> Inheritance object ConfigEntryInfo Implements IEquatable<ConfigEntryInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ConfigEntryInfo(string, string, object?, string?) Represents a configuration entry with its section, key, default value, and description. public ConfigEntryInfo(string Section, string Key, object? DefaultValue, string? Description) Parameters Section string Key string DefaultValue object Description string Properties DefaultValue public object? DefaultValue { get; init; } Property Value object Description public string? Description { get; init; } Property Value string Key public string Key { get; init; } Property Value string Section public string Section { get; init; } Property Value string"
  },
  "api/RisingV.Shared.Config.IConfig.html": {
    "href": "api/RisingV.Shared.Config.IConfig.html",
    "title": "Interface IConfig | RisingV.Shared",
    "summary": "Interface IConfig Namespace RisingV.Shared.Config Assembly RisingV.Shared.dll Interface for configuration management. public interface IConfig Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ConfigFile ConfigFile? ConfigFile { get; } Property Value ConfigFile ConfigFileName string? ConfigFileName { get; } Property Value string ConfigRelativePath string? ConfigRelativePath { get; } Property Value string Methods Initialize() void Initialize() Load() void Load() Ready() void Ready() Reload(ReloadReason) void Reload(ReloadReason reason) Parameters reason ReloadReason Terminate() void Terminate() Unload() void Unload()"
  },
  "api/RisingV.Shared.Config.html": {
    "href": "api/RisingV.Shared.Config.html",
    "title": "Namespace RisingV.Shared.Config | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Config Classes BaseConfig Base class for configuration management. ConfigEntryInfo Represents a configuration entry with its section, key, default value, and description. Interfaces IConfig Interface for configuration management."
  },
  "api/RisingV.Shared.Coroutines.html": {
    "href": "api/RisingV.Shared.Coroutines.html",
    "title": "Class Coroutines | RisingV.Shared",
    "summary": "Class Coroutines Namespace RisingV.Shared Assembly RisingV.Shared.dll Contains methods for managing coroutines in Unity using the IgnorePhysicsDebugSystem. public class Coroutines Inheritance object Coroutines Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods StartFrameCoroutine(Action, int) Starts a coroutine that executes an action every specified number of frames. public static Coroutine StartFrameCoroutine(Action action, int frameInterval) Parameters action Action The action to execute every specified number of frames. frameInterval int The number of frames to wait before executing the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StartFrameCoroutine(Action, int, int) Starts a coroutine that executes an action every specified number of frames for a specified number of repetitions. public static Coroutine StartFrameCoroutine(Action action, int frameInterval, int repeatCount) Parameters action Action The action to execute every specified number of frames. frameInterval int The number of frames to wait before executing the action. repeatCount int The number of times to repeat the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StartGenericCoroutine(Action, float) Starts a generic coroutine that executes an action after a specified delay. public static Coroutine StartGenericCoroutine(Action action, float delay) Parameters action Action The action to execute after the delay. delay float The delay in seconds before executing the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StartRandomIntervalCoroutine(Action, float, float) Starts a coroutine that executes an action at random intervals between a minimum and maximum delay. public static Coroutine StartRandomIntervalCoroutine(Action action, float minDelay, float maxDelay) Parameters action Action The action to execute at random intervals. minDelay float The minimum delay in seconds before executing the action. maxDelay float /// The maximum delay in seconds before executing the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StartRandomIntervalCoroutine(Action, float, float, int) Starts a coroutine that executes an action at random intervals between a minimum and maximum delay for a specified number of repetitions. public static Coroutine StartRandomIntervalCoroutine(Action action, float minDelay, float maxDelay, int repeatCount) Parameters action Action The action to execute at random intervals. minDelay float The minimum delay in seconds before executing the action. maxDelay float The maximum delay in seconds before executing the action. repeatCount int The number of times to repeat the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StartRepeatingCoroutine(Action, float) Starts a repeating coroutine that executes an action at regular intervals. public static Coroutine StartRepeatingCoroutine(Action action, float delay) Parameters action Action The action to execute repeatedly. delay float The delay in seconds between each execution of the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StartRepeatingCoroutine(Action, float, int) Starts a repeating coroutine that executes an action a specified number of times at regular intervals. public static Coroutine StartRepeatingCoroutine(Action action, float delay, int repeatCount) Parameters action Action The action to execute repeatedly. delay float The delay in seconds between each execution of the action. repeatCount int The number of times to repeat the action. Returns Coroutine A Coroutine object that can be used to control the coroutine. StopCoroutine(Coroutine) Stops a coroutine that was started with StartGenericCoroutine or any other coroutine method. public static void StopCoroutine(Coroutine coroutine) Parameters coroutine Coroutine The Coroutine object to stop."
  },
  "api/RisingV.Shared.Data.IData.html": {
    "href": "api/RisingV.Shared.Data.IData.html",
    "title": "Interface IData | RisingV.Shared",
    "summary": "Interface IData Namespace RisingV.Shared.Data Assembly RisingV.Shared.dll Represents a data interface for objects that can be used in data collections. public interface IData Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Data.ScriptSpawnData.html": {
    "href": "api/RisingV.Shared.Data.ScriptSpawnData.html",
    "title": "Class ScriptSpawnData | RisingV.Shared",
    "summary": "Class ScriptSpawnData Namespace RisingV.Shared.Data Assembly RisingV.Shared.dll Represents data for spawning a script entity. public record ScriptSpawnData : IData, IEquatable<ScriptSpawnData> Inheritance object ScriptSpawnData Implements IData IEquatable<ScriptSpawnData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnData(Entity) Represents data for spawning a script entity. public ScriptSpawnData(Entity Entity) Parameters Entity Entity Properties Entity public Entity Entity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.Data.SpawnData.html": {
    "href": "api/RisingV.Shared.Data.SpawnData.html",
    "title": "Class SpawnData | RisingV.Shared",
    "summary": "Class SpawnData Namespace RisingV.Shared.Data Assembly RisingV.Shared.dll Represents data for spawning an entity in the game world. public record SpawnData : IData, IEquatable<SpawnData> Inheritance object SpawnData Implements IData IEquatable<SpawnData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnData(Dictionary<Entity, (int, int)>) public SpawnData(Dictionary<Entity, (int, int)> State) Parameters State Dictionary<Entity, (int, int)> SpawnData(Entity, LifeTime?, Dictionary<Entity, (int, int)>?) Represents data for spawning an entity in the game world. public SpawnData(Entity Entity, LifeTime? LifeTime, Dictionary<Entity, (int, int)>? State = null) Parameters Entity Entity LifeTime LifeTime? State Dictionary<Entity, (int, int)> Properties Entity public Entity Entity { get; init; } Property Value Entity LifeTime public LifeTime? LifeTime { get; init; } Property Value LifeTime? State public Dictionary<Entity, (int, int)>? State { get; init; } Property Value Dictionary<Entity, (int, int)>"
  },
  "api/RisingV.Shared.Data.SpawnNpcData.html": {
    "href": "api/RisingV.Shared.Data.SpawnNpcData.html",
    "title": "Struct SpawnNpcData | RisingV.Shared",
    "summary": "Struct SpawnNpcData Namespace RisingV.Shared.Data Assembly RisingV.Shared.dll Represents data for spawning an NPC in the game world. public struct SpawnNpcData : IData Implements IData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnNpcData(float, int, int, SpawnOptions, bool) Represents data for spawning an NPC in the game world. public SpawnNpcData(float duration = 0, int entityIndex = 0, int entityVersion = 0, SpawnOptions options = default, bool process = true) Parameters duration float entityIndex int entityVersion int options SpawnOptions process bool Properties Duration public float Duration { readonly get; set; } Property Value float EntityIndex public int EntityIndex { readonly get; set; } Property Value int EntityVersion public int EntityVersion { readonly get; set; } Property Value int Options public SpawnOptions Options { readonly get; set; } Property Value SpawnOptions Process public bool Process { readonly get; set; } Property Value bool Methods GetEntity() public Entity GetEntity() Returns Entity"
  },
  "api/RisingV.Shared.Data.SpawnOptions.html": {
    "href": "api/RisingV.Shared.Data.SpawnOptions.html",
    "title": "Struct SpawnOptions | RisingV.Shared",
    "summary": "Struct SpawnOptions Namespace RisingV.Shared.Data Assembly RisingV.Shared.dll Options for spawning an NPC, including blood type, quality, and stats. public struct SpawnOptions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnOptions(bool, PrefabGUID, float, bool, bool, UnitStats, bool) Options for spawning an NPC, including blood type, quality, and stats. public SpawnOptions(bool modifyBlood = false, PrefabGUID bloodType = default, float bloodQuality = 0, bool bloodConsumable = true, bool modifyStats = false, UnitStats unitStats = default, bool process = false) Parameters modifyBlood bool bloodType PrefabGUID bloodQuality float bloodConsumable bool modifyStats bool unitStats UnitStats process bool Properties BloodConsumable public bool BloodConsumable { readonly get; set; } Property Value bool BloodQuality public float BloodQuality { readonly get; set; } Property Value float BloodType public PrefabGUID BloodType { readonly get; set; } Property Value PrefabGUID ModifyBlood public bool ModifyBlood { readonly get; set; } Property Value bool ModifyStats public bool ModifyStats { readonly get; set; } Property Value bool Process public bool Process { readonly get; set; } Property Value bool UnitStats public UnitStats UnitStats { readonly get; set; } Property Value UnitStats"
  },
  "api/RisingV.Shared.Data.StatChangeData.html": {
    "href": "api/RisingV.Shared.Data.StatChangeData.html",
    "title": "Class StatChangeData | RisingV.Shared",
    "summary": "Class StatChangeData Namespace RisingV.Shared.Data Assembly RisingV.Shared.dll Represents data for a stat change event. public class StatChangeData : IData Inheritance object StatChangeData Implements IData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangeData(StatChangeEvent) public StatChangeData(StatChangeEvent statChangeEvent) Parameters statChangeEvent StatChangeEvent StatChangeData(Entity, Entity, float, StatType, StatChangeReason, int) Represents data for a stat change event. public StatChangeData(Entity source, Entity target, float change, StatType type, StatChangeReason reason, int statChangeFlags = 0) Parameters source Entity Source entity of the stat change. target Entity Target entity of the stat change. change float Change amount for the stat. type StatType Stat type being changed. reason StatChangeReason Reason for the stat change. statChangeFlags int Flags associated with the stat change. Properties Change public float Change { get; } Property Value float Entity public Entity Entity { get; } Property Value Entity OriginalChange public float OriginalChange { get; } Property Value float Reason public StatChangeReason Reason { get; } Property Value StatChangeReason Source public Entity Source { get; } Property Value Entity StatChangeFlags public int StatChangeFlags { get; } Property Value int Target public Entity Target { get; } Property Value Entity Type public StatType Type { get; } Property Value StatType Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Shared.Data.html": {
    "href": "api/RisingV.Shared.Data.html",
    "title": "Namespace RisingV.Shared.Data | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Data Classes ScriptSpawnData Represents data for spawning a script entity. SpawnData Represents data for spawning an entity in the game world. StatChangeData Represents data for a stat change event. Structs SpawnNpcData Represents data for spawning an NPC in the game world. SpawnOptions Options for spawning an NPC, including blood type, quality, and stats. Interfaces IData Represents a data interface for objects that can be used in data collections."
  },
  "api/RisingV.Shared.Databases.Database-2.html": {
    "href": "api/RisingV.Shared.Databases.Database-2.html",
    "title": "Class Database<TKey, TData> | RisingV.Shared",
    "summary": "Class Database<TKey, TData> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Represents a database that uses a map as both source and loader. public abstract class Database<TKey, TData> : Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>, IDatabase<TKey, TData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<TKey, TData> where TKey : notnull where TData : IData Type Parameters TKey TData Inheritance object Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>> Database<TKey, TData> Implements IDatabase<TKey, TData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<TKey, TData> Inherited Members Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Log Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Name Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.IsInitialized Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.IsLoaded Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.DataSource Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.DataLoader Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.VerifySource() Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Initialize(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Terminate(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Load(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Ready(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Reload(DatabaseManager) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Unload(DatabaseManager) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Unload(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Clear(DatabaseManager) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Clear() Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Count() Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Get(TKey) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.TryGet(TKey) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.GetAll() Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.ForEach(Action<TKey, TData>) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Add(TKey, TData) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Add(TData) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.Remove(TKey) Database<TKey, TData, MapDataSource<TKey, TData>, MapDataLoader<TKey, TData>>.this[TKey] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DatabaseDefaults.IsEmpty(IDatabase) EntityExtensions.IsAspect<TAspect>(object) Constructors Database(string) Represents a database that uses a map as both source and loader. protected Database(string name) Parameters name string"
  },
  "api/RisingV.Shared.Databases.Database-4.html": {
    "href": "api/RisingV.Shared.Databases.Database-4.html",
    "title": "Class Database<TKey, TData, TSource, TLoader> | RisingV.Shared",
    "summary": "Class Database<TKey, TData, TSource, TLoader> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Represents a generic database interface. public abstract class Database<TKey, TData, TSource, TLoader> : IDatabase<TKey, TData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<TKey, TData> where TData : IData where TSource : IDataSource<TKey, TData, TLoader> where TLoader : IDataLoader<TKey, TData> Type Parameters TKey Key type for the database. TData Data type for the database. TSource Data source type for the database. TLoader Data loader type for the database. Inheritance object Database<TKey, TData, TSource, TLoader> Implements IDatabase<TKey, TData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<TKey, TData> Derived DatabaseWithLoader<TKey, TData, TLoader> DatabaseWithSource<TKey, TData, TSource> Database<TKey, TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DatabaseDefaults.IsEmpty(IDatabase) EntityExtensions.IsAspect<TAspect>(object) Constructors Database(string, TSource, TLoader) Represents a generic database interface. protected Database(string name, TSource source, TLoader loader) Parameters name string Name of the database. source TSource Data source for the database. loader TLoader Data loader for the database. Properties DataLoader public TLoader DataLoader { get; } Property Value TLoader DataSource public TSource DataSource { get; } Property Value TSource IsInitialized Indicates whether the database has been initialized. public bool IsInitialized { get; } Property Value bool IsLoaded Indicates whether the database has been loaded. public bool IsLoaded { get; } Property Value bool this[TKey] Allows getting/setting via square brackets: myDb[key] or myDb[key] = item. public TData this[TKey key] { get; set; } Parameters key TKey Property Value TData Log protected abstract Logger Log { get; } Property Value Logger Name public string Name { get; } Property Value string Methods Add(TKey, TData) public virtual void Add(TKey key, TData item) Parameters key TKey item TData Add(TData) public virtual TKey Add(TData item) Parameters item TData Returns TKey Clear() public virtual void Clear() Clear(DatabaseManager) Clears the database, removing all data. public virtual void Clear(DatabaseManager manager) Parameters manager DatabaseManager Count() public virtual int Count() Returns int ForEach(Action<TKey, TData>) public void ForEach(Action<TKey, TData> iterator) Parameters iterator Action<TKey, TData> Get(TKey) public virtual TData Get(TKey key) Parameters key TKey Returns TData GetAll() public virtual List<TData> GetAll() Returns List<TData> Initialize(DatabaseManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public virtual void Initialize(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> Load(DatabaseManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public virtual void Load(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> Ready(DatabaseManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public void Ready(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> Reload(DatabaseManager) Reloads the database from its source. public void Reload(DatabaseManager manager) Parameters manager DatabaseManager Reload(DatabaseManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public virtual void Reload(DatabaseManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager DatabaseManager plugins List<IPlugin> reason ReloadReason Remove(TKey) public virtual TData? Remove(TKey key) Parameters key TKey Returns TData Terminate(DatabaseManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public virtual void Terminate(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> TryGet(TKey) public virtual TData? TryGet(TKey key) Parameters key TKey Returns TData Unload(DatabaseManager) Unloads the database, clearing its data. public void Unload(DatabaseManager manager) Parameters manager DatabaseManager Unload(DatabaseManager, List<IPlugin>) Unloads the manager and its dependencies with a specific type. public virtual void Unload(DatabaseManager manager, List<IPlugin> plugins) Parameters manager DatabaseManager plugins List<IPlugin> VerifySource() Verify the source of the database. public virtual void VerifySource()"
  },
  "api/RisingV.Shared.Databases.DatabaseDefaults.html": {
    "href": "api/RisingV.Shared.Databases.DatabaseDefaults.html",
    "title": "Class DatabaseDefaults | RisingV.Shared",
    "summary": "Class DatabaseDefaults Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Provides default implementations for database operations. public static class DatabaseDefaults Inheritance object DatabaseDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsEmpty(IDatabase) public static bool IsEmpty(this IDatabase db) Parameters db IDatabase Returns bool"
  },
  "api/RisingV.Shared.Databases.DatabaseManager.html": {
    "href": "api/RisingV.Shared.Databases.DatabaseManager.html",
    "title": "Class DatabaseManager | RisingV.Shared",
    "summary": "Class DatabaseManager Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Manages databases for plugins, allowing for adding, removing, and accessing database instances. public class DatabaseManager : TypeMapManager<IDatabase, DatabaseManager>, IManager<IDatabase, DatabaseManager>, IManager, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object ManagerBase<IDatabase, DatabaseManager> TypeMapManager<IDatabase, DatabaseManager> DatabaseManager Implements IManager<IDatabase, DatabaseManager> IManager IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members ManagerBase<IDatabase, DatabaseManager>.InitializedMap ManagerBase<IDatabase, DatabaseManager>.LoadedMap ManagerBase<IDatabase, DatabaseManager>.ReadyMap ManagerBase<IDatabase, DatabaseManager>.ReloadingMap ManagerBase<IDatabase, DatabaseManager>.PluginsMap ManagerBase<IDatabase, DatabaseManager>.Log ManagerBase<IDatabase, DatabaseManager>.AllowAutoReload ManagerBase<IDatabase, DatabaseManager>.UnsubscribeEventsOnRemoval ManagerBase<IDatabase, DatabaseManager>.IsInitialized ManagerBase<IDatabase, DatabaseManager>.IsLoaded ManagerBase<IDatabase, DatabaseManager>.IsReady ManagerBase<IDatabase, DatabaseManager>.IsFullReloading ManagerBase<IDatabase, DatabaseManager>.IsEnabled(IManageable) ManagerBase<IDatabase, DatabaseManager>.IsEnabled<TX>(TX) ManagerBase<IDatabase, DatabaseManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<IDatabase, DatabaseManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<IDatabase, DatabaseManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<IDatabase, DatabaseManager>.Initialize(IPlugin) ManagerBase<IDatabase, DatabaseManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<IDatabase, DatabaseManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<IDatabase, DatabaseManager>.Ready(IPlugin) ManagerBase<IDatabase, DatabaseManager>.Load(IPlugin) ManagerBase<IDatabase, DatabaseManager>.Unload(IPlugin) ManagerBase<IDatabase, DatabaseManager>.Reload(ReloadReason) ManagerBase<IDatabase, DatabaseManager>.Reload(IPlugin, ReloadReason) ManagerBase<IDatabase, DatabaseManager>.OnReload(IPlugin, ReloadReason) ManagerBase<IDatabase, DatabaseManager>.Terminate(IPlugin) ManagerBase<IDatabase, DatabaseManager>.TryInitialize(IManageable, IPlugin) ManagerBase<IDatabase, DatabaseManager>.TryReady(IManageable, IPlugin) ManagerBase<IDatabase, DatabaseManager>.TryLoad(IManageable, IPlugin) ManagerBase<IDatabase, DatabaseManager>.TryUnload(IManageable, IPlugin) ManagerBase<IDatabase, DatabaseManager>.TryTerminate(IManageable, IPlugin) ManagerBase<IDatabase, DatabaseManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<IDatabase, DatabaseManager>.Add<TX>(IPlugin, bool) ManagerBase<IDatabase, DatabaseManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<IDatabase, DatabaseManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<IDatabase, DatabaseManager>.OnManageableAdded<TX>(IPlugin, IDatabase, bool) ManagerBase<IDatabase, DatabaseManager>.OnManageableRemoved<TX>(IPlugin, IDatabase) ManagerBase<IDatabase, DatabaseManager>.Remove<TX>(IPlugin) ManagerBase<IDatabase, DatabaseManager>.Remove<TX>(IPlugin, TX) ManagerBase<IDatabase, DatabaseManager>.Get<TX>(bool) ManagerBase<IDatabase, DatabaseManager>.Get(Type, bool) ManagerBase<IDatabase, DatabaseManager>.GetOrCreate<TX>(IPlugin) ManagerBase<IDatabase, DatabaseManager>.Has<TX>(bool) ManagerBase<IDatabase, DatabaseManager>.Has(Type, bool, bool) ManagerBase<IDatabase, DatabaseManager>.Has(string, bool, bool) ManagerBase<IDatabase, DatabaseManager>.Count() ManagerBase<IDatabase, DatabaseManager>.ForEach(Action<IDatabase>) ManagerBase<IDatabase, DatabaseManager>.GetList() ManagerBase<IDatabase, DatabaseManager>.Select(Func<KeyValuePair<Type, IDatabase>, IDatabase>) ManagerBase<IDatabase, DatabaseManager>.RequiredType() ManagerBase<IDatabase, DatabaseManager>.RequiredTypeName() ManagerBase<IDatabase, DatabaseManager>.GetManagedInfo() ManagerBase<IDatabase, DatabaseManager>.Equals(ManagerBase<IDatabase, DatabaseManager>) ManagerBase<IDatabase, DatabaseManager>.Equals(object) ManagerBase<IDatabase, DatabaseManager>.GetHashCode() ManagerBase<IDatabase, DatabaseManager>.DebugPrintAll(string) ManagerBase<IDatabase, DatabaseManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ConfigPath public string ConfigPath { get; } Property Value string Log protected override Logger Log { get; } Property Value Logger Methods AddDatabase<T>(IPlugin, bool) public T? AddDatabase<T>(IPlugin plugin, bool failIfExists = true) where T : IDatabase Parameters plugin IPlugin failIfExists bool Returns T Type Parameters T AddDatabase<T>(IPlugin, T, bool) public void AddDatabase<T>(IPlugin plugin, T db, bool failIfExists = true) where T : IDatabase Parameters plugin IPlugin db T failIfExists bool Type Parameters T Add<TX>(IPlugin, TX, bool) Add a manageable object of the given type to the manager. public override void Add<TX>(IPlugin plugin, TX obj, bool failIfExists = true) where TX : IDatabase Parameters plugin IPlugin obj TX failIfExists bool Type Parameters TX ClearAllDatabases() public void ClearAllDatabases() ClearDatabase<T>() public bool ClearDatabase<T>() where T : IDatabase Returns bool Type Parameters T GetDatabase<T>(bool) public T? GetDatabase<T>(bool required = true) where T : IDatabase Parameters required bool Returns T Type Parameters T Initialize(IPlugin) Initialize the manager with the given plugin including its manageable objects. public override void Initialize(IPlugin plugin) Parameters plugin IPlugin ReloadAllDatabases() public void ReloadAllDatabases() ReloadDatabase<T>() public bool ReloadDatabase<T>() where T : IDatabase Returns bool Type Parameters T RemoveDatabase<T>(IPlugin) public void RemoveDatabase<T>(IPlugin plugin) where T : IDatabase Parameters plugin IPlugin Type Parameters T UnloadAllDatabases() public void UnloadAllDatabases() UnloadDatabase<T>() public bool UnloadDatabase<T>() where T : IDatabase Returns bool Type Parameters T"
  },
  "api/RisingV.Shared.Databases.DatabaseWithLoader-3.html": {
    "href": "api/RisingV.Shared.Databases.DatabaseWithLoader-3.html",
    "title": "Class DatabaseWithLoader<TKey, TData, TLoader> | RisingV.Shared",
    "summary": "Class DatabaseWithLoader<TKey, TData, TLoader> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Represents a database with a loader. public abstract class DatabaseWithLoader<TKey, TData, TLoader> : Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>, IDatabase<TKey, TData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<TKey, TData> where TKey : notnull where TData : IData where TLoader : IDataLoader<TKey, TData> Type Parameters TKey TData TLoader Inheritance object Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader> DatabaseWithLoader<TKey, TData, TLoader> Implements IDatabase<TKey, TData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<TKey, TData> Inherited Members Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Log Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Name Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.IsInitialized Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.IsLoaded Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.DataSource Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.DataLoader Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.VerifySource() Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Initialize(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Terminate(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Load(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Ready(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Reload(DatabaseManager) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Unload(DatabaseManager) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Unload(DatabaseManager, List<IPlugin>) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Clear(DatabaseManager) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Clear() Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Count() Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Get(TKey) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.TryGet(TKey) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.GetAll() Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.ForEach(Action<TKey, TData>) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Add(TKey, TData) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Add(TData) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.Remove(TKey) Database<TKey, TData, MapDataSource<TKey, TData, TLoader>, TLoader>.this[TKey] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DatabaseDefaults.IsEmpty(IDatabase) EntityExtensions.IsAspect<TAspect>(object) Constructors DatabaseWithLoader(string, TLoader) Represents a database with a loader. protected DatabaseWithLoader(string name, TLoader loader) Parameters name string loader TLoader"
  },
  "api/RisingV.Shared.Databases.DatabaseWithSource-3.html": {
    "href": "api/RisingV.Shared.Databases.DatabaseWithSource-3.html",
    "title": "Class DatabaseWithSource<TKey, TData, TSource> | RisingV.Shared",
    "summary": "Class DatabaseWithSource<TKey, TData, TSource> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Represents a database with a source and a data loader. public abstract class DatabaseWithSource<TKey, TData, TSource> : Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>, IDatabase<TKey, TData>, IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<TKey, TData> where TKey : notnull where TData : IData where TSource : IDataSource<TKey, TData, MapDataLoader<TKey, TData>> Type Parameters TKey TData TSource Inheritance object Database<TKey, TData, TSource, MapDataLoader<TKey, TData>> DatabaseWithSource<TKey, TData, TSource> Implements IDatabase<TKey, TData> IDatabase IDataCrud IManageableLifecycle<DatabaseManager> IManageableLifecycle IReloadable IManageable<DatabaseManager> IManageable IDataCrud<TKey, TData> Inherited Members Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Log Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Name Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.IsInitialized Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.IsLoaded Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.DataSource Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.DataLoader Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.VerifySource() Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Initialize(DatabaseManager, List<IPlugin>) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Terminate(DatabaseManager, List<IPlugin>) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Load(DatabaseManager, List<IPlugin>) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Ready(DatabaseManager, List<IPlugin>) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Reload(DatabaseManager) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Unload(DatabaseManager) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Unload(DatabaseManager, List<IPlugin>) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Clear(DatabaseManager) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Clear() Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Count() Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Get(TKey) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.TryGet(TKey) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.GetAll() Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.ForEach(Action<TKey, TData>) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Add(TKey, TData) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Add(TData) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.Remove(TKey) Database<TKey, TData, TSource, MapDataLoader<TKey, TData>>.this[TKey] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DatabaseDefaults.IsEmpty(IDatabase) EntityExtensions.IsAspect<TAspect>(object) Constructors DatabaseWithSource(string, TSource) Represents a database with a source and a data loader. protected DatabaseWithSource(string name, TSource source) Parameters name string source TSource"
  },
  "api/RisingV.Shared.Databases.IDataLoader-2.html": {
    "href": "api/RisingV.Shared.Databases.IDataLoader-2.html",
    "title": "Interface IDataLoader<TKey, TData> | RisingV.Shared",
    "summary": "Interface IDataLoader<TKey, TData> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll public interface IDataLoader<TKey, TData> : IDataLoader where TData : IData Type Parameters TKey TData Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load<TSource>(TSource, object?) void Load<TSource>(TSource source, object? input) where TSource : IDataSource<TKey, TData> Parameters source TSource input object Type Parameters TSource"
  },
  "api/RisingV.Shared.Databases.IDataLoader-3.html": {
    "href": "api/RisingV.Shared.Databases.IDataLoader-3.html",
    "title": "Interface IDataLoader<TKey, TData, TInput> | RisingV.Shared",
    "summary": "Interface IDataLoader<TKey, TData, TInput> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll public interface IDataLoader<TKey, TData, in TInput> : IDataLoader<TKey, TData>, IDataLoader where TData : IData Type Parameters TKey TData TInput Inherited Members IDataLoader<TKey, TData>.Load<TSource>(TSource, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load<TSource>(TSource, TInput) void Load<TSource>(TSource source, TInput input) where TSource : IDataSource<TKey, TData> Parameters source TSource input TInput Type Parameters TSource"
  },
  "api/RisingV.Shared.Databases.IDataLoader.html": {
    "href": "api/RisingV.Shared.Databases.IDataLoader.html",
    "title": "Interface IDataLoader | RisingV.Shared",
    "summary": "Interface IDataLoader Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll public interface IDataLoader Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Databases.IDataStreamLoader-2.html": {
    "href": "api/RisingV.Shared.Databases.IDataStreamLoader-2.html",
    "title": "Interface IDataStreamLoader<TKey, TData> | RisingV.Shared",
    "summary": "Interface IDataStreamLoader<TKey, TData> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll public interface IDataStreamLoader<TKey, TData> : IDataLoader<TKey, TData, Stream>, IDataLoader<TKey, TData>, IDataLoader where TData : IData Type Parameters TKey TData Inherited Members IDataLoader<TKey, TData, Stream>.Load<TSource>(TSource, Stream) IDataLoader<TKey, TData>.Load<TSource>(TSource, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Databases.IDatabase-2.html": {
    "href": "api/RisingV.Shared.Databases.IDatabase-2.html",
    "title": "Interface IDatabase<TK, T> | RisingV.Shared",
    "summary": "Interface IDatabase<TK, T> Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll Represents a generic database interface for managing data collections. public interface IDatabase<TK, T> : IDatabase, IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable, IDataCrud<TK, T> where T : IData Type Parameters TK T Inherited Members IDatabase.Name IDatabase.IsInitialized IDatabase.IsLoaded IDatabase.VerifySource() IDatabase.Reload(DatabaseManager) IDatabase.Unload(DatabaseManager) IDatabase.Clear(DatabaseManager) IDatabase.ThrowOnLoadFailure() IDataCrud.Clear() IDataCrud.Count() IDataCrud.IsEmpty() IManageableLifecycle<DatabaseManager>.Initialize(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Load(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Unload(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Ready(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Terminate(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) IManageableLifecycle<DatabaseManager>.OnReload(DatabaseManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) IDataCrud<TK, T>.Get(TK) IDataCrud<TK, T>.TryGet(TK) IDataCrud<TK, T>.GetAll() IDataCrud<TK, T>.ForEach(Action<TK, T>) IDataCrud<TK, T>.Add(TK, T) IDataCrud<TK, T>.Add(T) IDataCrud<TK, T>.Remove(TK) IDataCrud<TK, T>.this[TK] Extension Methods DatabaseDefaults.IsEmpty(IDatabase) EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Databases.IDatabase.html": {
    "href": "api/RisingV.Shared.Databases.IDatabase.html",
    "title": "Interface IDatabase | RisingV.Shared",
    "summary": "Interface IDatabase Namespace RisingV.Shared.Databases Assembly RisingV.Shared.dll public interface IDatabase : IDataCrud, IManageableLifecycle<DatabaseManager>, IManageableLifecycle, IReloadable, IManageable<DatabaseManager>, IManageable Inherited Members IDataCrud.Clear() IDataCrud.Count() IDataCrud.IsEmpty() IManageableLifecycle<DatabaseManager>.Initialize(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Load(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Unload(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Ready(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Terminate(DatabaseManager, List<IPlugin>) IManageableLifecycle<DatabaseManager>.Reload(DatabaseManager, List<IPlugin>, ReloadReason) IManageableLifecycle<DatabaseManager>.OnReload(DatabaseManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods DatabaseDefaults.IsEmpty(IDatabase) EntityExtensions.IsAspect<TAspect>(object) Properties IsInitialized Indicates whether the database has been initialized. bool IsInitialized { get; } Property Value bool IsLoaded Indicates whether the database has been loaded. bool IsLoaded { get; } Property Value bool Name string Name { get; } Property Value string Methods Clear(DatabaseManager) Clears the database, removing all data. void Clear(DatabaseManager manager) Parameters manager DatabaseManager Reload(DatabaseManager) Reloads the database from its source. void Reload(DatabaseManager manager) Parameters manager DatabaseManager ThrowOnLoadFailure() Should we throw an exception if the database fails to load. bool ThrowOnLoadFailure() Returns bool Unload(DatabaseManager) Unloads the database, clearing its data. void Unload(DatabaseManager manager) Parameters manager DatabaseManager VerifySource() Verify the source of the database. void VerifySource()"
  },
  "api/RisingV.Shared.Databases.Loaders.JsonDataLoader-2.html": {
    "href": "api/RisingV.Shared.Databases.Loaders.JsonDataLoader-2.html",
    "title": "Class JsonDataLoader<TKey, TData> | RisingV.Shared",
    "summary": "Class JsonDataLoader<TKey, TData> Namespace RisingV.Shared.Databases.Loaders Assembly RisingV.Shared.dll Loads data from a JSON stream into a data source. public class JsonDataLoader<TKey, TData> : IDataStreamLoader<TKey, TData>, IDataLoader<TKey, TData, Stream>, IDataLoader<TKey, TData>, IDataLoader where TData : IData Type Parameters TKey TData Inheritance object JsonDataLoader<TKey, TData> Implements IDataStreamLoader<TKey, TData> IDataLoader<TKey, TData, Stream> IDataLoader<TKey, TData> IDataLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load<TSource>(TSource, Stream) public void Load<TSource>(TSource source, Stream stream) where TSource : IDataSource<TKey, TData> Parameters source TSource stream Stream Type Parameters TSource"
  },
  "api/RisingV.Shared.Databases.Loaders.MapDataLoader-2.html": {
    "href": "api/RisingV.Shared.Databases.Loaders.MapDataLoader-2.html",
    "title": "Class MapDataLoader<TKey, TData> | RisingV.Shared",
    "summary": "Class MapDataLoader<TKey, TData> Namespace RisingV.Shared.Databases.Loaders Assembly RisingV.Shared.dll A data loader that loads data into a map. public class MapDataLoader<TKey, TData> : IDataLoader<TKey, TData, Map<TKey, TData>>, IDataLoader<TKey, TData>, IDataLoader where TKey : notnull where TData : IData Type Parameters TKey TData Inheritance object MapDataLoader<TKey, TData> Implements IDataLoader<TKey, TData, Map<TKey, TData>> IDataLoader<TKey, TData> IDataLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load<TSource>(TSource, Map<TKey, TData>) public void Load<TSource>(TSource source, Map<TKey, TData> input) where TSource : IDataSource<TKey, TData> Parameters source TSource input Map<TKey, TData> Type Parameters TSource"
  },
  "api/RisingV.Shared.Databases.Loaders.html": {
    "href": "api/RisingV.Shared.Databases.Loaders.html",
    "title": "Namespace RisingV.Shared.Databases.Loaders | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Databases.Loaders Classes JsonDataLoader<TKey, TData> Loads data from a JSON stream into a data source. MapDataLoader<TKey, TData> A data loader that loads data into a map."
  },
  "api/RisingV.Shared.Databases.Sources.DataSource-3.html": {
    "href": "api/RisingV.Shared.Databases.Sources.DataSource-3.html",
    "title": "Class DataSource<TKey, TData, TLoader> | RisingV.Shared",
    "summary": "Class DataSource<TKey, TData, TLoader> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source that can be initialized, loaded, and managed. public abstract class DataSource<TKey, TData, TLoader> : IDataSource<TKey, TData, TLoader>, IDataSource<TKey, TData>, IDataSource, IDataCrud, IDataCrud<TKey, TData> where TData : IData where TLoader : IDataLoader<TKey, TData> Type Parameters TKey TKey of the data source, typically a unique identifier. TData TData of the data source, typically an implementation of IData. TLoader TLoader of the data source, typically an implementation of IDataLoader. Inheritance object DataSource<TKey, TData, TLoader> Implements IDataSource<TKey, TData, TLoader> IDataSource<TKey, TData> IDataSource IDataCrud IDataCrud<TKey, TData> Derived MapDataSource<TKey, TData, TLoader> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties IsInitialized public bool IsInitialized { get; } Property Value bool IsLoaded public bool IsLoaded { get; } Property Value bool this[TKey] public TData this[TKey key] { get; set; } Parameters key TKey Property Value TData KeyResolver Gets or sets the key resolver function that resolves the key from the data item. public abstract Func<TData, TKey>? KeyResolver { get; set; } Property Value Func<TData, TKey> Log protected abstract Logger Log { get; } Property Value Logger Methods Add(TKey, TData) public abstract void Add(TKey key, TData item) Parameters key TKey item TData Add(TData) public virtual TKey Add(TData item) Parameters item TData Returns TKey Clear() public abstract void Clear() Count() public abstract int Count() Returns int ForEach(Action<TKey, TData>) public abstract void ForEach(Action<TKey, TData> iterator) Parameters iterator Action<TKey, TData> Get(TKey) public abstract TData Get(TKey key) Parameters key TKey Returns TData GetAll() public abstract List<TData> GetAll() Returns List<TData> Initialize(IDatabase<TKey, TData>) public abstract void Initialize(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> IsEmpty() public bool IsEmpty() Returns bool Load(IDatabase<TKey, TData>, TLoader) public abstract void Load(IDatabase<TKey, TData> database, TLoader loader) Parameters database IDatabase<TKey, TData> loader TLoader Ready(IDatabase<TKey, TData>) public abstract void Ready(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Remove(TKey) public abstract TData? Remove(TKey key) Parameters key TKey Returns TData Terminate(IDatabase<TKey, TData>) public abstract void Terminate(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> TryGet(TKey) public abstract TData? TryGet(TKey key) Parameters key TKey Returns TData Unload(IDatabase<TKey, TData>) public abstract void Unload(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Verify(IDatabase<TKey, TData>) public abstract void Verify(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData>"
  },
  "api/RisingV.Shared.Databases.Sources.FileDataSource-3.html": {
    "href": "api/RisingV.Shared.Databases.Sources.FileDataSource-3.html",
    "title": "Class FileDataSource<TKey, TData, TLoader> | RisingV.Shared",
    "summary": "Class FileDataSource<TKey, TData, TLoader> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a file-based data source for a database. public abstract class FileDataSource<TKey, TData, TLoader> : MapDataSource<TKey, TData, TLoader>, IDataSource<TKey, TData, TLoader>, IDataSource<TKey, TData>, IDataSource, IDataCrud, IDataCrud<TKey, TData> where TKey : notnull where TData : IData where TLoader : IDataStreamLoader<TKey, TData> Type Parameters TKey Key type for the data source, must be not null. TData Data type for the data source, must implement IData interface. TLoader Loader type for the data source, must implement IDataStreamLoader interface. Inheritance object DataSource<TKey, TData, TLoader> MapDataSource<TKey, TData, TLoader> FileDataSource<TKey, TData, TLoader> Implements IDataSource<TKey, TData, TLoader> IDataSource<TKey, TData> IDataSource IDataCrud IDataCrud<TKey, TData> Inherited Members MapDataSource<TKey, TData, TLoader>.Log MapDataSource<TKey, TData, TLoader>.KeyResolver MapDataSource<TKey, TData, TLoader>.Initialize(IDatabase<TKey, TData>) MapDataSource<TKey, TData, TLoader>.Load(IDatabase<TKey, TData>, TLoader) MapDataSource<TKey, TData, TLoader>.Ready(IDatabase<TKey, TData>) MapDataSource<TKey, TData, TLoader>.Verify(IDatabase<TKey, TData>) MapDataSource<TKey, TData, TLoader>.Unload(IDatabase<TKey, TData>) MapDataSource<TKey, TData, TLoader>.Terminate(IDatabase<TKey, TData>) MapDataSource<TKey, TData, TLoader>.Clear() MapDataSource<TKey, TData, TLoader>.Count() MapDataSource<TKey, TData, TLoader>.Get(TKey) MapDataSource<TKey, TData, TLoader>.TryGet(TKey) MapDataSource<TKey, TData, TLoader>.GetAll() MapDataSource<TKey, TData, TLoader>.ForEach(Action<TKey, TData>) MapDataSource<TKey, TData, TLoader>.Add(TKey, TData) MapDataSource<TKey, TData, TLoader>.Remove(TKey) MapDataSource<TKey, TData, TLoader>.Equals(object) MapDataSource<TKey, TData, TLoader>.GetHashCode() MapDataSource<TKey, TData, TLoader>.ToString() DataSource<TKey, TData, TLoader>.Log DataSource<TKey, TData, TLoader>.IsInitialized DataSource<TKey, TData, TLoader>.IsLoaded DataSource<TKey, TData, TLoader>.KeyResolver DataSource<TKey, TData, TLoader>.Initialize(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Terminate(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Load(IDatabase<TKey, TData>, TLoader) DataSource<TKey, TData, TLoader>.Unload(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Verify(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Ready(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Clear() DataSource<TKey, TData, TLoader>.Count() DataSource<TKey, TData, TLoader>.IsEmpty() DataSource<TKey, TData, TLoader>.Get(TKey) DataSource<TKey, TData, TLoader>.TryGet(TKey) DataSource<TKey, TData, TLoader>.GetAll() DataSource<TKey, TData, TLoader>.ForEach(Action<TKey, TData>) DataSource<TKey, TData, TLoader>.Add(TKey, TData) DataSource<TKey, TData, TLoader>.Add(TData) DataSource<TKey, TData, TLoader>.this[TKey] DataSource<TKey, TData, TLoader>.Remove(TKey) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors FileDataSource(string, string?, string?, bool) Represents a file-based data source for a database. protected FileDataSource(string filePath, string? fileName = null, string? extension = \"json\", bool autoCreateFile = true) Parameters filePath string File path where the data source is located. fileName string File name of the data source, without extension. extension string File extension of the data source, default is \"json\". autoCreateFile bool Indicates whether to automatically create the file if it does not exist. Properties AutoCreateFile public bool AutoCreateFile { get; } Property Value bool Extension public string? Extension { get; } Property Value string FileName public string? FileName { get; set; } Property Value string FilePath public string FilePath { get; set; } Property Value string IgnoreMissingFile public virtual bool IgnoreMissingFile { get; } Property Value bool Methods GetFullFilePath() Gets the full file path for the data source. public string GetFullFilePath() Returns string Full file path as a string. Exceptions DatabaseException Initialize(IDatabase<TKey, TData>) public override void Initialize(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Load(IDatabase<TKey, TData>, TLoader) public override void Load(IDatabase<TKey, TData> database, TLoader loader) Parameters database IDatabase<TKey, TData> loader TLoader Verify(IDatabase<TKey, TData>) public override void Verify(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData>"
  },
  "api/RisingV.Shared.Databases.Sources.IDataCrud-2.html": {
    "href": "api/RisingV.Shared.Databases.Sources.IDataCrud-2.html",
    "title": "Interface IDataCrud<TKey, TData> | RisingV.Shared",
    "summary": "Interface IDataCrud<TKey, TData> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source interface for CRUD operations with a key and data type. public interface IDataCrud<TKey, TData> where TData : IData Type Parameters TKey TData Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties this[TKey] TData this[TKey key] { get; set; } Parameters key TKey Property Value TData Methods Add(TKey, TData) void Add(TKey key, TData item) Parameters key TKey item TData Add(TData) TKey Add(TData item) Parameters item TData Returns TKey ForEach(Action<TKey, TData>) void ForEach(Action<TKey, TData> iterator) Parameters iterator Action<TKey, TData> Get(TKey) TData Get(TKey key) Parameters key TKey Returns TData GetAll() List<TData> GetAll() Returns List<TData> Remove(TKey) TData? Remove(TKey key) Parameters key TKey Returns TData TryGet(TKey) TData? TryGet(TKey key) Parameters key TKey Returns TData"
  },
  "api/RisingV.Shared.Databases.Sources.IDataCrud.html": {
    "href": "api/RisingV.Shared.Databases.Sources.IDataCrud.html",
    "title": "Interface IDataCrud | RisingV.Shared",
    "summary": "Interface IDataCrud Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source interface for CRUD operations. public interface IDataCrud Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Clear() void Clear() Count() int Count() Returns int IsEmpty() bool IsEmpty() Returns bool"
  },
  "api/RisingV.Shared.Databases.Sources.IDataSource-2.html": {
    "href": "api/RisingV.Shared.Databases.Sources.IDataSource-2.html",
    "title": "Interface IDataSource<TKey, TData> | RisingV.Shared",
    "summary": "Interface IDataSource<TKey, TData> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source interface for CRUD operations with a key and data type. public interface IDataSource<TKey, TData> : IDataSource, IDataCrud, IDataCrud<TKey, TData> where TData : IData Type Parameters TKey TData Inherited Members IDataSource.IsInitialized IDataSource.IsLoaded IDataCrud.Clear() IDataCrud.Count() IDataCrud.IsEmpty() IDataCrud<TKey, TData>.Get(TKey) IDataCrud<TKey, TData>.TryGet(TKey) IDataCrud<TKey, TData>.GetAll() IDataCrud<TKey, TData>.ForEach(Action<TKey, TData>) IDataCrud<TKey, TData>.Add(TKey, TData) IDataCrud<TKey, TData>.Add(TData) IDataCrud<TKey, TData>.Remove(TKey) IDataCrud<TKey, TData>.this[TKey] Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties KeyResolver Gets or sets the key resolver function to resolve the key from the data item. Func<TData, TKey>? KeyResolver { get; set; } Property Value Func<TData, TKey> Methods Initialize(IDatabase<TKey, TData>) void Initialize(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Ready(IDatabase<TKey, TData>) void Ready(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Terminate(IDatabase<TKey, TData>) void Terminate(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Unload(IDatabase<TKey, TData>) void Unload(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Verify(IDatabase<TKey, TData>) void Verify(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData>"
  },
  "api/RisingV.Shared.Databases.Sources.IDataSource-3.html": {
    "href": "api/RisingV.Shared.Databases.Sources.IDataSource-3.html",
    "title": "Interface IDataSource<TKey, TData, TLoader> | RisingV.Shared",
    "summary": "Interface IDataSource<TKey, TData, TLoader> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source interface for CRUD operations with a key, data type, and loader. public interface IDataSource<TKey, TData, in TLoader> : IDataSource<TKey, TData>, IDataSource, IDataCrud, IDataCrud<TKey, TData> where TData : IData where TLoader : IDataLoader<TKey, TData> Type Parameters TKey TData TLoader Inherited Members IDataSource<TKey, TData>.KeyResolver IDataSource<TKey, TData>.Initialize(IDatabase<TKey, TData>) IDataSource<TKey, TData>.Terminate(IDatabase<TKey, TData>) IDataSource<TKey, TData>.Verify(IDatabase<TKey, TData>) IDataSource<TKey, TData>.Unload(IDatabase<TKey, TData>) IDataSource<TKey, TData>.Ready(IDatabase<TKey, TData>) IDataSource.IsInitialized IDataSource.IsLoaded IDataCrud.Clear() IDataCrud.Count() IDataCrud.IsEmpty() IDataCrud<TKey, TData>.Get(TKey) IDataCrud<TKey, TData>.TryGet(TKey) IDataCrud<TKey, TData>.GetAll() IDataCrud<TKey, TData>.ForEach(Action<TKey, TData>) IDataCrud<TKey, TData>.Add(TKey, TData) IDataCrud<TKey, TData>.Add(TData) IDataCrud<TKey, TData>.Remove(TKey) IDataCrud<TKey, TData>.this[TKey] Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Load(IDatabase<TKey, TData>, TLoader) void Load(IDatabase<TKey, TData> database, TLoader loader) Parameters database IDatabase<TKey, TData> loader TLoader"
  },
  "api/RisingV.Shared.Databases.Sources.IDataSource.html": {
    "href": "api/RisingV.Shared.Databases.Sources.IDataSource.html",
    "title": "Interface IDataSource | RisingV.Shared",
    "summary": "Interface IDataSource Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source interface for CRUD operations. public interface IDataSource : IDataCrud Inherited Members IDataCrud.Clear() IDataCrud.Count() IDataCrud.IsEmpty() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties IsInitialized bool IsInitialized { get; } Property Value bool IsLoaded bool IsLoaded { get; } Property Value bool"
  },
  "api/RisingV.Shared.Databases.Sources.MapDataSource-2.html": {
    "href": "api/RisingV.Shared.Databases.Sources.MapDataSource-2.html",
    "title": "Class MapDataSource<TKey, TData> | RisingV.Shared",
    "summary": "Class MapDataSource<TKey, TData> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source that uses a map (dictionary) to store data. public class MapDataSource<TKey, TData> : MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>, IDataSource<TKey, TData, MapDataLoader<TKey, TData>>, IDataSource<TKey, TData>, IDataSource, IDataCrud, IDataCrud<TKey, TData> where TKey : notnull where TData : IData Type Parameters TKey Key type for the map, must be not null. TData Data type for the map, must implement IData. Inheritance object DataSource<TKey, TData, MapDataLoader<TKey, TData>> MapDataSource<TKey, TData, MapDataLoader<TKey, TData>> MapDataSource<TKey, TData> Implements IDataSource<TKey, TData, MapDataLoader<TKey, TData>> IDataSource<TKey, TData> IDataSource IDataCrud IDataCrud<TKey, TData> Inherited Members MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Log MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.KeyResolver MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Initialize(IDatabase<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Load(IDatabase<TKey, TData>, MapDataLoader<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Ready(IDatabase<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Verify(IDatabase<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Unload(IDatabase<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Terminate(IDatabase<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Clear() MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Count() MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Get(TKey) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.TryGet(TKey) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.GetAll() MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.ForEach(Action<TKey, TData>) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Add(TKey, TData) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Remove(TKey) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.Equals(object) MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.GetHashCode() MapDataSource<TKey, TData, MapDataLoader<TKey, TData>>.ToString() DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Log DataSource<TKey, TData, MapDataLoader<TKey, TData>>.IsInitialized DataSource<TKey, TData, MapDataLoader<TKey, TData>>.IsLoaded DataSource<TKey, TData, MapDataLoader<TKey, TData>>.KeyResolver DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Initialize(IDatabase<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Terminate(IDatabase<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Load(IDatabase<TKey, TData>, MapDataLoader<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Unload(IDatabase<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Verify(IDatabase<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Ready(IDatabase<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Clear() DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Count() DataSource<TKey, TData, MapDataLoader<TKey, TData>>.IsEmpty() DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Get(TKey) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.TryGet(TKey) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.GetAll() DataSource<TKey, TData, MapDataLoader<TKey, TData>>.ForEach(Action<TKey, TData>) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Add(TKey, TData) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Add(TData) DataSource<TKey, TData, MapDataLoader<TKey, TData>>.this[TKey] DataSource<TKey, TData, MapDataLoader<TKey, TData>>.Remove(TKey) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors MapDataSource(Map<TKey, TData>?) Represents a data source that uses a map (dictionary) to store data. public MapDataSource(Map<TKey, TData>? map = null) Parameters map Map<TKey, TData> Map to use for storing data. If null, a new LazyMap will be created. Properties KeyResolver Key resolver function to resolve keys from data items. public override Func<TData, TKey>? KeyResolver { get; set; } Property Value Func<TData, TKey> Log protected override Logger Log { get; } Property Value Logger Methods Initialize(IDatabase<TKey, TData>) public override void Initialize(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Load(IDatabase<TKey, TData>, MapDataLoader<TKey, TData>) public override void Load(IDatabase<TKey, TData> database, MapDataLoader<TKey, TData> loader) Parameters database IDatabase<TKey, TData> loader MapDataLoader<TKey, TData> Verify(IDatabase<TKey, TData>) public override void Verify(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData>"
  },
  "api/RisingV.Shared.Databases.Sources.MapDataSource-3.html": {
    "href": "api/RisingV.Shared.Databases.Sources.MapDataSource-3.html",
    "title": "Class MapDataSource<TKey, TData, TLoader> | RisingV.Shared",
    "summary": "Class MapDataSource<TKey, TData, TLoader> Namespace RisingV.Shared.Databases.Sources Assembly RisingV.Shared.dll Represents a data source that uses a map (dictionary) to store data. public class MapDataSource<TKey, TData, TLoader> : DataSource<TKey, TData, TLoader>, IDataSource<TKey, TData, TLoader>, IDataSource<TKey, TData>, IDataSource, IDataCrud, IDataCrud<TKey, TData> where TKey : notnull where TData : IData where TLoader : IDataLoader<TKey, TData> Type Parameters TKey Key type for the map, must be not null. TData Data type for the map, must implement IData. TLoader Loader type for loading data, must implement IDataLoader. Inheritance object DataSource<TKey, TData, TLoader> MapDataSource<TKey, TData, TLoader> Implements IDataSource<TKey, TData, TLoader> IDataSource<TKey, TData> IDataSource IDataCrud IDataCrud<TKey, TData> Derived FileDataSource<TKey, TData, TLoader> MapDataSource<TKey, TData> Inherited Members DataSource<TKey, TData, TLoader>.Log DataSource<TKey, TData, TLoader>.IsInitialized DataSource<TKey, TData, TLoader>.IsLoaded DataSource<TKey, TData, TLoader>.KeyResolver DataSource<TKey, TData, TLoader>.Initialize(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Terminate(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Load(IDatabase<TKey, TData>, TLoader) DataSource<TKey, TData, TLoader>.Unload(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Verify(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Ready(IDatabase<TKey, TData>) DataSource<TKey, TData, TLoader>.Clear() DataSource<TKey, TData, TLoader>.Count() DataSource<TKey, TData, TLoader>.IsEmpty() DataSource<TKey, TData, TLoader>.Get(TKey) DataSource<TKey, TData, TLoader>.TryGet(TKey) DataSource<TKey, TData, TLoader>.GetAll() DataSource<TKey, TData, TLoader>.ForEach(Action<TKey, TData>) DataSource<TKey, TData, TLoader>.Add(TKey, TData) DataSource<TKey, TData, TLoader>.Add(TData) DataSource<TKey, TData, TLoader>.this[TKey] DataSource<TKey, TData, TLoader>.Remove(TKey) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors MapDataSource(Map<TKey, TData>?) Represents a data source that uses a map (dictionary) to store data. public MapDataSource(Map<TKey, TData>? map = null) Parameters map Map<TKey, TData> Map to use for storing data. If null, a new LazyMap will be created. Properties KeyResolver Key resolver function to resolve keys from data items. public override Func<TData, TKey>? KeyResolver { get; set; } Property Value Func<TData, TKey> Log protected override Logger Log { get; } Property Value Logger Methods Add(TKey, TData) public override void Add(TKey key, TData item) Parameters key TKey item TData Clear() public override void Clear() Count() public override int Count() Returns int Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. ForEach(Action<TKey, TData>) public override void ForEach(Action<TKey, TData> iterator) Parameters iterator Action<TKey, TData> Get(TKey) public override TData Get(TKey key) Parameters key TKey Returns TData GetAll() public override List<TData> GetAll() Returns List<TData> GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Initialize(IDatabase<TKey, TData>) public override void Initialize(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Load(IDatabase<TKey, TData>, TLoader) public override void Load(IDatabase<TKey, TData> database, TLoader loader) Parameters database IDatabase<TKey, TData> loader TLoader Ready(IDatabase<TKey, TData>) public override void Ready(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Remove(TKey) public override TData? Remove(TKey key) Parameters key TKey Returns TData Terminate(IDatabase<TKey, TData>) public override void Terminate(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TryGet(TKey) public override TData? TryGet(TKey key) Parameters key TKey Returns TData Unload(IDatabase<TKey, TData>) public override void Unload(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData> Verify(IDatabase<TKey, TData>) public override void Verify(IDatabase<TKey, TData> database) Parameters database IDatabase<TKey, TData>"
  },
  "api/RisingV.Shared.Databases.Sources.html": {
    "href": "api/RisingV.Shared.Databases.Sources.html",
    "title": "Namespace RisingV.Shared.Databases.Sources | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Databases.Sources Classes DataSource<TKey, TData, TLoader> Represents a data source that can be initialized, loaded, and managed. FileDataSource<TKey, TData, TLoader> Represents a file-based data source for a database. MapDataSource<TKey, TData> Represents a data source that uses a map (dictionary) to store data. MapDataSource<TKey, TData, TLoader> Represents a data source that uses a map (dictionary) to store data. Interfaces IDataCrud Represents a data source interface for CRUD operations. IDataCrud<TKey, TData> Represents a data source interface for CRUD operations with a key and data type. IDataSource Represents a data source interface for CRUD operations. IDataSource<TKey, TData> Represents a data source interface for CRUD operations with a key and data type. IDataSource<TKey, TData, TLoader> Represents a data source interface for CRUD operations with a key, data type, and loader."
  },
  "api/RisingV.Shared.Databases.html": {
    "href": "api/RisingV.Shared.Databases.html",
    "title": "Namespace RisingV.Shared.Databases | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Databases Namespaces RisingV.Shared.Databases.Loaders RisingV.Shared.Databases.Sources Classes DatabaseDefaults Provides default implementations for database operations. DatabaseManager Manages databases for plugins, allowing for adding, removing, and accessing database instances. DatabaseWithLoader<TKey, TData, TLoader> Represents a database with a loader. DatabaseWithSource<TKey, TData, TSource> Represents a database with a source and a data loader. Database<TKey, TData> Represents a database that uses a map as both source and loader. Database<TKey, TData, TSource, TLoader> Represents a generic database interface. Interfaces IDataLoader IDataLoader<TKey, TData> IDataLoader<TKey, TData, TInput> IDataStreamLoader<TKey, TData> IDatabase IDatabase<TK, T> Represents a generic database interface for managing data collections."
  },
  "api/RisingV.Shared.Diagnostics.MethodUtil.html": {
    "href": "api/RisingV.Shared.Diagnostics.MethodUtil.html",
    "title": "Class MethodUtil | RisingV.Shared",
    "summary": "Class MethodUtil Namespace RisingV.Shared.Diagnostics Assembly RisingV.Shared.dll public static class MethodUtil Inheritance object MethodUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCaller(int, string, bool, Func<StackTrace, int, StackFrame?>?) Gets the name of the calling method, optionally including the line number. public static string GetCaller(int skipFrames = 1, string format = \"{methodName}(:{lineNumber})\", bool includeLineNumber = true, Func<StackTrace, int, StackFrame?>? frameFinder = null) Parameters skipFrames int Number of frames to skip in the stack trace. Default is 1, which skips the current method. format string Format string for the output. Default is \"{methodName}(:{lineNumber})\". includeLineNumber bool If true, includes the line number in the output. Default is true. frameFinder Func<StackTrace, int, StackFrame> Function to find a specific stack frame. If null, the default frame finder is used. Returns string String representing the calling method's name and optionally its line number."
  },
  "api/RisingV.Shared.Diagnostics.StackTrace.html": {
    "href": "api/RisingV.Shared.Diagnostics.StackTrace.html",
    "title": "Class StackTrace | RisingV.Shared",
    "summary": "Class StackTrace Namespace RisingV.Shared.Diagnostics Assembly RisingV.Shared.dll public static class StackTrace Inheritance object StackTrace Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetTraceString() Gets a formatted string of the current stack trace, excluding public static string GetTraceString() Returns string"
  },
  "api/RisingV.Shared.Diagnostics.html": {
    "href": "api/RisingV.Shared.Diagnostics.html",
    "title": "Namespace RisingV.Shared.Diagnostics | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Diagnostics Classes MethodUtil StackTrace"
  },
  "api/RisingV.Shared.Engines.Dependency.html": {
    "href": "api/RisingV.Shared.Engines.Dependency.html",
    "title": "Class Dependency | RisingV.Shared",
    "summary": "Class Dependency Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents a dependency for an engine. public record Dependency : IEquatable<Dependency> Inheritance object Dependency Implements IEquatable<Dependency> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors Dependency(Type, string?) Represents a dependency for an engine. public Dependency(Type Type, string? Version = null) Parameters Type Type The type of the dependency. Version string The version of the dependency, if applicable. Properties Type The type of the dependency. public Type Type { get; init; } Property Value Type Version The version of the dependency, if applicable. public string? Version { get; init; } Property Value string Methods Equals(Dependency?) Indicates whether the current object is equal to another object of the same type. public virtual bool Equals(Dependency? other) Parameters other Dependency An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/RisingV.Shared.Engines.Engine-1.html": {
    "href": "api/RisingV.Shared.Engines.Engine-1.html",
    "title": "Class Engine<TConfig> | RisingV.Shared",
    "summary": "Class Engine<TConfig> Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents a base class for engines public abstract class Engine<TConfig> : IEngine<TConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable, IEnableable where TConfig : IEngineConfig Type Parameters TConfig The type of the engine configuration. Inheritance object Engine<TConfig> Implements IEngine<TConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable IEnableable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors Engine() protected Engine() Engine(TConfig) Represents a base class for engines protected Engine(TConfig config) Parameters config TConfig The configuration for the engine. Properties Config public TConfig Config { get; } Property Value TConfig Dependencies protected virtual List<Dependency> Dependencies { get; } Property Value List<Dependency> Enabled public virtual bool Enabled { get; } Property Value bool Recommended protected virtual List<Recommendation> Recommended { get; } Property Value List<Recommendation> Methods GetDependencies() Gets the dependencies of the engine. public List<Dependency> GetDependencies() Returns List<Dependency> GetDependencies<TX>() Gets the dependencies of the engine, excluding those that are assignable to the specified type. public List<Dependency> GetDependencies<TX>() Returns List<Dependency> Type Parameters TX GetRecommended() Gets the recommended dependencies of the engine. public List<Recommendation> GetRecommended() Returns List<Recommendation> GetRecommendedAsDependencies() public (List<Dependency>, List<Recommendation>) GetRecommendedAsDependencies() Returns (List<Dependency>, List<Recommendation>) GetRecommended<TX>() Gets the recommended dependencies of the engine, excluding those that are assignable to the specified type. public List<Recommendation> GetRecommended<TX>() Returns List<Recommendation> Type Parameters TX Initialize(EngineManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public virtual void Initialize(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public virtual void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Called when a dependency is loaded. public virtual void OnDependencyLoaded(Type dependency, EngineManager manager, List<IPlugin> plugins) Parameters dependency Type The type of the dependency that was loaded. manager EngineManager The engine manager that loaded the dependency. plugins List<IPlugin> The list of plugins that are currently loaded. OnReload(EngineManager, ReloadReason) Called when the engine is reloaded. public bool OnReload(EngineManager manager, ReloadReason reason) Parameters manager EngineManager reason ReloadReason Returns bool Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public abstract void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Reload(EngineManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public void Reload(EngineManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager EngineManager plugins List<IPlugin> reason ReloadReason Terminate(EngineManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public virtual void Terminate(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Unload(EngineManager, List<IPlugin>) Unloads the manager and its dependencies with a specific type. public void Unload(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Shared.Engines.EngineConfig.html": {
    "href": "api/RisingV.Shared.Engines.EngineConfig.html",
    "title": "Class EngineConfig | RisingV.Shared",
    "summary": "Class EngineConfig Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents the configuration for an engine. public class EngineConfig : FeatureConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EngineConfig(string, string, string, string, string, bool) Represents the configuration for an engine. public EngineConfig(string name, string description, string version, string author, string relativePath, bool autoLoadDependencies = true) Parameters name string Name of the engine. description string Description of the engine. version string Version of the engine. author string Author of the engine. relativePath string Relative path for the engine configuration. autoLoadDependencies bool Indicates whether to automatically load dependencies. Properties AutoLoadDependencies Should the engine automatically load its dependencies public bool AutoLoadDependencies { get; } Property Value bool Methods Deconstruct(out string, out string, out string, out string, out string?, out bool) public void Deconstruct(out string name, out string description, out string version, out string author, out string? relativePath, out bool autoLoadDependencies) Parameters name string description string version string author string relativePath string autoLoadDependencies bool"
  },
  "api/RisingV.Shared.Engines.EngineManager.html": {
    "href": "api/RisingV.Shared.Engines.EngineManager.html",
    "title": "Class EngineManager | RisingV.Shared",
    "summary": "Class EngineManager Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Manages the lifecycle and dependencies of game engines. public class EngineManager : TypeMapManager<IEngine, EngineManager>, IManager<IEngine, EngineManager>, IManager, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object ManagerBase<IEngine, EngineManager> TypeMapManager<IEngine, EngineManager> EngineManager Implements IManager<IEngine, EngineManager> IManager IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members ManagerBase<IEngine, EngineManager>.InitializedMap ManagerBase<IEngine, EngineManager>.LoadedMap ManagerBase<IEngine, EngineManager>.ReadyMap ManagerBase<IEngine, EngineManager>.ReloadingMap ManagerBase<IEngine, EngineManager>.PluginsMap ManagerBase<IEngine, EngineManager>.Log ManagerBase<IEngine, EngineManager>.AllowAutoReload ManagerBase<IEngine, EngineManager>.UnsubscribeEventsOnRemoval ManagerBase<IEngine, EngineManager>.IsInitialized ManagerBase<IEngine, EngineManager>.IsLoaded ManagerBase<IEngine, EngineManager>.IsReady ManagerBase<IEngine, EngineManager>.IsFullReloading ManagerBase<IEngine, EngineManager>.IsEnabled(IManageable) ManagerBase<IEngine, EngineManager>.IsEnabled<TX>(TX) ManagerBase<IEngine, EngineManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<IEngine, EngineManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<IEngine, EngineManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<IEngine, EngineManager>.Initialize(IPlugin) ManagerBase<IEngine, EngineManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<IEngine, EngineManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<IEngine, EngineManager>.Ready(IPlugin) ManagerBase<IEngine, EngineManager>.Load(IPlugin) ManagerBase<IEngine, EngineManager>.Unload(IPlugin) ManagerBase<IEngine, EngineManager>.Reload(ReloadReason) ManagerBase<IEngine, EngineManager>.Reload(IPlugin, ReloadReason) ManagerBase<IEngine, EngineManager>.OnReload(IPlugin, ReloadReason) ManagerBase<IEngine, EngineManager>.Terminate(IPlugin) ManagerBase<IEngine, EngineManager>.TryInitialize(IManageable, IPlugin) ManagerBase<IEngine, EngineManager>.TryReady(IManageable, IPlugin) ManagerBase<IEngine, EngineManager>.TryLoad(IManageable, IPlugin) ManagerBase<IEngine, EngineManager>.TryUnload(IManageable, IPlugin) ManagerBase<IEngine, EngineManager>.TryTerminate(IManageable, IPlugin) ManagerBase<IEngine, EngineManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<IEngine, EngineManager>.Add<TX>(IPlugin, bool) ManagerBase<IEngine, EngineManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<IEngine, EngineManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<IEngine, EngineManager>.OnManageableAdded<TX>(IPlugin, IEngine, bool) ManagerBase<IEngine, EngineManager>.OnManageableRemoved<TX>(IPlugin, IEngine) ManagerBase<IEngine, EngineManager>.Remove<TX>(IPlugin) ManagerBase<IEngine, EngineManager>.Remove<TX>(IPlugin, TX) ManagerBase<IEngine, EngineManager>.Get<TX>(bool) ManagerBase<IEngine, EngineManager>.Get(Type, bool) ManagerBase<IEngine, EngineManager>.GetOrCreate<TX>(IPlugin) ManagerBase<IEngine, EngineManager>.Has<TX>(bool) ManagerBase<IEngine, EngineManager>.Has(Type, bool, bool) ManagerBase<IEngine, EngineManager>.Has(string, bool, bool) ManagerBase<IEngine, EngineManager>.Count() ManagerBase<IEngine, EngineManager>.ForEach(Action<IEngine>) ManagerBase<IEngine, EngineManager>.GetList() ManagerBase<IEngine, EngineManager>.Select(Func<KeyValuePair<Type, IEngine>, IEngine>) ManagerBase<IEngine, EngineManager>.RequiredType() ManagerBase<IEngine, EngineManager>.RequiredTypeName() ManagerBase<IEngine, EngineManager>.GetManagedInfo() ManagerBase<IEngine, EngineManager>.Equals(ManagerBase<IEngine, EngineManager>) ManagerBase<IEngine, EngineManager>.Equals(object) ManagerBase<IEngine, EngineManager>.GetHashCode() ManagerBase<IEngine, EngineManager>.DebugPrintAll(string) ManagerBase<IEngine, EngineManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties AllowAutoLoad Should we allot auto-loading of dependencies public bool AllowAutoLoad { get; set; } Property Value bool Log protected override Logger Log { get; } Property Value Logger Methods AddEngine<T>(IPlugin, bool) public T? AddEngine<T>(IPlugin plugin, bool failIfExists = true) where T : IEngine Parameters plugin IPlugin failIfExists bool Returns T Type Parameters T AddEngine<T>(IPlugin, T, bool) public void AddEngine<T>(IPlugin plugin, T engine, bool failIfExists = true) where T : IEngine Parameters plugin IPlugin engine T failIfExists bool Type Parameters T AddEngine<T>(bool) public T? AddEngine<T>(bool failIfExists = true) where T : IEngine Parameters failIfExists bool Returns T Type Parameters T AddEngine<T>(T, bool) public void AddEngine<T>(T engine, bool failIfExists = true) where T : IEngine Parameters engine T failIfExists bool Type Parameters T CheckDependencies(IPlugin, bool) Checks the dependencies of the engine and attempts to auto-load them if allowed. public Map<Type, List<(Type, IManager)>> CheckDependencies(IPlugin plugin, bool logMissing = true) Parameters plugin IPlugin logMissing bool Returns Map<Type, List<(Type, IManager)>> CheckRecommended(IPlugin, bool) Checks the recommended manageables for the engine and logs any missing ones. public Map<Type, List<(Type, IManager)>> CheckRecommended(IPlugin plugin, bool logMissing = true) Parameters plugin IPlugin logMissing bool Returns Map<Type, List<(Type, IManager)>> GetEngine<T>(bool) public T? GetEngine<T>(bool required = true) where T : IEngine Parameters required bool Returns T Type Parameters T GetMissingManageables(IPlugin, IEngine, List<Dependency>) Gets the missing manageable dependencies for a given engine. public List<(Type, IManager)> GetMissingManageables(IPlugin plugin, IEngine engine, List<Dependency> dependencies) Parameters plugin IPlugin engine IEngine dependencies List<Dependency> Returns List<(Type, IManager)> List of missing manageable dependencies as tuples of (Type, IManager). Ready(IPlugin) Ready the manager with the given plugin including its manageable objects. This should be called after all other Managers have been loaded. public override void Ready(IPlugin plugin) Parameters plugin IPlugin Reload(IPlugin, ReloadReason) Reload the manager with the given plugin including its manageable objects. The manageable objects should be unloaded before calling their Reload method and should then be loaded after. public override void Reload(IPlugin plugin, ReloadReason reason) Parameters plugin IPlugin reason ReloadReason RemoveEngine<T>(IPlugin) public void RemoveEngine<T>(IPlugin plugin) where T : IEngine Parameters plugin IPlugin Type Parameters T TryReady(IEngine, IPlugin) public bool TryReady(IEngine engine, IPlugin plugin) Parameters engine IEngine plugin IPlugin Returns bool"
  },
  "api/RisingV.Shared.Engines.IEngine-1.html": {
    "href": "api/RisingV.Shared.Engines.IEngine-1.html",
    "title": "Interface IEngine<TConfig> | RisingV.Shared",
    "summary": "Interface IEngine<TConfig> Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents an engine that can be managed by the EngineManager with a specific configuration type. public interface IEngine<out TConfig> : IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable, IEnableable where TConfig : IEngineConfig Type Parameters TConfig Inherited Members IEngine.Enabled IEngine.GetDependencies<TX>() IEngine.GetDependencies() IEngine.GetRecommended<TX>() IEngine.GetRecommended() IEngine.GetRecommendedAsDependencies() IManageableLifecycle<EngineManager>.Initialize(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Load(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Unload(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Ready(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Terminate(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Reload(EngineManager, List<IPlugin>, ReloadReason) IManageableLifecycle<EngineManager>.OnReload(EngineManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Config TConfig Config { get; } Property Value TConfig"
  },
  "api/RisingV.Shared.Engines.IEngine.html": {
    "href": "api/RisingV.Shared.Engines.IEngine.html",
    "title": "Interface IEngine | RisingV.Shared",
    "summary": "Interface IEngine Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents an engine that can be managed by the EngineManager. public interface IEngine : IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable, IEnableable Inherited Members IManageableLifecycle<EngineManager>.Initialize(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Load(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Unload(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Ready(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Terminate(EngineManager, List<IPlugin>) IManageableLifecycle<EngineManager>.Reload(EngineManager, List<IPlugin>, ReloadReason) IManageableLifecycle<EngineManager>.OnReload(EngineManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Config IEngineConfig Config { get; } Property Value IEngineConfig Enabled bool Enabled { get; } Property Value bool Methods GetDependencies() List<Dependency> GetDependencies() Returns List<Dependency> GetDependencies<TX>() List<Dependency> GetDependencies<TX>() Returns List<Dependency> Type Parameters TX GetRecommended() List<Recommendation> GetRecommended() Returns List<Recommendation> GetRecommendedAsDependencies() (List<Dependency>, List<Recommendation>) GetRecommendedAsDependencies() Returns (List<Dependency>, List<Recommendation>) GetRecommended<TX>() List<Recommendation> GetRecommended<TX>() Returns List<Recommendation> Type Parameters TX"
  },
  "api/RisingV.Shared.Engines.IEngineConfig.html": {
    "href": "api/RisingV.Shared.Engines.IEngineConfig.html",
    "title": "Interface IEngineConfig | RisingV.Shared",
    "summary": "Interface IEngineConfig Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents the configuration for an engine. public interface IEngineConfig : IFeatureConfig, IConfig Inherited Members IFeatureConfig.Enabled IFeatureConfig.Name IFeatureConfig.Description IFeatureConfig.Version IFeatureConfig.Author IConfig.ConfigRelativePath IConfig.ConfigFileName IConfig.ConfigFile IConfig.Initialize() IConfig.Load() IConfig.Ready() IConfig.Unload() IConfig.Terminate() IConfig.Reload(ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties AutoLoadDependencies bool AutoLoadDependencies { get; } Property Value bool"
  },
  "api/RisingV.Shared.Engines.Recommendation.html": {
    "href": "api/RisingV.Shared.Engines.Recommendation.html",
    "title": "Class Recommendation | RisingV.Shared",
    "summary": "Class Recommendation Namespace RisingV.Shared.Engines Assembly RisingV.Shared.dll Represents a recommendation for an engine. public record Recommendation : IEquatable<Recommendation> Inheritance object Recommendation Implements IEquatable<Recommendation> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors Recommendation(string, string?) Represents a recommendation for an engine. public Recommendation(string Name, string? Version = null) Parameters Name string Version string Recommendation(Type, string?) public Recommendation(Type Type, string? Version = null) Parameters Type Type Version string Properties Name public string Name { get; init; } Property Value string Type public Type? Type { get; init; } Property Value Type Version public string? Version { get; init; } Property Value string Methods Equals(Recommendation?) Indicates whether the current object is equal to another object of the same type. public virtual bool Equals(Recommendation? other) Parameters other Recommendation An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsAssignableTo(Type) public bool IsAssignableTo(Type type) Parameters type Type Returns bool"
  },
  "api/RisingV.Shared.Engines.html": {
    "href": "api/RisingV.Shared.Engines.html",
    "title": "Namespace RisingV.Shared.Engines | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Engines Classes Dependency Represents a dependency for an engine. EngineConfig Represents the configuration for an engine. EngineManager Manages the lifecycle and dependencies of game engines. Engine<TConfig> Represents a base class for engines Recommendation Represents a recommendation for an engine. Interfaces IEngine Represents an engine that can be managed by the EngineManager. IEngineConfig Represents the configuration for an engine. IEngine<TConfig> Represents an engine that can be managed by the EngineManager with a specific configuration type."
  },
  "api/RisingV.Shared.Entities.IEntityComponentData.html": {
    "href": "api/RisingV.Shared.Entities.IEntityComponentData.html",
    "title": "Interface IEntityComponentData | RisingV.Shared",
    "summary": "Interface IEntityComponentData Namespace RisingV.Shared.Entities Assembly RisingV.Shared.dll Represents a component data interface for entities in the game world. public interface IEntityComponentData : IData Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Entities.html": {
    "href": "api/RisingV.Shared.Entities.html",
    "title": "Namespace RisingV.Shared.Entities | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Entities Interfaces IEntityComponentData Represents a component data interface for entities in the game world."
  },
  "api/RisingV.Shared.EventBridge.ArmorDestroyedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.ArmorDestroyedEvent.html",
    "title": "Class EventBridge.ArmorDestroyedEvent | RisingV.Shared",
    "summary": "Class EventBridge.ArmorDestroyedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Fired when an armour piece is destroyed. public record EventBridge.ArmorDestroyedEvent : Event<EventBridge.ArmorDestroyedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ArmorDestroyedEvent>>, IEquatable<EventBridge.ArmorDestroyedEvent> Inheritance object Event Event<EventBridge.ArmorDestroyedEvent> EventBridge.ArmorDestroyedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ArmorDestroyedEvent>> IEquatable<EventBridge.ArmorDestroyedEvent> Inherited Members Event<EventBridge.ArmorDestroyedEvent>.Subscribe(object, EventHandler<EventBridge.ArmorDestroyedEvent>) Event<EventBridge.ArmorDestroyedEvent>.Subscribe(object, Func<EventBridge.ArmorDestroyedEvent, ValueTask>) Event<EventBridge.ArmorDestroyedEvent>.Subscribe(object, Action<EventBridge.ArmorDestroyedEvent>) Event<EventBridge.ArmorDestroyedEvent>.Unsubscribe(object, EventHandler<EventBridge.ArmorDestroyedEvent>) Event<EventBridge.ArmorDestroyedEvent>.Subscribe(EventHandler<EventBridge.ArmorDestroyedEvent>) Event<EventBridge.ArmorDestroyedEvent>.Subscribe(Func<EventBridge.ArmorDestroyedEvent, ValueTask>) Event<EventBridge.ArmorDestroyedEvent>.Subscribe(Action<EventBridge.ArmorDestroyedEvent>) Event<EventBridge.ArmorDestroyedEvent>.Unsubscribe(EventHandler<EventBridge.ArmorDestroyedEvent>) Event<EventBridge.ArmorDestroyedEvent>.Unsubscribe(Action<EventBridge.ArmorDestroyedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ArmorDestroyedEvent(Entity, ArmorLevel?) Fired when an armour piece is destroyed. public ArmorDestroyedEvent(Entity WeaponEntity, ArmorLevel? Level) Parameters WeaponEntity Entity Level ArmorLevel? Properties Level public ArmorLevel? Level { get; init; } Property Value ArmorLevel? WeaponEntity public Entity WeaponEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.ArmorSpawnedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.ArmorSpawnedEvent.html",
    "title": "Class EventBridge.ArmorSpawnedEvent | RisingV.Shared",
    "summary": "Class EventBridge.ArmorSpawnedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Fired after an armour piece has spawned. public record EventBridge.ArmorSpawnedEvent : Event<EventBridge.ArmorSpawnedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ArmorSpawnedEvent>>, IEquatable<EventBridge.ArmorSpawnedEvent> Inheritance object Event Event<EventBridge.ArmorSpawnedEvent> EventBridge.ArmorSpawnedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ArmorSpawnedEvent>> IEquatable<EventBridge.ArmorSpawnedEvent> Inherited Members Event<EventBridge.ArmorSpawnedEvent>.Subscribe(object, EventHandler<EventBridge.ArmorSpawnedEvent>) Event<EventBridge.ArmorSpawnedEvent>.Subscribe(object, Func<EventBridge.ArmorSpawnedEvent, ValueTask>) Event<EventBridge.ArmorSpawnedEvent>.Subscribe(object, Action<EventBridge.ArmorSpawnedEvent>) Event<EventBridge.ArmorSpawnedEvent>.Unsubscribe(object, EventHandler<EventBridge.ArmorSpawnedEvent>) Event<EventBridge.ArmorSpawnedEvent>.Subscribe(EventHandler<EventBridge.ArmorSpawnedEvent>) Event<EventBridge.ArmorSpawnedEvent>.Subscribe(Func<EventBridge.ArmorSpawnedEvent, ValueTask>) Event<EventBridge.ArmorSpawnedEvent>.Subscribe(Action<EventBridge.ArmorSpawnedEvent>) Event<EventBridge.ArmorSpawnedEvent>.Unsubscribe(EventHandler<EventBridge.ArmorSpawnedEvent>) Event<EventBridge.ArmorSpawnedEvent>.Unsubscribe(Action<EventBridge.ArmorSpawnedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ArmorSpawnedEvent(Entity, ArmorLevel?) Fired after an armour piece has spawned. public ArmorSpawnedEvent(Entity WeaponEntity, ArmorLevel? Level) Parameters WeaponEntity Entity Level ArmorLevel? Properties Level public ArmorLevel? Level { get; init; } Property Value ArmorLevel? WeaponEntity public Entity WeaponEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.ArmorSpawningEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.ArmorSpawningEvent.html",
    "title": "Class EventBridge.ArmorSpawningEvent | RisingV.Shared",
    "summary": "Class EventBridge.ArmorSpawningEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Fired before an armour piece spawns. public record EventBridge.ArmorSpawningEvent : Event<EventBridge.ArmorSpawningEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ArmorSpawningEvent>>, IEquatable<EventBridge.ArmorSpawningEvent> Inheritance object Event Event<EventBridge.ArmorSpawningEvent> EventBridge.ArmorSpawningEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ArmorSpawningEvent>> IEquatable<EventBridge.ArmorSpawningEvent> Inherited Members Event<EventBridge.ArmorSpawningEvent>.Subscribe(object, EventHandler<EventBridge.ArmorSpawningEvent>) Event<EventBridge.ArmorSpawningEvent>.Subscribe(object, Func<EventBridge.ArmorSpawningEvent, ValueTask>) Event<EventBridge.ArmorSpawningEvent>.Subscribe(object, Action<EventBridge.ArmorSpawningEvent>) Event<EventBridge.ArmorSpawningEvent>.Unsubscribe(object, EventHandler<EventBridge.ArmorSpawningEvent>) Event<EventBridge.ArmorSpawningEvent>.Subscribe(EventHandler<EventBridge.ArmorSpawningEvent>) Event<EventBridge.ArmorSpawningEvent>.Subscribe(Func<EventBridge.ArmorSpawningEvent, ValueTask>) Event<EventBridge.ArmorSpawningEvent>.Subscribe(Action<EventBridge.ArmorSpawningEvent>) Event<EventBridge.ArmorSpawningEvent>.Unsubscribe(EventHandler<EventBridge.ArmorSpawningEvent>) Event<EventBridge.ArmorSpawningEvent>.Unsubscribe(Action<EventBridge.ArmorSpawningEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ArmorSpawningEvent(Entity, ArmorLevel?) Fired before an armour piece spawns. public ArmorSpawningEvent(Entity WeaponEntity, ArmorLevel? Level) Parameters WeaponEntity Entity Level ArmorLevel? Properties Level public ArmorLevel? Level { get; init; } Property Value ArmorLevel? WeaponEntity public Entity WeaponEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.BuffServerSpawnEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.BuffServerSpawnEvent.html",
    "title": "Class EventBridge.BuffServerSpawnEvent | RisingV.Shared",
    "summary": "Class EventBridge.BuffServerSpawnEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event raised on server side when a buff entity prefab spawns. public record EventBridge.BuffServerSpawnEvent : Event<EventBridge.BuffServerSpawnEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.BuffServerSpawnEvent>>, IEquatable<EventBridge.BuffServerSpawnEvent> Inheritance object Event Event<EventBridge.BuffServerSpawnEvent> EventBridge.BuffServerSpawnEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.BuffServerSpawnEvent>> IEquatable<EventBridge.BuffServerSpawnEvent> Inherited Members Event<EventBridge.BuffServerSpawnEvent>.Subscribe(object, EventHandler<EventBridge.BuffServerSpawnEvent>) Event<EventBridge.BuffServerSpawnEvent>.Subscribe(object, Func<EventBridge.BuffServerSpawnEvent, ValueTask>) Event<EventBridge.BuffServerSpawnEvent>.Subscribe(object, Action<EventBridge.BuffServerSpawnEvent>) Event<EventBridge.BuffServerSpawnEvent>.Unsubscribe(object, EventHandler<EventBridge.BuffServerSpawnEvent>) Event<EventBridge.BuffServerSpawnEvent>.Subscribe(EventHandler<EventBridge.BuffServerSpawnEvent>) Event<EventBridge.BuffServerSpawnEvent>.Subscribe(Func<EventBridge.BuffServerSpawnEvent, ValueTask>) Event<EventBridge.BuffServerSpawnEvent>.Subscribe(Action<EventBridge.BuffServerSpawnEvent>) Event<EventBridge.BuffServerSpawnEvent>.Unsubscribe(EventHandler<EventBridge.BuffServerSpawnEvent>) Event<EventBridge.BuffServerSpawnEvent>.Unsubscribe(Action<EventBridge.BuffServerSpawnEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BuffServerSpawnEvent(Entity, PrefabGUID) Event raised on server side when a buff entity prefab spawns. public BuffServerSpawnEvent(Entity BuffEntity, PrefabGUID BuffGuid) Parameters BuffEntity Entity BuffGuid PrefabGUID Properties BuffEntity public Entity BuffEntity { get; init; } Property Value Entity BuffGuid public PrefabGUID BuffGuid { get; init; } Property Value PrefabGUID"
  },
  "api/RisingV.Shared.EventBridge.DamagedAllEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedAllEvent.html",
    "title": "Class EventBridge.DamagedAllEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedAllEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedAllEvent : EventBridge.DamagedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent>, IEquatable<EventBridge.DamagedAllEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent EventBridge.DamagedAllEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> IEquatable<EventBridge.DamagedAllEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedAllEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedAllEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DamagedBossEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedBossEvent.html",
    "title": "Class EventBridge.DamagedBossEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedBossEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedBossEvent : EventBridge.DamagedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent>, IEquatable<EventBridge.DamagedBossEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent EventBridge.DamagedBossEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> IEquatable<EventBridge.DamagedBossEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedBossEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedBossEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DamagedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedEvent.html",
    "title": "Class EventBridge.DamagedEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedEvent : EventBridge.StatChangedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> Derived EventBridge.DamagedAllEvent EventBridge.DamagedBossEvent EventBridge.DamagedGatherableEvent EventBridge.DamagedMinionEvent EventBridge.DamagedPlayerEvent EventBridge.DamagedUnitEvent Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DamagedGatherableEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedGatherableEvent.html",
    "title": "Class EventBridge.DamagedGatherableEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedGatherableEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedGatherableEvent : EventBridge.DamagedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent>, IEquatable<EventBridge.DamagedGatherableEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent EventBridge.DamagedGatherableEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> IEquatable<EventBridge.DamagedGatherableEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedGatherableEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedGatherableEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DamagedMinionEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedMinionEvent.html",
    "title": "Class EventBridge.DamagedMinionEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedMinionEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedMinionEvent : EventBridge.DamagedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent>, IEquatable<EventBridge.DamagedMinionEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent EventBridge.DamagedMinionEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> IEquatable<EventBridge.DamagedMinionEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedMinionEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedMinionEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DamagedPlayerEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedPlayerEvent.html",
    "title": "Class EventBridge.DamagedPlayerEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedPlayerEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedPlayerEvent : EventBridge.DamagedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent>, IEquatable<EventBridge.DamagedPlayerEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent EventBridge.DamagedPlayerEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> IEquatable<EventBridge.DamagedPlayerEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedPlayerEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedPlayerEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DamagedUnitEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DamagedUnitEvent.html",
    "title": "Class EventBridge.DamagedUnitEvent | RisingV.Shared",
    "summary": "Class EventBridge.DamagedUnitEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic damage event raised when any entity is damaged. public record EventBridge.DamagedUnitEvent : EventBridge.DamagedEvent, IEquatable<Event>, IEquatable<EventBridge.StatChangedEvent>, EventBridge.IDamagedEvent, EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.DamagedEvent>, IEquatable<EventBridge.DamagedUnitEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.DamagedEvent EventBridge.DamagedUnitEvent Implements IEquatable<Event> IEquatable<EventBridge.StatChangedEvent> EventBridge.IDamagedEvent EventBridge.IStatChangedEvent<StatChangeData> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.DamagedEvent> IEquatable<EventBridge.DamagedUnitEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DamagedUnitEvent(Entity, Entity, StatChangeData) Generic damage event raised when any entity is damaged. public DamagedUnitEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.DeathAllEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathAllEvent.html",
    "title": "Class EventBridge.DeathAllEvent | RisingV.Shared",
    "summary": "Class EventBridge.DeathAllEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathAllEvent : EventBridge.DeathEvent<EventBridge.DeathAllEvent>, IEquatable<Event>, IEquatable<Event<EventBridge.DeathAllEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<EventBridge.DeathAllEvent>>, IEquatable<EventBridge.DeathAllEvent> Inheritance object Event Event<EventBridge.DeathAllEvent> EventBridge.DeathEvent<EventBridge.DeathAllEvent> EventBridge.DeathAllEvent Implements IEquatable<Event> IEquatable<Event<EventBridge.DeathAllEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<EventBridge.DeathAllEvent>> IEquatable<EventBridge.DeathAllEvent> Inherited Members EventBridge.DeathEvent<EventBridge.DeathAllEvent>.SourceEntity EventBridge.DeathEvent<EventBridge.DeathAllEvent>.TargetEntity EventBridge.DeathEvent<EventBridge.DeathAllEvent>.NativeEvent Event<EventBridge.DeathAllEvent>.Subscribe(object, EventHandler<EventBridge.DeathAllEvent>) Event<EventBridge.DeathAllEvent>.Subscribe(object, Func<EventBridge.DeathAllEvent, ValueTask>) Event<EventBridge.DeathAllEvent>.Subscribe(object, Action<EventBridge.DeathAllEvent>) Event<EventBridge.DeathAllEvent>.Unsubscribe(object, EventHandler<EventBridge.DeathAllEvent>) Event<EventBridge.DeathAllEvent>.Subscribe(EventHandler<EventBridge.DeathAllEvent>) Event<EventBridge.DeathAllEvent>.Subscribe(Func<EventBridge.DeathAllEvent, ValueTask>) Event<EventBridge.DeathAllEvent>.Subscribe(Action<EventBridge.DeathAllEvent>) Event<EventBridge.DeathAllEvent>.Unsubscribe(EventHandler<EventBridge.DeathAllEvent>) Event<EventBridge.DeathAllEvent>.Unsubscribe(Action<EventBridge.DeathAllEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathAllEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathAllEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent"
  },
  "api/RisingV.Shared.EventBridge.DeathBossEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathBossEvent.html",
    "title": "Class EventBridge.DeathBossEvent | RisingV.Shared",
    "summary": "Class EventBridge.DeathBossEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathBossEvent : EventBridge.DeathEvent<EventBridge.DeathBossEvent>, IEquatable<Event>, IEquatable<Event<EventBridge.DeathBossEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<EventBridge.DeathBossEvent>>, IEquatable<EventBridge.DeathBossEvent> Inheritance object Event Event<EventBridge.DeathBossEvent> EventBridge.DeathEvent<EventBridge.DeathBossEvent> EventBridge.DeathBossEvent Implements IEquatable<Event> IEquatable<Event<EventBridge.DeathBossEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<EventBridge.DeathBossEvent>> IEquatable<EventBridge.DeathBossEvent> Inherited Members EventBridge.DeathEvent<EventBridge.DeathBossEvent>.SourceEntity EventBridge.DeathEvent<EventBridge.DeathBossEvent>.TargetEntity EventBridge.DeathEvent<EventBridge.DeathBossEvent>.NativeEvent Event<EventBridge.DeathBossEvent>.Subscribe(object, EventHandler<EventBridge.DeathBossEvent>) Event<EventBridge.DeathBossEvent>.Subscribe(object, Func<EventBridge.DeathBossEvent, ValueTask>) Event<EventBridge.DeathBossEvent>.Subscribe(object, Action<EventBridge.DeathBossEvent>) Event<EventBridge.DeathBossEvent>.Unsubscribe(object, EventHandler<EventBridge.DeathBossEvent>) Event<EventBridge.DeathBossEvent>.Subscribe(EventHandler<EventBridge.DeathBossEvent>) Event<EventBridge.DeathBossEvent>.Subscribe(Func<EventBridge.DeathBossEvent, ValueTask>) Event<EventBridge.DeathBossEvent>.Subscribe(Action<EventBridge.DeathBossEvent>) Event<EventBridge.DeathBossEvent>.Unsubscribe(EventHandler<EventBridge.DeathBossEvent>) Event<EventBridge.DeathBossEvent>.Unsubscribe(Action<EventBridge.DeathBossEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathBossEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathBossEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent"
  },
  "api/RisingV.Shared.EventBridge.DeathEvent-1.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathEvent-1.html",
    "title": "Class EventBridge.DeathEvent<TEvent> | RisingV.Shared",
    "summary": "Class EventBridge.DeathEvent<TEvent> Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathEvent<TEvent> : Event<TEvent>, IEquatable<Event>, IEquatable<Event<TEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<TEvent>> where TEvent : IEvent Type Parameters TEvent Inheritance object Event Event<TEvent> EventBridge.DeathEvent<TEvent> Implements IEquatable<Event> IEquatable<Event<TEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<TEvent>> Derived EventBridge.DeathAllEvent EventBridge.DeathBossEvent EventBridge.DeathGatherableEvent EventBridge.DeathMinionEvent EventBridge.DeathPlayerEvent EventBridge.DeathUnitEvent Inherited Members Event<TEvent>.Subscribe(object, EventHandler<TEvent>) Event<TEvent>.Subscribe(object, Func<TEvent, ValueTask>) Event<TEvent>.Subscribe(object, Action<TEvent>) Event<TEvent>.Unsubscribe(object, EventHandler<TEvent>) Event<TEvent>.Subscribe(EventHandler<TEvent>) Event<TEvent>.Subscribe(Func<TEvent, ValueTask>) Event<TEvent>.Subscribe(Action<TEvent>) Event<TEvent>.Unsubscribe(EventHandler<TEvent>) Event<TEvent>.Unsubscribe(Action<TEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent Properties NativeEvent public DeathEvent NativeEvent { get; init; } Property Value DeathEvent SourceEntity public Entity SourceEntity { get; init; } Property Value Entity TargetEntity public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.DeathGatherableEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathGatherableEvent.html",
    "title": "Class EventBridge.DeathGatherableEvent | RisingV.Shared",
    "summary": "Class EventBridge.DeathGatherableEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathGatherableEvent : EventBridge.DeathEvent<EventBridge.DeathGatherableEvent>, IEquatable<Event>, IEquatable<Event<EventBridge.DeathGatherableEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<EventBridge.DeathGatherableEvent>>, IEquatable<EventBridge.DeathGatherableEvent> Inheritance object Event Event<EventBridge.DeathGatherableEvent> EventBridge.DeathEvent<EventBridge.DeathGatherableEvent> EventBridge.DeathGatherableEvent Implements IEquatable<Event> IEquatable<Event<EventBridge.DeathGatherableEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<EventBridge.DeathGatherableEvent>> IEquatable<EventBridge.DeathGatherableEvent> Inherited Members EventBridge.DeathEvent<EventBridge.DeathGatherableEvent>.SourceEntity EventBridge.DeathEvent<EventBridge.DeathGatherableEvent>.TargetEntity EventBridge.DeathEvent<EventBridge.DeathGatherableEvent>.NativeEvent Event<EventBridge.DeathGatherableEvent>.Subscribe(object, EventHandler<EventBridge.DeathGatherableEvent>) Event<EventBridge.DeathGatherableEvent>.Subscribe(object, Func<EventBridge.DeathGatherableEvent, ValueTask>) Event<EventBridge.DeathGatherableEvent>.Subscribe(object, Action<EventBridge.DeathGatherableEvent>) Event<EventBridge.DeathGatherableEvent>.Unsubscribe(object, EventHandler<EventBridge.DeathGatherableEvent>) Event<EventBridge.DeathGatherableEvent>.Subscribe(EventHandler<EventBridge.DeathGatherableEvent>) Event<EventBridge.DeathGatherableEvent>.Subscribe(Func<EventBridge.DeathGatherableEvent, ValueTask>) Event<EventBridge.DeathGatherableEvent>.Subscribe(Action<EventBridge.DeathGatherableEvent>) Event<EventBridge.DeathGatherableEvent>.Unsubscribe(EventHandler<EventBridge.DeathGatherableEvent>) Event<EventBridge.DeathGatherableEvent>.Unsubscribe(Action<EventBridge.DeathGatherableEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathGatherableEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathGatherableEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent"
  },
  "api/RisingV.Shared.EventBridge.DeathMinionEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathMinionEvent.html",
    "title": "Class EventBridge.DeathMinionEvent | RisingV.Shared",
    "summary": "Class EventBridge.DeathMinionEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathMinionEvent : EventBridge.DeathEvent<EventBridge.DeathMinionEvent>, IEquatable<Event>, IEquatable<Event<EventBridge.DeathMinionEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<EventBridge.DeathMinionEvent>>, IEquatable<EventBridge.DeathMinionEvent> Inheritance object Event Event<EventBridge.DeathMinionEvent> EventBridge.DeathEvent<EventBridge.DeathMinionEvent> EventBridge.DeathMinionEvent Implements IEquatable<Event> IEquatable<Event<EventBridge.DeathMinionEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<EventBridge.DeathMinionEvent>> IEquatable<EventBridge.DeathMinionEvent> Inherited Members EventBridge.DeathEvent<EventBridge.DeathMinionEvent>.SourceEntity EventBridge.DeathEvent<EventBridge.DeathMinionEvent>.TargetEntity EventBridge.DeathEvent<EventBridge.DeathMinionEvent>.NativeEvent Event<EventBridge.DeathMinionEvent>.Subscribe(object, EventHandler<EventBridge.DeathMinionEvent>) Event<EventBridge.DeathMinionEvent>.Subscribe(object, Func<EventBridge.DeathMinionEvent, ValueTask>) Event<EventBridge.DeathMinionEvent>.Subscribe(object, Action<EventBridge.DeathMinionEvent>) Event<EventBridge.DeathMinionEvent>.Unsubscribe(object, EventHandler<EventBridge.DeathMinionEvent>) Event<EventBridge.DeathMinionEvent>.Subscribe(EventHandler<EventBridge.DeathMinionEvent>) Event<EventBridge.DeathMinionEvent>.Subscribe(Func<EventBridge.DeathMinionEvent, ValueTask>) Event<EventBridge.DeathMinionEvent>.Subscribe(Action<EventBridge.DeathMinionEvent>) Event<EventBridge.DeathMinionEvent>.Unsubscribe(EventHandler<EventBridge.DeathMinionEvent>) Event<EventBridge.DeathMinionEvent>.Unsubscribe(Action<EventBridge.DeathMinionEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathMinionEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathMinionEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent"
  },
  "api/RisingV.Shared.EventBridge.DeathPlayerEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathPlayerEvent.html",
    "title": "Class EventBridge.DeathPlayerEvent | RisingV.Shared",
    "summary": "Class EventBridge.DeathPlayerEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathPlayerEvent : EventBridge.DeathEvent<EventBridge.DeathPlayerEvent>, IEquatable<Event>, IEquatable<Event<EventBridge.DeathPlayerEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<EventBridge.DeathPlayerEvent>>, IEquatable<EventBridge.DeathPlayerEvent> Inheritance object Event Event<EventBridge.DeathPlayerEvent> EventBridge.DeathEvent<EventBridge.DeathPlayerEvent> EventBridge.DeathPlayerEvent Implements IEquatable<Event> IEquatable<Event<EventBridge.DeathPlayerEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<EventBridge.DeathPlayerEvent>> IEquatable<EventBridge.DeathPlayerEvent> Inherited Members EventBridge.DeathEvent<EventBridge.DeathPlayerEvent>.SourceEntity EventBridge.DeathEvent<EventBridge.DeathPlayerEvent>.TargetEntity EventBridge.DeathEvent<EventBridge.DeathPlayerEvent>.NativeEvent Event<EventBridge.DeathPlayerEvent>.Subscribe(object, EventHandler<EventBridge.DeathPlayerEvent>) Event<EventBridge.DeathPlayerEvent>.Subscribe(object, Func<EventBridge.DeathPlayerEvent, ValueTask>) Event<EventBridge.DeathPlayerEvent>.Subscribe(object, Action<EventBridge.DeathPlayerEvent>) Event<EventBridge.DeathPlayerEvent>.Unsubscribe(object, EventHandler<EventBridge.DeathPlayerEvent>) Event<EventBridge.DeathPlayerEvent>.Subscribe(EventHandler<EventBridge.DeathPlayerEvent>) Event<EventBridge.DeathPlayerEvent>.Subscribe(Func<EventBridge.DeathPlayerEvent, ValueTask>) Event<EventBridge.DeathPlayerEvent>.Subscribe(Action<EventBridge.DeathPlayerEvent>) Event<EventBridge.DeathPlayerEvent>.Unsubscribe(EventHandler<EventBridge.DeathPlayerEvent>) Event<EventBridge.DeathPlayerEvent>.Unsubscribe(Action<EventBridge.DeathPlayerEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathPlayerEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathPlayerEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent"
  },
  "api/RisingV.Shared.EventBridge.DeathUnitEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.DeathUnitEvent.html",
    "title": "Class EventBridge.DeathUnitEvent | RisingV.Shared",
    "summary": "Class EventBridge.DeathUnitEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic record base for strongly typed death events. public record EventBridge.DeathUnitEvent : EventBridge.DeathEvent<EventBridge.DeathUnitEvent>, IEquatable<Event>, IEquatable<Event<EventBridge.DeathUnitEvent>>, EventBridge.IDeathEvent, IEvent, IEquatable<EventBridge.DeathEvent<EventBridge.DeathUnitEvent>>, IEquatable<EventBridge.DeathUnitEvent> Inheritance object Event Event<EventBridge.DeathUnitEvent> EventBridge.DeathEvent<EventBridge.DeathUnitEvent> EventBridge.DeathUnitEvent Implements IEquatable<Event> IEquatable<Event<EventBridge.DeathUnitEvent>> EventBridge.IDeathEvent IEvent IEquatable<EventBridge.DeathEvent<EventBridge.DeathUnitEvent>> IEquatable<EventBridge.DeathUnitEvent> Inherited Members EventBridge.DeathEvent<EventBridge.DeathUnitEvent>.SourceEntity EventBridge.DeathEvent<EventBridge.DeathUnitEvent>.TargetEntity EventBridge.DeathEvent<EventBridge.DeathUnitEvent>.NativeEvent Event<EventBridge.DeathUnitEvent>.Subscribe(object, EventHandler<EventBridge.DeathUnitEvent>) Event<EventBridge.DeathUnitEvent>.Subscribe(object, Func<EventBridge.DeathUnitEvent, ValueTask>) Event<EventBridge.DeathUnitEvent>.Subscribe(object, Action<EventBridge.DeathUnitEvent>) Event<EventBridge.DeathUnitEvent>.Unsubscribe(object, EventHandler<EventBridge.DeathUnitEvent>) Event<EventBridge.DeathUnitEvent>.Subscribe(EventHandler<EventBridge.DeathUnitEvent>) Event<EventBridge.DeathUnitEvent>.Subscribe(Func<EventBridge.DeathUnitEvent, ValueTask>) Event<EventBridge.DeathUnitEvent>.Subscribe(Action<EventBridge.DeathUnitEvent>) Event<EventBridge.DeathUnitEvent>.Unsubscribe(EventHandler<EventBridge.DeathUnitEvent>) Event<EventBridge.DeathUnitEvent>.Unsubscribe(Action<EventBridge.DeathUnitEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DeathUnitEvent(Entity, Entity, DeathEvent) Generic record base for strongly typed death events. public DeathUnitEvent(Entity SourceEntity, Entity TargetEntity, DeathEvent NativeEvent) Parameters SourceEntity Entity TargetEntity Entity NativeEvent DeathEvent"
  },
  "api/RisingV.Shared.EventBridge.EquipmentEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.EquipmentEvent.html",
    "title": "Class EventBridge.EquipmentEvent | RisingV.Shared",
    "summary": "Class EventBridge.EquipmentEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Base event for equipment‐related operations. public record EventBridge.EquipmentEvent : Event<EventBridge.EquipmentEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> Derived EventBridge.EquipmentItemEvent EventBridge.OnDroppedItemsEvent EventBridge.OnMoveAllItemsBetweenInventoriesEvent EventBridge.OnMoveItemBetweenInventoriesEvent Inherited Members Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EquipmentEvent(FromCharacter) Base event for equipment‐related operations. public EquipmentEvent(FromCharacter Character) Parameters Character FromCharacter Properties Character public FromCharacter Character { get; init; } Property Value FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.EquipmentItemEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.EquipmentItemEvent.html",
    "title": "Class EventBridge.EquipmentItemEvent | RisingV.Shared",
    "summary": "Class EventBridge.EquipmentItemEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.EquipmentItemEvent : EventBridge.EquipmentEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.EquipmentItemEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.EquipmentItemEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.EquipmentItemEvent> Derived EventBridge.OnDropInventoryItemEvent EventBridge.OnEquipItemEvent EventBridge.OnEquipItemFromInventoryEvent EventBridge.OnItemPickupEvent EventBridge.OnUnequipItemEvent Inherited Members EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors EquipmentItemEvent(Entity, FromCharacter) public EquipmentItemEvent(Entity ItemEntity, FromCharacter Character) Parameters ItemEntity Entity Character FromCharacter Properties ItemEntity public Entity ItemEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.IDamagedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.IDamagedEvent.html",
    "title": "Interface EventBridge.IDamagedEvent | RisingV.Shared",
    "summary": "Interface EventBridge.IDamagedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Marker interface for events that represent damage (a specialised stat change). public interface EventBridge.IDamagedEvent : EventBridge.IStatChangedEvent<StatChangeData>, EventBridge.IStatChangedEvent, IEvent Inherited Members EventBridge.IStatChangedEvent<StatChangeData>.Data EventBridge.IStatChangedEvent.SourceEntity EventBridge.IStatChangedEvent.TargetEntity Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.IDeathEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.IDeathEvent.html",
    "title": "Interface EventBridge.IDeathEvent | RisingV.Shared",
    "summary": "Interface EventBridge.IDeathEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Common interface for death‐related events. public interface EventBridge.IDeathEvent : IEvent Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties NativeEvent DeathEvent NativeEvent { get; } Property Value DeathEvent SourceEntity Entity SourceEntity { get; } Property Value Entity TargetEntity Entity TargetEntity { get; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.IStatChangedEvent-1.html": {
    "href": "api/RisingV.Shared.EventBridge.IStatChangedEvent-1.html",
    "title": "Interface EventBridge.IStatChangedEvent<TData> | RisingV.Shared",
    "summary": "Interface EventBridge.IStatChangedEvent<TData> Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic interface for events that carry typed stat‐change data. public interface EventBridge.IStatChangedEvent<out TData> : EventBridge.IStatChangedEvent, IEvent where TData : StatChangeData Type Parameters TData Inherited Members EventBridge.IStatChangedEvent.SourceEntity EventBridge.IStatChangedEvent.TargetEntity Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Data TData Data { get; } Property Value TData"
  },
  "api/RisingV.Shared.EventBridge.IStatChangedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.IStatChangedEvent.html",
    "title": "Interface EventBridge.IStatChangedEvent | RisingV.Shared",
    "summary": "Interface EventBridge.IStatChangedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Base interface for events that change stats of entities. public interface EventBridge.IStatChangedEvent : IEvent Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties SourceEntity Entity SourceEntity { get; } Property Value Entity TargetEntity Entity TargetEntity { get; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.OnDropInventoryItemEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnDropInventoryItemEvent.html",
    "title": "Class EventBridge.OnDropInventoryItemEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnDropInventoryItemEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnDropInventoryItemEvent : EventBridge.EquipmentItemEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.EquipmentItemEvent>, IEquatable<EventBridge.OnDropInventoryItemEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.EquipmentItemEvent EventBridge.OnDropInventoryItemEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.EquipmentItemEvent> IEquatable<EventBridge.OnDropInventoryItemEvent> Inherited Members EventBridge.EquipmentItemEvent.ItemEntity EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnDropInventoryItemEvent(Entity, FromCharacter) public OnDropInventoryItemEvent(Entity ItemEntity, FromCharacter Character) Parameters ItemEntity Entity Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnDroppedItemsEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnDroppedItemsEvent.html",
    "title": "Class EventBridge.OnDroppedItemsEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnDroppedItemsEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnDroppedItemsEvent : EventBridge.EquipmentEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.OnDroppedItemsEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.OnDroppedItemsEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.OnDroppedItemsEvent> Inherited Members EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnDroppedItemsEvent(FromCharacter) public OnDroppedItemsEvent(FromCharacter Character) Parameters Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnEquipItemEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnEquipItemEvent.html",
    "title": "Class EventBridge.OnEquipItemEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnEquipItemEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnEquipItemEvent : EventBridge.EquipmentItemEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.EquipmentItemEvent>, IEquatable<EventBridge.OnEquipItemEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.EquipmentItemEvent EventBridge.OnEquipItemEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.EquipmentItemEvent> IEquatable<EventBridge.OnEquipItemEvent> Inherited Members EventBridge.EquipmentItemEvent.ItemEntity EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnEquipItemEvent(Entity, FromCharacter) public OnEquipItemEvent(Entity ItemEntity, FromCharacter Character) Parameters ItemEntity Entity Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnEquipItemFromInventoryEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnEquipItemFromInventoryEvent.html",
    "title": "Class EventBridge.OnEquipItemFromInventoryEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnEquipItemFromInventoryEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnEquipItemFromInventoryEvent : EventBridge.EquipmentItemEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.EquipmentItemEvent>, IEquatable<EventBridge.OnEquipItemFromInventoryEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.EquipmentItemEvent EventBridge.OnEquipItemFromInventoryEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.EquipmentItemEvent> IEquatable<EventBridge.OnEquipItemFromInventoryEvent> Inherited Members EventBridge.EquipmentItemEvent.ItemEntity EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnEquipItemFromInventoryEvent(Entity, FromCharacter) public OnEquipItemFromInventoryEvent(Entity ItemEntity, FromCharacter Character) Parameters ItemEntity Entity Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnFilesChangedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnFilesChangedEvent.html",
    "title": "Class EventBridge.OnFilesChangedEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnFilesChangedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when files change in the server's file system. public record EventBridge.OnFilesChangedEvent : Event<EventBridge.OnFilesChangedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnFilesChangedEvent>>, IEquatable<EventBridge.OnFilesChangedEvent> Inheritance object Event Event<EventBridge.OnFilesChangedEvent> EventBridge.OnFilesChangedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnFilesChangedEvent>> IEquatable<EventBridge.OnFilesChangedEvent> Inherited Members Event<EventBridge.OnFilesChangedEvent>.Subscribe(object, EventHandler<EventBridge.OnFilesChangedEvent>) Event<EventBridge.OnFilesChangedEvent>.Subscribe(object, Func<EventBridge.OnFilesChangedEvent, ValueTask>) Event<EventBridge.OnFilesChangedEvent>.Subscribe(object, Action<EventBridge.OnFilesChangedEvent>) Event<EventBridge.OnFilesChangedEvent>.Unsubscribe(object, EventHandler<EventBridge.OnFilesChangedEvent>) Event<EventBridge.OnFilesChangedEvent>.Subscribe(EventHandler<EventBridge.OnFilesChangedEvent>) Event<EventBridge.OnFilesChangedEvent>.Subscribe(Func<EventBridge.OnFilesChangedEvent, ValueTask>) Event<EventBridge.OnFilesChangedEvent>.Subscribe(Action<EventBridge.OnFilesChangedEvent>) Event<EventBridge.OnFilesChangedEvent>.Unsubscribe(EventHandler<EventBridge.OnFilesChangedEvent>) Event<EventBridge.OnFilesChangedEvent>.Unsubscribe(Action<EventBridge.OnFilesChangedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnFilesChangedEvent(IReadOnlyList<FileChange>) Event triggered when files change in the server's file system. public OnFilesChangedEvent(IReadOnlyList<FileChange> FileChanges) Parameters FileChanges IReadOnlyList<FileChange> A read-only list of file changes that occurred. Properties FileChanges A read-only list of file changes that occurred. public IReadOnlyList<FileChange> FileChanges { get; init; } Property Value IReadOnlyList<FileChange>"
  },
  "api/RisingV.Shared.EventBridge.OnGameDataDestroyedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnGameDataDestroyedEvent.html",
    "title": "Class EventBridge.OnGameDataDestroyedEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnGameDataDestroyedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the game data is destroyed. public record EventBridge.OnGameDataDestroyedEvent : Event<EventBridge.OnGameDataDestroyedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnGameDataDestroyedEvent>>, IEquatable<EventBridge.OnGameDataDestroyedEvent> Inheritance object Event Event<EventBridge.OnGameDataDestroyedEvent> EventBridge.OnGameDataDestroyedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnGameDataDestroyedEvent>> IEquatable<EventBridge.OnGameDataDestroyedEvent> Inherited Members Event<EventBridge.OnGameDataDestroyedEvent>.Subscribe(object, EventHandler<EventBridge.OnGameDataDestroyedEvent>) Event<EventBridge.OnGameDataDestroyedEvent>.Subscribe(object, Func<EventBridge.OnGameDataDestroyedEvent, ValueTask>) Event<EventBridge.OnGameDataDestroyedEvent>.Subscribe(object, Action<EventBridge.OnGameDataDestroyedEvent>) Event<EventBridge.OnGameDataDestroyedEvent>.Unsubscribe(object, EventHandler<EventBridge.OnGameDataDestroyedEvent>) Event<EventBridge.OnGameDataDestroyedEvent>.Subscribe(EventHandler<EventBridge.OnGameDataDestroyedEvent>) Event<EventBridge.OnGameDataDestroyedEvent>.Subscribe(Func<EventBridge.OnGameDataDestroyedEvent, ValueTask>) Event<EventBridge.OnGameDataDestroyedEvent>.Subscribe(Action<EventBridge.OnGameDataDestroyedEvent>) Event<EventBridge.OnGameDataDestroyedEvent>.Unsubscribe(EventHandler<EventBridge.OnGameDataDestroyedEvent>) Event<EventBridge.OnGameDataDestroyedEvent>.Unsubscribe(Action<EventBridge.OnGameDataDestroyedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnGameDataInitializedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnGameDataInitializedEvent.html",
    "title": "Class EventBridge.OnGameDataInitializedEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnGameDataInitializedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the game data is initialized. public record EventBridge.OnGameDataInitializedEvent : Event<EventBridge.OnGameDataInitializedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnGameDataInitializedEvent>>, IEquatable<EventBridge.OnGameDataInitializedEvent> Inheritance object Event Event<EventBridge.OnGameDataInitializedEvent> EventBridge.OnGameDataInitializedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnGameDataInitializedEvent>> IEquatable<EventBridge.OnGameDataInitializedEvent> Inherited Members Event<EventBridge.OnGameDataInitializedEvent>.Subscribe(object, EventHandler<EventBridge.OnGameDataInitializedEvent>) Event<EventBridge.OnGameDataInitializedEvent>.Subscribe(object, Func<EventBridge.OnGameDataInitializedEvent, ValueTask>) Event<EventBridge.OnGameDataInitializedEvent>.Subscribe(object, Action<EventBridge.OnGameDataInitializedEvent>) Event<EventBridge.OnGameDataInitializedEvent>.Unsubscribe(object, EventHandler<EventBridge.OnGameDataInitializedEvent>) Event<EventBridge.OnGameDataInitializedEvent>.Subscribe(EventHandler<EventBridge.OnGameDataInitializedEvent>) Event<EventBridge.OnGameDataInitializedEvent>.Subscribe(Func<EventBridge.OnGameDataInitializedEvent, ValueTask>) Event<EventBridge.OnGameDataInitializedEvent>.Subscribe(Action<EventBridge.OnGameDataInitializedEvent>) Event<EventBridge.OnGameDataInitializedEvent>.Unsubscribe(EventHandler<EventBridge.OnGameDataInitializedEvent>) Event<EventBridge.OnGameDataInitializedEvent>.Unsubscribe(Action<EventBridge.OnGameDataInitializedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnGameDataInitializedEvent(World) Event triggered when the game data is initialized. public OnGameDataInitializedEvent(World World) Parameters World World The world instance where the game data is initialized. Properties World The world instance where the game data is initialized. public World World { get; init; } Property Value World"
  },
  "api/RisingV.Shared.EventBridge.OnItemPickupEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnItemPickupEvent.html",
    "title": "Class EventBridge.OnItemPickupEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnItemPickupEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnItemPickupEvent : EventBridge.EquipmentItemEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.EquipmentItemEvent>, IEquatable<EventBridge.OnItemPickupEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.EquipmentItemEvent EventBridge.OnItemPickupEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.EquipmentItemEvent> IEquatable<EventBridge.OnItemPickupEvent> Inherited Members EventBridge.EquipmentItemEvent.ItemEntity EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnItemPickupEvent(Entity, FromCharacter) public OnItemPickupEvent(Entity ItemEntity, FromCharacter Character) Parameters ItemEntity Entity Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnMoveAllItemsBetweenInventoriesEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnMoveAllItemsBetweenInventoriesEvent.html",
    "title": "Class EventBridge.OnMoveAllItemsBetweenInventoriesEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnMoveAllItemsBetweenInventoriesEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnMoveAllItemsBetweenInventoriesEvent : EventBridge.EquipmentEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.OnMoveAllItemsBetweenInventoriesEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.OnMoveAllItemsBetweenInventoriesEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.OnMoveAllItemsBetweenInventoriesEvent> Inherited Members EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnMoveAllItemsBetweenInventoriesEvent(FromCharacter) public OnMoveAllItemsBetweenInventoriesEvent(FromCharacter Character) Parameters Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnMoveItemBetweenInventoriesEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnMoveItemBetweenInventoriesEvent.html",
    "title": "Class EventBridge.OnMoveItemBetweenInventoriesEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnMoveItemBetweenInventoriesEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnMoveItemBetweenInventoriesEvent : EventBridge.EquipmentEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.OnMoveItemBetweenInventoriesEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.OnMoveItemBetweenInventoriesEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.OnMoveItemBetweenInventoriesEvent> Inherited Members EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnMoveItemBetweenInventoriesEvent(FromCharacter) public OnMoveItemBetweenInventoriesEvent(FromCharacter Character) Parameters Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.OnPersistenceSystemLoadedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPersistenceSystemLoadedEvent.html",
    "title": "Class EventBridge.OnPersistenceSystemLoadedEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPersistenceSystemLoadedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the ProjectM.LoadPersistenceSystemV2.SetLoadState(Unity.Entities.EntityManager, ProjectM.ServerStartupState.State) is post called and the state is ProjectM.ServerStartupState.State.SuccessfulStartup. public record EventBridge.OnPersistenceSystemLoadedEvent : Event<EventBridge.OnPersistenceSystemLoadedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPersistenceSystemLoadedEvent>>, IEquatable<EventBridge.OnPersistenceSystemLoadedEvent> Inheritance object Event Event<EventBridge.OnPersistenceSystemLoadedEvent> EventBridge.OnPersistenceSystemLoadedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPersistenceSystemLoadedEvent>> IEquatable<EventBridge.OnPersistenceSystemLoadedEvent> Inherited Members Event<EventBridge.OnPersistenceSystemLoadedEvent>.Subscribe(object, EventHandler<EventBridge.OnPersistenceSystemLoadedEvent>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Subscribe(object, Func<EventBridge.OnPersistenceSystemLoadedEvent, ValueTask>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Subscribe(object, Action<EventBridge.OnPersistenceSystemLoadedEvent>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPersistenceSystemLoadedEvent>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Subscribe(EventHandler<EventBridge.OnPersistenceSystemLoadedEvent>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Subscribe(Func<EventBridge.OnPersistenceSystemLoadedEvent, ValueTask>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Subscribe(Action<EventBridge.OnPersistenceSystemLoadedEvent>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Unsubscribe(EventHandler<EventBridge.OnPersistenceSystemLoadedEvent>) Event<EventBridge.OnPersistenceSystemLoadedEvent>.Unsubscribe(Action<EventBridge.OnPersistenceSystemLoadedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnPersistenceSystemLoadingEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPersistenceSystemLoadingEvent.html",
    "title": "Class EventBridge.OnPersistenceSystemLoadingEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPersistenceSystemLoadingEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the ProjectM.LoadPersistenceSystemV2.SetLoadState(Unity.Entities.EntityManager, ProjectM.ServerStartupState.State) is post called. public record EventBridge.OnPersistenceSystemLoadingEvent : Event<EventBridge.OnPersistenceSystemLoadingEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPersistenceSystemLoadingEvent>>, IEquatable<EventBridge.OnPersistenceSystemLoadingEvent> Inheritance object Event Event<EventBridge.OnPersistenceSystemLoadingEvent> EventBridge.OnPersistenceSystemLoadingEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPersistenceSystemLoadingEvent>> IEquatable<EventBridge.OnPersistenceSystemLoadingEvent> Inherited Members Event<EventBridge.OnPersistenceSystemLoadingEvent>.Subscribe(object, EventHandler<EventBridge.OnPersistenceSystemLoadingEvent>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Subscribe(object, Func<EventBridge.OnPersistenceSystemLoadingEvent, ValueTask>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Subscribe(object, Action<EventBridge.OnPersistenceSystemLoadingEvent>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPersistenceSystemLoadingEvent>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Subscribe(EventHandler<EventBridge.OnPersistenceSystemLoadingEvent>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Subscribe(Func<EventBridge.OnPersistenceSystemLoadingEvent, ValueTask>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Subscribe(Action<EventBridge.OnPersistenceSystemLoadingEvent>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Unsubscribe(EventHandler<EventBridge.OnPersistenceSystemLoadingEvent>) Event<EventBridge.OnPersistenceSystemLoadingEvent>.Unsubscribe(Action<EventBridge.OnPersistenceSystemLoadingEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnPersistenceSystemLoadingEvent(State) Event triggered when the ProjectM.LoadPersistenceSystemV2.SetLoadState(Unity.Entities.EntityManager, ProjectM.ServerStartupState.State) is post called. public OnPersistenceSystemLoadingEvent(ServerStartupState.State State) Parameters State ServerStartupState.State The current state of the server startup. Properties State The current state of the server startup. public ServerStartupState.State State { get; init; } Property Value ServerStartupState.State"
  },
  "api/RisingV.Shared.EventBridge.OnPluginReadyEvent-1.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPluginReadyEvent-1.html",
    "title": "Class EventBridge.OnPluginReadyEvent<TContext> | RisingV.Shared",
    "summary": "Class EventBridge.OnPluginReadyEvent<TContext> Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the plugin is ready, meaning everything is loaded and ready. public record EventBridge.OnPluginReadyEvent<TContext> : Event<EventBridge.OnPluginReadyEvent<TContext>>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPluginReadyEvent<TContext>>>, IEquatable<EventBridge.OnPluginReadyEvent<TContext>> where TContext : IPluginContext Type Parameters TContext The type of the plugin context. Inheritance object Event Event<EventBridge.OnPluginReadyEvent<TContext>> EventBridge.OnPluginReadyEvent<TContext> Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPluginReadyEvent<TContext>>> IEquatable<EventBridge.OnPluginReadyEvent<TContext>> Inherited Members Event<EventBridge.OnPluginReadyEvent<TContext>>.Subscribe(object, EventHandler<EventBridge.OnPluginReadyEvent<TContext>>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Subscribe(object, Func<EventBridge.OnPluginReadyEvent<TContext>, ValueTask>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Subscribe(object, Action<EventBridge.OnPluginReadyEvent<TContext>>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Unsubscribe(object, EventHandler<EventBridge.OnPluginReadyEvent<TContext>>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Subscribe(EventHandler<EventBridge.OnPluginReadyEvent<TContext>>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Subscribe(Func<EventBridge.OnPluginReadyEvent<TContext>, ValueTask>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Subscribe(Action<EventBridge.OnPluginReadyEvent<TContext>>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Unsubscribe(EventHandler<EventBridge.OnPluginReadyEvent<TContext>>) Event<EventBridge.OnPluginReadyEvent<TContext>>.Unsubscribe(Action<EventBridge.OnPluginReadyEvent<TContext>>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnPluginReadyEvent(TContext) Event triggered when the plugin is ready, meaning everything is loaded and ready. public OnPluginReadyEvent(TContext PluginContext) Parameters PluginContext TContext The context of the plugin that is ready. Properties PluginContext The context of the plugin that is ready. public TContext PluginContext { get; init; } Property Value TContext"
  },
  "api/RisingV.Shared.EventBridge.OnPluginsInitializingEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPluginsInitializingEvent.html",
    "title": "Class EventBridge.OnPluginsInitializingEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPluginsInitializingEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the Plugin loads. public record EventBridge.OnPluginsInitializingEvent : Event<EventBridge.OnPluginsInitializingEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPluginsInitializingEvent>>, IEquatable<EventBridge.OnPluginsInitializingEvent> Inheritance object Event Event<EventBridge.OnPluginsInitializingEvent> EventBridge.OnPluginsInitializingEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPluginsInitializingEvent>> IEquatable<EventBridge.OnPluginsInitializingEvent> Inherited Members Event<EventBridge.OnPluginsInitializingEvent>.Subscribe(object, EventHandler<EventBridge.OnPluginsInitializingEvent>) Event<EventBridge.OnPluginsInitializingEvent>.Subscribe(object, Func<EventBridge.OnPluginsInitializingEvent, ValueTask>) Event<EventBridge.OnPluginsInitializingEvent>.Subscribe(object, Action<EventBridge.OnPluginsInitializingEvent>) Event<EventBridge.OnPluginsInitializingEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPluginsInitializingEvent>) Event<EventBridge.OnPluginsInitializingEvent>.Subscribe(EventHandler<EventBridge.OnPluginsInitializingEvent>) Event<EventBridge.OnPluginsInitializingEvent>.Subscribe(Func<EventBridge.OnPluginsInitializingEvent, ValueTask>) Event<EventBridge.OnPluginsInitializingEvent>.Subscribe(Action<EventBridge.OnPluginsInitializingEvent>) Event<EventBridge.OnPluginsInitializingEvent>.Unsubscribe(EventHandler<EventBridge.OnPluginsInitializingEvent>) Event<EventBridge.OnPluginsInitializingEvent>.Unsubscribe(Action<EventBridge.OnPluginsInitializingEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnPluginsLoadedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPluginsLoadedEvent.html",
    "title": "Class EventBridge.OnPluginsLoadedEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPluginsLoadedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when all plugins are loaded. public record EventBridge.OnPluginsLoadedEvent : Event<EventBridge.OnPluginsLoadedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPluginsLoadedEvent>>, IEquatable<EventBridge.OnPluginsLoadedEvent> Inheritance object Event Event<EventBridge.OnPluginsLoadedEvent> EventBridge.OnPluginsLoadedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPluginsLoadedEvent>> IEquatable<EventBridge.OnPluginsLoadedEvent> Inherited Members Event<EventBridge.OnPluginsLoadedEvent>.Subscribe(object, EventHandler<EventBridge.OnPluginsLoadedEvent>) Event<EventBridge.OnPluginsLoadedEvent>.Subscribe(object, Func<EventBridge.OnPluginsLoadedEvent, ValueTask>) Event<EventBridge.OnPluginsLoadedEvent>.Subscribe(object, Action<EventBridge.OnPluginsLoadedEvent>) Event<EventBridge.OnPluginsLoadedEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPluginsLoadedEvent>) Event<EventBridge.OnPluginsLoadedEvent>.Subscribe(EventHandler<EventBridge.OnPluginsLoadedEvent>) Event<EventBridge.OnPluginsLoadedEvent>.Subscribe(Func<EventBridge.OnPluginsLoadedEvent, ValueTask>) Event<EventBridge.OnPluginsLoadedEvent>.Subscribe(Action<EventBridge.OnPluginsLoadedEvent>) Event<EventBridge.OnPluginsLoadedEvent>.Unsubscribe(EventHandler<EventBridge.OnPluginsLoadedEvent>) Event<EventBridge.OnPluginsLoadedEvent>.Unsubscribe(Action<EventBridge.OnPluginsLoadedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnPluginsLoadingEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPluginsLoadingEvent.html",
    "title": "Class EventBridge.OnPluginsLoadingEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPluginsLoadingEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when all plugins are loading. public record EventBridge.OnPluginsLoadingEvent : Event<EventBridge.OnPluginsLoadingEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPluginsLoadingEvent>>, IEquatable<EventBridge.OnPluginsLoadingEvent> Inheritance object Event Event<EventBridge.OnPluginsLoadingEvent> EventBridge.OnPluginsLoadingEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPluginsLoadingEvent>> IEquatable<EventBridge.OnPluginsLoadingEvent> Inherited Members Event<EventBridge.OnPluginsLoadingEvent>.Subscribe(object, EventHandler<EventBridge.OnPluginsLoadingEvent>) Event<EventBridge.OnPluginsLoadingEvent>.Subscribe(object, Func<EventBridge.OnPluginsLoadingEvent, ValueTask>) Event<EventBridge.OnPluginsLoadingEvent>.Subscribe(object, Action<EventBridge.OnPluginsLoadingEvent>) Event<EventBridge.OnPluginsLoadingEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPluginsLoadingEvent>) Event<EventBridge.OnPluginsLoadingEvent>.Subscribe(EventHandler<EventBridge.OnPluginsLoadingEvent>) Event<EventBridge.OnPluginsLoadingEvent>.Subscribe(Func<EventBridge.OnPluginsLoadingEvent, ValueTask>) Event<EventBridge.OnPluginsLoadingEvent>.Subscribe(Action<EventBridge.OnPluginsLoadingEvent>) Event<EventBridge.OnPluginsLoadingEvent>.Unsubscribe(EventHandler<EventBridge.OnPluginsLoadingEvent>) Event<EventBridge.OnPluginsLoadingEvent>.Unsubscribe(Action<EventBridge.OnPluginsLoadingEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnPluginsPartialLoadedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPluginsPartialLoadedEvent.html",
    "title": "Class EventBridge.OnPluginsPartialLoadedEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPluginsPartialLoadedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered after once the ChainLoader has initialized all plugins and their dependencies. public record EventBridge.OnPluginsPartialLoadedEvent : Event<EventBridge.OnPluginsPartialLoadedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPluginsPartialLoadedEvent>>, IEquatable<EventBridge.OnPluginsPartialLoadedEvent> Inheritance object Event Event<EventBridge.OnPluginsPartialLoadedEvent> EventBridge.OnPluginsPartialLoadedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPluginsPartialLoadedEvent>> IEquatable<EventBridge.OnPluginsPartialLoadedEvent> Inherited Members Event<EventBridge.OnPluginsPartialLoadedEvent>.Subscribe(object, EventHandler<EventBridge.OnPluginsPartialLoadedEvent>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Subscribe(object, Func<EventBridge.OnPluginsPartialLoadedEvent, ValueTask>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Subscribe(object, Action<EventBridge.OnPluginsPartialLoadedEvent>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPluginsPartialLoadedEvent>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Subscribe(EventHandler<EventBridge.OnPluginsPartialLoadedEvent>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Subscribe(Func<EventBridge.OnPluginsPartialLoadedEvent, ValueTask>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Subscribe(Action<EventBridge.OnPluginsPartialLoadedEvent>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Unsubscribe(EventHandler<EventBridge.OnPluginsPartialLoadedEvent>) Event<EventBridge.OnPluginsPartialLoadedEvent>.Unsubscribe(Action<EventBridge.OnPluginsPartialLoadedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnPluginsReadyEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnPluginsReadyEvent.html",
    "title": "Class EventBridge.OnPluginsReadyEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnPluginsReadyEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when all plugins are ready and everything is loaded. public record EventBridge.OnPluginsReadyEvent : Event<EventBridge.OnPluginsReadyEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnPluginsReadyEvent>>, IEquatable<EventBridge.OnPluginsReadyEvent> Inheritance object Event Event<EventBridge.OnPluginsReadyEvent> EventBridge.OnPluginsReadyEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnPluginsReadyEvent>> IEquatable<EventBridge.OnPluginsReadyEvent> Inherited Members Event<EventBridge.OnPluginsReadyEvent>.Subscribe(object, EventHandler<EventBridge.OnPluginsReadyEvent>) Event<EventBridge.OnPluginsReadyEvent>.Subscribe(object, Func<EventBridge.OnPluginsReadyEvent, ValueTask>) Event<EventBridge.OnPluginsReadyEvent>.Subscribe(object, Action<EventBridge.OnPluginsReadyEvent>) Event<EventBridge.OnPluginsReadyEvent>.Unsubscribe(object, EventHandler<EventBridge.OnPluginsReadyEvent>) Event<EventBridge.OnPluginsReadyEvent>.Subscribe(EventHandler<EventBridge.OnPluginsReadyEvent>) Event<EventBridge.OnPluginsReadyEvent>.Subscribe(Func<EventBridge.OnPluginsReadyEvent, ValueTask>) Event<EventBridge.OnPluginsReadyEvent>.Subscribe(Action<EventBridge.OnPluginsReadyEvent>) Event<EventBridge.OnPluginsReadyEvent>.Unsubscribe(EventHandler<EventBridge.OnPluginsReadyEvent>) Event<EventBridge.OnPluginsReadyEvent>.Unsubscribe(Action<EventBridge.OnPluginsReadyEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.OnSaveEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnSaveEvent.html",
    "title": "Class EventBridge.OnSaveEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnSaveEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event emitted whenever the server performs a save operation. public record EventBridge.OnSaveEvent : Event<EventBridge.OnSaveEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.OnSaveEvent>>, IEquatable<EventBridge.OnSaveEvent> Inheritance object Event Event<EventBridge.OnSaveEvent> EventBridge.OnSaveEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.OnSaveEvent>> IEquatable<EventBridge.OnSaveEvent> Inherited Members Event<EventBridge.OnSaveEvent>.Subscribe(object, EventHandler<EventBridge.OnSaveEvent>) Event<EventBridge.OnSaveEvent>.Subscribe(object, Func<EventBridge.OnSaveEvent, ValueTask>) Event<EventBridge.OnSaveEvent>.Subscribe(object, Action<EventBridge.OnSaveEvent>) Event<EventBridge.OnSaveEvent>.Unsubscribe(object, EventHandler<EventBridge.OnSaveEvent>) Event<EventBridge.OnSaveEvent>.Subscribe(EventHandler<EventBridge.OnSaveEvent>) Event<EventBridge.OnSaveEvent>.Subscribe(Func<EventBridge.OnSaveEvent, ValueTask>) Event<EventBridge.OnSaveEvent>.Subscribe(Action<EventBridge.OnSaveEvent>) Event<EventBridge.OnSaveEvent>.Unsubscribe(EventHandler<EventBridge.OnSaveEvent>) Event<EventBridge.OnSaveEvent>.Unsubscribe(Action<EventBridge.OnSaveEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnSaveEvent(SaveReason, FixedString128Bytes, ServerRuntimeSettings) Event emitted whenever the server performs a save operation. public OnSaveEvent(SaveReason Reason, FixedString128Bytes SaveName, ServerRuntimeSettings SaveConfig) Parameters Reason SaveReason SaveName FixedString128Bytes SaveConfig ServerRuntimeSettings Properties Reason public SaveReason Reason { get; init; } Property Value SaveReason SaveConfig public ServerRuntimeSettings SaveConfig { get; init; } Property Value ServerRuntimeSettings SaveName public FixedString128Bytes SaveName { get; init; } Property Value FixedString128Bytes"
  },
  "api/RisingV.Shared.EventBridge.OnUnequipItemEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.OnUnequipItemEvent.html",
    "title": "Class EventBridge.OnUnequipItemEvent | RisingV.Shared",
    "summary": "Class EventBridge.OnUnequipItemEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll public record EventBridge.OnUnequipItemEvent : EventBridge.EquipmentItemEvent, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.EquipmentEvent>>, IEquatable<EventBridge.EquipmentEvent>, IEquatable<EventBridge.EquipmentItemEvent>, IEquatable<EventBridge.OnUnequipItemEvent> Inheritance object Event Event<EventBridge.EquipmentEvent> EventBridge.EquipmentEvent EventBridge.EquipmentItemEvent EventBridge.OnUnequipItemEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.EquipmentEvent>> IEquatable<EventBridge.EquipmentEvent> IEquatable<EventBridge.EquipmentItemEvent> IEquatable<EventBridge.OnUnequipItemEvent> Inherited Members EventBridge.EquipmentItemEvent.ItemEntity EventBridge.EquipmentEvent.Character Event<EventBridge.EquipmentEvent>.Subscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(object, Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(object, EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Subscribe(Func<EventBridge.EquipmentEvent, ValueTask>) Event<EventBridge.EquipmentEvent>.Subscribe(Action<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(EventHandler<EventBridge.EquipmentEvent>) Event<EventBridge.EquipmentEvent>.Unsubscribe(Action<EventBridge.EquipmentEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors OnUnequipItemEvent(Entity, FromCharacter) public OnUnequipItemEvent(Entity ItemEntity, FromCharacter Character) Parameters ItemEntity Entity Character FromCharacter"
  },
  "api/RisingV.Shared.EventBridge.PlayerAdminAuthEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.PlayerAdminAuthEvent.html",
    "title": "Class EventBridge.PlayerAdminAuthEvent | RisingV.Shared",
    "summary": "Class EventBridge.PlayerAdminAuthEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a player admin authentication attempt occurs. public record EventBridge.PlayerAdminAuthEvent : Event<EventBridge.PlayerAdminAuthEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.PlayerAdminAuthEvent>>, IEquatable<EventBridge.PlayerAdminAuthEvent> Inheritance object Event Event<EventBridge.PlayerAdminAuthEvent> EventBridge.PlayerAdminAuthEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.PlayerAdminAuthEvent>> IEquatable<EventBridge.PlayerAdminAuthEvent> Inherited Members Event<EventBridge.PlayerAdminAuthEvent>.Subscribe(object, EventHandler<EventBridge.PlayerAdminAuthEvent>) Event<EventBridge.PlayerAdminAuthEvent>.Subscribe(object, Func<EventBridge.PlayerAdminAuthEvent, ValueTask>) Event<EventBridge.PlayerAdminAuthEvent>.Subscribe(object, Action<EventBridge.PlayerAdminAuthEvent>) Event<EventBridge.PlayerAdminAuthEvent>.Unsubscribe(object, EventHandler<EventBridge.PlayerAdminAuthEvent>) Event<EventBridge.PlayerAdminAuthEvent>.Subscribe(EventHandler<EventBridge.PlayerAdminAuthEvent>) Event<EventBridge.PlayerAdminAuthEvent>.Subscribe(Func<EventBridge.PlayerAdminAuthEvent, ValueTask>) Event<EventBridge.PlayerAdminAuthEvent>.Subscribe(Action<EventBridge.PlayerAdminAuthEvent>) Event<EventBridge.PlayerAdminAuthEvent>.Unsubscribe(EventHandler<EventBridge.PlayerAdminAuthEvent>) Event<EventBridge.PlayerAdminAuthEvent>.Unsubscribe(Action<EventBridge.PlayerAdminAuthEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerAdminAuthEvent(ulong, bool) Event triggered when a player admin authentication attempt occurs. public PlayerAdminAuthEvent(ulong PlatformId, bool Result) Parameters PlatformId ulong Result bool Properties PlatformId public ulong PlatformId { get; init; } Property Value ulong Result public bool Result { get; init; } Property Value bool"
  },
  "api/RisingV.Shared.EventBridge.PlayerCompleteAchievementEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.PlayerCompleteAchievementEvent.html",
    "title": "Class EventBridge.PlayerCompleteAchievementEvent | RisingV.Shared",
    "summary": "Class EventBridge.PlayerCompleteAchievementEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a player completes an achievement. public record EventBridge.PlayerCompleteAchievementEvent : Event<EventBridge.PlayerCompleteAchievementEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.PlayerCompleteAchievementEvent>>, IEquatable<EventBridge.PlayerCompleteAchievementEvent> Inheritance object Event Event<EventBridge.PlayerCompleteAchievementEvent> EventBridge.PlayerCompleteAchievementEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.PlayerCompleteAchievementEvent>> IEquatable<EventBridge.PlayerCompleteAchievementEvent> Inherited Members Event<EventBridge.PlayerCompleteAchievementEvent>.Subscribe(object, EventHandler<EventBridge.PlayerCompleteAchievementEvent>) Event<EventBridge.PlayerCompleteAchievementEvent>.Subscribe(object, Func<EventBridge.PlayerCompleteAchievementEvent, ValueTask>) Event<EventBridge.PlayerCompleteAchievementEvent>.Subscribe(object, Action<EventBridge.PlayerCompleteAchievementEvent>) Event<EventBridge.PlayerCompleteAchievementEvent>.Unsubscribe(object, EventHandler<EventBridge.PlayerCompleteAchievementEvent>) Event<EventBridge.PlayerCompleteAchievementEvent>.Subscribe(EventHandler<EventBridge.PlayerCompleteAchievementEvent>) Event<EventBridge.PlayerCompleteAchievementEvent>.Subscribe(Func<EventBridge.PlayerCompleteAchievementEvent, ValueTask>) Event<EventBridge.PlayerCompleteAchievementEvent>.Subscribe(Action<EventBridge.PlayerCompleteAchievementEvent>) Event<EventBridge.PlayerCompleteAchievementEvent>.Unsubscribe(EventHandler<EventBridge.PlayerCompleteAchievementEvent>) Event<EventBridge.PlayerCompleteAchievementEvent>.Unsubscribe(Action<EventBridge.PlayerCompleteAchievementEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerCompleteAchievementEvent(FromCharacter, Entity, AchievementOwner, PrefabGUID, bool) Event triggered when a player completes an achievement. public PlayerCompleteAchievementEvent(FromCharacter Character, Entity PlayerEntity, AchievementOwner Owner, PrefabGUID AchievementGuid, bool ForceClaim) Parameters Character FromCharacter The character that completed the achievement. PlayerEntity Entity The entity representing the player who completed the achievement. Owner AchievementOwner The owner of the achievement. AchievementGuid PrefabGUID The GUID of the achievement that was completed. ForceClaim bool Indicates whether the achievement claim was forced. Properties AchievementGuid The GUID of the achievement that was completed. public PrefabGUID AchievementGuid { get; init; } Property Value PrefabGUID Character The character that completed the achievement. public FromCharacter Character { get; init; } Property Value FromCharacter ForceClaim Indicates whether the achievement claim was forced. public bool ForceClaim { get; init; } Property Value bool Owner The owner of the achievement. public AchievementOwner Owner { get; init; } Property Value AchievementOwner PlayerEntity The entity representing the player who completed the achievement. public Entity PlayerEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.PlayerDownedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.PlayerDownedEvent.html",
    "title": "Class EventBridge.PlayerDownedEvent | RisingV.Shared",
    "summary": "Class EventBridge.PlayerDownedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a player is \"downed\" (health reached zero). public record EventBridge.PlayerDownedEvent : Event<EventBridge.PlayerDownedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.PlayerDownedEvent>>, IEquatable<EventBridge.PlayerDownedEvent> Inheritance object Event Event<EventBridge.PlayerDownedEvent> EventBridge.PlayerDownedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.PlayerDownedEvent>> IEquatable<EventBridge.PlayerDownedEvent> Inherited Members Event<EventBridge.PlayerDownedEvent>.Subscribe(object, EventHandler<EventBridge.PlayerDownedEvent>) Event<EventBridge.PlayerDownedEvent>.Subscribe(object, Func<EventBridge.PlayerDownedEvent, ValueTask>) Event<EventBridge.PlayerDownedEvent>.Subscribe(object, Action<EventBridge.PlayerDownedEvent>) Event<EventBridge.PlayerDownedEvent>.Unsubscribe(object, EventHandler<EventBridge.PlayerDownedEvent>) Event<EventBridge.PlayerDownedEvent>.Subscribe(EventHandler<EventBridge.PlayerDownedEvent>) Event<EventBridge.PlayerDownedEvent>.Subscribe(Func<EventBridge.PlayerDownedEvent, ValueTask>) Event<EventBridge.PlayerDownedEvent>.Subscribe(Action<EventBridge.PlayerDownedEvent>) Event<EventBridge.PlayerDownedEvent>.Unsubscribe(EventHandler<EventBridge.PlayerDownedEvent>) Event<EventBridge.PlayerDownedEvent>.Unsubscribe(Action<EventBridge.PlayerDownedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerDownedEvent(Entity, Entity) Event triggered when a player is \"downed\" (health reached zero). public PlayerDownedEvent(Entity Victim, Entity Killer) Parameters Victim Entity The entity representing the player who was downed. Killer Entity The entity representing the player or unit that caused the downing. Properties Killer The entity representing the player or unit that caused the downing. public Entity Killer { get; init; } Property Value Entity Victim The entity representing the player who was downed. public Entity Victim { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.PlayerKickBanEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.PlayerKickBanEvent.html",
    "title": "Class EventBridge.PlayerKickBanEvent | RisingV.Shared",
    "summary": "Class EventBridge.PlayerKickBanEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a player is kicked or banned from the server. public record EventBridge.PlayerKickBanEvent : Event<EventBridge.PlayerKickBanEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.PlayerKickBanEvent>>, IEquatable<EventBridge.PlayerKickBanEvent> Inheritance object Event Event<EventBridge.PlayerKickBanEvent> EventBridge.PlayerKickBanEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.PlayerKickBanEvent>> IEquatable<EventBridge.PlayerKickBanEvent> Inherited Members Event<EventBridge.PlayerKickBanEvent>.Subscribe(object, EventHandler<EventBridge.PlayerKickBanEvent>) Event<EventBridge.PlayerKickBanEvent>.Subscribe(object, Func<EventBridge.PlayerKickBanEvent, ValueTask>) Event<EventBridge.PlayerKickBanEvent>.Subscribe(object, Action<EventBridge.PlayerKickBanEvent>) Event<EventBridge.PlayerKickBanEvent>.Unsubscribe(object, EventHandler<EventBridge.PlayerKickBanEvent>) Event<EventBridge.PlayerKickBanEvent>.Subscribe(EventHandler<EventBridge.PlayerKickBanEvent>) Event<EventBridge.PlayerKickBanEvent>.Subscribe(Func<EventBridge.PlayerKickBanEvent, ValueTask>) Event<EventBridge.PlayerKickBanEvent>.Subscribe(Action<EventBridge.PlayerKickBanEvent>) Event<EventBridge.PlayerKickBanEvent>.Unsubscribe(EventHandler<EventBridge.PlayerKickBanEvent>) Event<EventBridge.PlayerKickBanEvent>.Unsubscribe(Action<EventBridge.PlayerKickBanEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PlayerKickBanEvent(ulong, bool) Event triggered when a player is kicked or banned from the server. public PlayerKickBanEvent(ulong PlatformId, bool Result) Parameters PlatformId ulong Result bool Properties PlatformId public ulong PlatformId { get; init; } Property Value ulong Result public bool Result { get; init; } Property Value bool"
  },
  "api/RisingV.Shared.EventBridge.ScriptDespawnEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.ScriptDespawnEvent.html",
    "title": "Class EventBridge.ScriptDespawnEvent | RisingV.Shared",
    "summary": "Class EventBridge.ScriptDespawnEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event raised when an entity despawns via script. public record EventBridge.ScriptDespawnEvent : Event<EventBridge.ScriptDespawnEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptDespawnEvent>>, IEquatable<EventBridge.ScriptDespawnEvent> Inheritance object Event Event<EventBridge.ScriptDespawnEvent> EventBridge.ScriptDespawnEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptDespawnEvent>> IEquatable<EventBridge.ScriptDespawnEvent> Inherited Members Event<EventBridge.ScriptDespawnEvent>.Subscribe(object, EventHandler<EventBridge.ScriptDespawnEvent>) Event<EventBridge.ScriptDespawnEvent>.Subscribe(object, Func<EventBridge.ScriptDespawnEvent, ValueTask>) Event<EventBridge.ScriptDespawnEvent>.Subscribe(object, Action<EventBridge.ScriptDespawnEvent>) Event<EventBridge.ScriptDespawnEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptDespawnEvent>) Event<EventBridge.ScriptDespawnEvent>.Subscribe(EventHandler<EventBridge.ScriptDespawnEvent>) Event<EventBridge.ScriptDespawnEvent>.Subscribe(Func<EventBridge.ScriptDespawnEvent, ValueTask>) Event<EventBridge.ScriptDespawnEvent>.Subscribe(Action<EventBridge.ScriptDespawnEvent>) Event<EventBridge.ScriptDespawnEvent>.Unsubscribe(EventHandler<EventBridge.ScriptDespawnEvent>) Event<EventBridge.ScriptDespawnEvent>.Unsubscribe(Action<EventBridge.ScriptDespawnEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptDespawnEvent(Entity, ScriptSpawnData) Event raised when an entity despawns via script. public ScriptDespawnEvent(Entity Entity, ScriptSpawnData Data) Parameters Entity Entity Data ScriptSpawnData Properties Data public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData Entity public Entity Entity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.ScriptSpawnEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.ScriptSpawnEvent.html",
    "title": "Class EventBridge.ScriptSpawnEvent | RisingV.Shared",
    "summary": "Class EventBridge.ScriptSpawnEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event raised when an entity spawns via script. public record EventBridge.ScriptSpawnEvent : Event<EventBridge.ScriptSpawnEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ScriptSpawnEvent>>, IEquatable<EventBridge.ScriptSpawnEvent> Inheritance object Event Event<EventBridge.ScriptSpawnEvent> EventBridge.ScriptSpawnEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ScriptSpawnEvent>> IEquatable<EventBridge.ScriptSpawnEvent> Inherited Members Event<EventBridge.ScriptSpawnEvent>.Subscribe(object, EventHandler<EventBridge.ScriptSpawnEvent>) Event<EventBridge.ScriptSpawnEvent>.Subscribe(object, Func<EventBridge.ScriptSpawnEvent, ValueTask>) Event<EventBridge.ScriptSpawnEvent>.Subscribe(object, Action<EventBridge.ScriptSpawnEvent>) Event<EventBridge.ScriptSpawnEvent>.Unsubscribe(object, EventHandler<EventBridge.ScriptSpawnEvent>) Event<EventBridge.ScriptSpawnEvent>.Subscribe(EventHandler<EventBridge.ScriptSpawnEvent>) Event<EventBridge.ScriptSpawnEvent>.Subscribe(Func<EventBridge.ScriptSpawnEvent, ValueTask>) Event<EventBridge.ScriptSpawnEvent>.Subscribe(Action<EventBridge.ScriptSpawnEvent>) Event<EventBridge.ScriptSpawnEvent>.Unsubscribe(EventHandler<EventBridge.ScriptSpawnEvent>) Event<EventBridge.ScriptSpawnEvent>.Unsubscribe(Action<EventBridge.ScriptSpawnEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ScriptSpawnEvent(Entity, ScriptSpawnData) Event raised when an entity spawns via script. public ScriptSpawnEvent(Entity Entity, ScriptSpawnData Data) Parameters Entity Entity Data ScriptSpawnData Properties Data public ScriptSpawnData Data { get; init; } Property Value ScriptSpawnData Entity public Entity Entity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.ServerStartupSuccessfulEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.ServerStartupSuccessfulEvent.html",
    "title": "Class EventBridge.ServerStartupSuccessfulEvent | RisingV.Shared",
    "summary": "Class EventBridge.ServerStartupSuccessfulEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when the server starts up successfully. public record EventBridge.ServerStartupSuccessfulEvent : Event<EventBridge.ServerStartupSuccessfulEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.ServerStartupSuccessfulEvent>>, IEquatable<EventBridge.ServerStartupSuccessfulEvent> Inheritance object Event Event<EventBridge.ServerStartupSuccessfulEvent> EventBridge.ServerStartupSuccessfulEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.ServerStartupSuccessfulEvent>> IEquatable<EventBridge.ServerStartupSuccessfulEvent> Inherited Members Event<EventBridge.ServerStartupSuccessfulEvent>.Subscribe(object, EventHandler<EventBridge.ServerStartupSuccessfulEvent>) Event<EventBridge.ServerStartupSuccessfulEvent>.Subscribe(object, Func<EventBridge.ServerStartupSuccessfulEvent, ValueTask>) Event<EventBridge.ServerStartupSuccessfulEvent>.Subscribe(object, Action<EventBridge.ServerStartupSuccessfulEvent>) Event<EventBridge.ServerStartupSuccessfulEvent>.Unsubscribe(object, EventHandler<EventBridge.ServerStartupSuccessfulEvent>) Event<EventBridge.ServerStartupSuccessfulEvent>.Subscribe(EventHandler<EventBridge.ServerStartupSuccessfulEvent>) Event<EventBridge.ServerStartupSuccessfulEvent>.Subscribe(Func<EventBridge.ServerStartupSuccessfulEvent, ValueTask>) Event<EventBridge.ServerStartupSuccessfulEvent>.Subscribe(Action<EventBridge.ServerStartupSuccessfulEvent>) Event<EventBridge.ServerStartupSuccessfulEvent>.Unsubscribe(EventHandler<EventBridge.ServerStartupSuccessfulEvent>) Event<EventBridge.ServerStartupSuccessfulEvent>.Unsubscribe(Action<EventBridge.ServerStartupSuccessfulEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.EventBridge.SpawnEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.SpawnEvent.html",
    "title": "Class EventBridge.SpawnEvent | RisingV.Shared",
    "summary": "Class EventBridge.SpawnEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Generic spawn event for entities created via the standard spawn system. public record EventBridge.SpawnEvent : Event<EventBridge.SpawnEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.SpawnEvent>>, IEquatable<EventBridge.SpawnEvent> Inheritance object Event Event<EventBridge.SpawnEvent> EventBridge.SpawnEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.SpawnEvent>> IEquatable<EventBridge.SpawnEvent> Inherited Members Event<EventBridge.SpawnEvent>.Subscribe(object, EventHandler<EventBridge.SpawnEvent>) Event<EventBridge.SpawnEvent>.Subscribe(object, Func<EventBridge.SpawnEvent, ValueTask>) Event<EventBridge.SpawnEvent>.Subscribe(object, Action<EventBridge.SpawnEvent>) Event<EventBridge.SpawnEvent>.Unsubscribe(object, EventHandler<EventBridge.SpawnEvent>) Event<EventBridge.SpawnEvent>.Subscribe(EventHandler<EventBridge.SpawnEvent>) Event<EventBridge.SpawnEvent>.Subscribe(Func<EventBridge.SpawnEvent, ValueTask>) Event<EventBridge.SpawnEvent>.Subscribe(Action<EventBridge.SpawnEvent>) Event<EventBridge.SpawnEvent>.Unsubscribe(EventHandler<EventBridge.SpawnEvent>) Event<EventBridge.SpawnEvent>.Unsubscribe(Action<EventBridge.SpawnEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SpawnEvent(Entity, SpawnData) Generic spawn event for entities created via the standard spawn system. public SpawnEvent(Entity Entity, SpawnData Data) Parameters Entity Entity Data SpawnData Properties Data public SpawnData Data { get; init; } Property Value SpawnData Entity public Entity Entity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.StatChangedAllEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedAllEvent.html",
    "title": "Class EventBridge.StatChangedAllEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedAllEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedAllEvent : EventBridge.StatChangedEvent, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent>, IEquatable<EventBridge.StatChangedAllEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.StatChangedAllEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> IEquatable<EventBridge.StatChangedAllEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedAllEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedAllEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.StatChangedBossEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedBossEvent.html",
    "title": "Class EventBridge.StatChangedBossEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedBossEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedBossEvent : EventBridge.StatChangedEvent, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent>, IEquatable<EventBridge.StatChangedBossEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.StatChangedBossEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> IEquatable<EventBridge.StatChangedBossEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedBossEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedBossEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.StatChangedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedEvent.html",
    "title": "Class EventBridge.StatChangedEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedEvent : Event, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent> Inheritance object Event EventBridge.StatChangedEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> Derived EventBridge.DamagedEvent EventBridge.StatChangedAllEvent EventBridge.StatChangedBossEvent EventBridge.StatChangedGatherableEvent EventBridge.StatChangedMinionEvent EventBridge.StatChangedPlayerEvent EventBridge.StatChangedUnitEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData Properties Data public StatChangeData Data { get; init; } Property Value StatChangeData SourceEntity public Entity SourceEntity { get; init; } Property Value Entity TargetEntity public Entity TargetEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.StatChangedGatherableEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedGatherableEvent.html",
    "title": "Class EventBridge.StatChangedGatherableEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedGatherableEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedGatherableEvent : EventBridge.StatChangedEvent, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent>, IEquatable<EventBridge.StatChangedGatherableEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.StatChangedGatherableEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> IEquatable<EventBridge.StatChangedGatherableEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedGatherableEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedGatherableEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.StatChangedMinionEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedMinionEvent.html",
    "title": "Class EventBridge.StatChangedMinionEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedMinionEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedMinionEvent : EventBridge.StatChangedEvent, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent>, IEquatable<EventBridge.StatChangedMinionEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.StatChangedMinionEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> IEquatable<EventBridge.StatChangedMinionEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedMinionEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedMinionEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.StatChangedPlayerEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedPlayerEvent.html",
    "title": "Class EventBridge.StatChangedPlayerEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedPlayerEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedPlayerEvent : EventBridge.StatChangedEvent, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent>, IEquatable<EventBridge.StatChangedPlayerEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.StatChangedPlayerEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> IEquatable<EventBridge.StatChangedPlayerEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedPlayerEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedPlayerEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.StatChangedUnitEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.StatChangedUnitEvent.html",
    "title": "Class EventBridge.StatChangedUnitEvent | RisingV.Shared",
    "summary": "Class EventBridge.StatChangedUnitEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event indicating that any entity stat has changed. public record EventBridge.StatChangedUnitEvent : EventBridge.StatChangedEvent, IEquatable<Event>, EventBridge.IStatChangedEvent, IEvent, IEquatable<EventBridge.StatChangedEvent>, IEquatable<EventBridge.StatChangedUnitEvent> Inheritance object Event EventBridge.StatChangedEvent EventBridge.StatChangedUnitEvent Implements IEquatable<Event> EventBridge.IStatChangedEvent IEvent IEquatable<EventBridge.StatChangedEvent> IEquatable<EventBridge.StatChangedUnitEvent> Inherited Members EventBridge.StatChangedEvent.SourceEntity EventBridge.StatChangedEvent.TargetEntity EventBridge.StatChangedEvent.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors StatChangedUnitEvent(Entity, Entity, StatChangeData) Event indicating that any entity stat has changed. public StatChangedUnitEvent(Entity SourceEntity, Entity TargetEntity, StatChangeData Data) Parameters SourceEntity Entity TargetEntity Entity Data StatChangeData"
  },
  "api/RisingV.Shared.EventBridge.UnitDownedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.UnitDownedEvent.html",
    "title": "Class EventBridge.UnitDownedEvent | RisingV.Shared",
    "summary": "Class EventBridge.UnitDownedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a unit is downed (health reached zero). public record EventBridge.UnitDownedEvent : Event<EventBridge.UnitDownedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.UnitDownedEvent>>, IEquatable<EventBridge.UnitDownedEvent> Inheritance object Event Event<EventBridge.UnitDownedEvent> EventBridge.UnitDownedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.UnitDownedEvent>> IEquatable<EventBridge.UnitDownedEvent> Inherited Members Event<EventBridge.UnitDownedEvent>.Subscribe(object, EventHandler<EventBridge.UnitDownedEvent>) Event<EventBridge.UnitDownedEvent>.Subscribe(object, Func<EventBridge.UnitDownedEvent, ValueTask>) Event<EventBridge.UnitDownedEvent>.Subscribe(object, Action<EventBridge.UnitDownedEvent>) Event<EventBridge.UnitDownedEvent>.Unsubscribe(object, EventHandler<EventBridge.UnitDownedEvent>) Event<EventBridge.UnitDownedEvent>.Subscribe(EventHandler<EventBridge.UnitDownedEvent>) Event<EventBridge.UnitDownedEvent>.Subscribe(Func<EventBridge.UnitDownedEvent, ValueTask>) Event<EventBridge.UnitDownedEvent>.Subscribe(Action<EventBridge.UnitDownedEvent>) Event<EventBridge.UnitDownedEvent>.Unsubscribe(EventHandler<EventBridge.UnitDownedEvent>) Event<EventBridge.UnitDownedEvent>.Unsubscribe(Action<EventBridge.UnitDownedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors UnitDownedEvent(Entity, Entity) Event triggered when a unit is downed (health reached zero). public UnitDownedEvent(Entity Victim, Entity Killer) Parameters Victim Entity Killer Entity Properties Killer public Entity Killer { get; init; } Property Value Entity Victim public Entity Victim { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.UnitStatBuffSpawnEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.UnitStatBuffSpawnEvent.html",
    "title": "Class EventBridge.UnitStatBuffSpawnEvent | RisingV.Shared",
    "summary": "Class EventBridge.UnitStatBuffSpawnEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a stat‐based buff prefab spawns on a unit. public record EventBridge.UnitStatBuffSpawnEvent : Event<EventBridge.UnitStatBuffSpawnEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.UnitStatBuffSpawnEvent>>, IEquatable<EventBridge.UnitStatBuffSpawnEvent> Inheritance object Event Event<EventBridge.UnitStatBuffSpawnEvent> EventBridge.UnitStatBuffSpawnEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.UnitStatBuffSpawnEvent>> IEquatable<EventBridge.UnitStatBuffSpawnEvent> Inherited Members Event<EventBridge.UnitStatBuffSpawnEvent>.Subscribe(object, EventHandler<EventBridge.UnitStatBuffSpawnEvent>) Event<EventBridge.UnitStatBuffSpawnEvent>.Subscribe(object, Func<EventBridge.UnitStatBuffSpawnEvent, ValueTask>) Event<EventBridge.UnitStatBuffSpawnEvent>.Subscribe(object, Action<EventBridge.UnitStatBuffSpawnEvent>) Event<EventBridge.UnitStatBuffSpawnEvent>.Unsubscribe(object, EventHandler<EventBridge.UnitStatBuffSpawnEvent>) Event<EventBridge.UnitStatBuffSpawnEvent>.Subscribe(EventHandler<EventBridge.UnitStatBuffSpawnEvent>) Event<EventBridge.UnitStatBuffSpawnEvent>.Subscribe(Func<EventBridge.UnitStatBuffSpawnEvent, ValueTask>) Event<EventBridge.UnitStatBuffSpawnEvent>.Subscribe(Action<EventBridge.UnitStatBuffSpawnEvent>) Event<EventBridge.UnitStatBuffSpawnEvent>.Unsubscribe(EventHandler<EventBridge.UnitStatBuffSpawnEvent>) Event<EventBridge.UnitStatBuffSpawnEvent>.Unsubscribe(Action<EventBridge.UnitStatBuffSpawnEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors UnitStatBuffSpawnEvent(Entity, PrefabGUID) Event triggered when a stat‐based buff prefab spawns on a unit. public UnitStatBuffSpawnEvent(Entity BuffEntity, PrefabGUID BuffGuid) Parameters BuffEntity Entity BuffGuid PrefabGUID Properties BuffEntity public Entity BuffEntity { get; init; } Property Value Entity BuffGuid public PrefabGUID BuffGuid { get; init; } Property Value PrefabGUID"
  },
  "api/RisingV.Shared.EventBridge.UserConnectEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.UserConnectEvent.html",
    "title": "Class EventBridge.UserConnectEvent | RisingV.Shared",
    "summary": "Class EventBridge.UserConnectEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a user connects to the server. public record EventBridge.UserConnectEvent : Event<EventBridge.UserConnectEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.UserConnectEvent>>, IEquatable<EventBridge.UserConnectEvent> Inheritance object Event Event<EventBridge.UserConnectEvent> EventBridge.UserConnectEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.UserConnectEvent>> IEquatable<EventBridge.UserConnectEvent> Inherited Members Event<EventBridge.UserConnectEvent>.Subscribe(object, EventHandler<EventBridge.UserConnectEvent>) Event<EventBridge.UserConnectEvent>.Subscribe(object, Func<EventBridge.UserConnectEvent, ValueTask>) Event<EventBridge.UserConnectEvent>.Subscribe(object, Action<EventBridge.UserConnectEvent>) Event<EventBridge.UserConnectEvent>.Unsubscribe(object, EventHandler<EventBridge.UserConnectEvent>) Event<EventBridge.UserConnectEvent>.Subscribe(EventHandler<EventBridge.UserConnectEvent>) Event<EventBridge.UserConnectEvent>.Subscribe(Func<EventBridge.UserConnectEvent, ValueTask>) Event<EventBridge.UserConnectEvent>.Subscribe(Action<EventBridge.UserConnectEvent>) Event<EventBridge.UserConnectEvent>.Unsubscribe(EventHandler<EventBridge.UserConnectEvent>) Event<EventBridge.UserConnectEvent>.Unsubscribe(Action<EventBridge.UserConnectEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors UserConnectEvent(ServerClient, NetConnectionId, bool) Event triggered when a user connects to the server. public UserConnectEvent(ServerBootstrapSystem.ServerClient ServerClient, NetConnectionId NetConnectionId, bool IsNew) Parameters ServerClient ServerBootstrapSystem.ServerClient The server client representing the user connection. NetConnectionId NetConnectionId The network connection ID of the user. IsNew bool Indicates whether the connection is new or an existing one. Properties IsNew Indicates whether the connection is new or an existing one. public bool IsNew { get; init; } Property Value bool NetConnectionId The network connection ID of the user. public NetConnectionId NetConnectionId { get; init; } Property Value NetConnectionId ServerClient The server client representing the user connection. public ServerBootstrapSystem.ServerClient ServerClient { get; init; } Property Value ServerBootstrapSystem.ServerClient"
  },
  "api/RisingV.Shared.EventBridge.UserDisconnectEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.UserDisconnectEvent.html",
    "title": "Class EventBridge.UserDisconnectEvent | RisingV.Shared",
    "summary": "Class EventBridge.UserDisconnectEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event triggered when a user disconnects from the server. public record EventBridge.UserDisconnectEvent : Event<EventBridge.UserDisconnectEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.UserDisconnectEvent>>, IEquatable<EventBridge.UserDisconnectEvent> Inheritance object Event Event<EventBridge.UserDisconnectEvent> EventBridge.UserDisconnectEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.UserDisconnectEvent>> IEquatable<EventBridge.UserDisconnectEvent> Inherited Members Event<EventBridge.UserDisconnectEvent>.Subscribe(object, EventHandler<EventBridge.UserDisconnectEvent>) Event<EventBridge.UserDisconnectEvent>.Subscribe(object, Func<EventBridge.UserDisconnectEvent, ValueTask>) Event<EventBridge.UserDisconnectEvent>.Subscribe(object, Action<EventBridge.UserDisconnectEvent>) Event<EventBridge.UserDisconnectEvent>.Unsubscribe(object, EventHandler<EventBridge.UserDisconnectEvent>) Event<EventBridge.UserDisconnectEvent>.Subscribe(EventHandler<EventBridge.UserDisconnectEvent>) Event<EventBridge.UserDisconnectEvent>.Subscribe(Func<EventBridge.UserDisconnectEvent, ValueTask>) Event<EventBridge.UserDisconnectEvent>.Subscribe(Action<EventBridge.UserDisconnectEvent>) Event<EventBridge.UserDisconnectEvent>.Unsubscribe(EventHandler<EventBridge.UserDisconnectEvent>) Event<EventBridge.UserDisconnectEvent>.Unsubscribe(Action<EventBridge.UserDisconnectEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors UserDisconnectEvent(ServerClient, NetConnectionId, ConnectionStatusChangeReason, string) Event triggered when a user disconnects from the server. public UserDisconnectEvent(ServerBootstrapSystem.ServerClient ServerClient, NetConnectionId NetConnectionId, ConnectionStatusChangeReason ConnectionStatusReason, string ExtraData) Parameters ServerClient ServerBootstrapSystem.ServerClient The server client representing the user connection. NetConnectionId NetConnectionId The network connection ID of the user. ConnectionStatusReason ConnectionStatusChangeReason The reason for the connection status change. ExtraData string Optional extra data related to the disconnection. Properties ConnectionStatusReason The reason for the connection status change. public ConnectionStatusChangeReason ConnectionStatusReason { get; init; } Property Value ConnectionStatusChangeReason ExtraData Optional extra data related to the disconnection. public string ExtraData { get; init; } Property Value string NetConnectionId The network connection ID of the user. public NetConnectionId NetConnectionId { get; init; } Property Value NetConnectionId ServerClient The server client representing the user connection. public ServerBootstrapSystem.ServerClient ServerClient { get; init; } Property Value ServerBootstrapSystem.ServerClient"
  },
  "api/RisingV.Shared.EventBridge.VBloodConsumedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.VBloodConsumedEvent.html",
    "title": "Class EventBridge.VBloodConsumedEvent | RisingV.Shared",
    "summary": "Class EventBridge.VBloodConsumedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Event raised when one or more V-Blood orbs are consumed. public record EventBridge.VBloodConsumedEvent : Event<EventBridge.VBloodConsumedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.VBloodConsumedEvent>>, IEquatable<EventBridge.VBloodConsumedEvent> Inheritance object Event Event<EventBridge.VBloodConsumedEvent> EventBridge.VBloodConsumedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.VBloodConsumedEvent>> IEquatable<EventBridge.VBloodConsumedEvent> Inherited Members Event<EventBridge.VBloodConsumedEvent>.Subscribe(object, EventHandler<EventBridge.VBloodConsumedEvent>) Event<EventBridge.VBloodConsumedEvent>.Subscribe(object, Func<EventBridge.VBloodConsumedEvent, ValueTask>) Event<EventBridge.VBloodConsumedEvent>.Subscribe(object, Action<EventBridge.VBloodConsumedEvent>) Event<EventBridge.VBloodConsumedEvent>.Unsubscribe(object, EventHandler<EventBridge.VBloodConsumedEvent>) Event<EventBridge.VBloodConsumedEvent>.Subscribe(EventHandler<EventBridge.VBloodConsumedEvent>) Event<EventBridge.VBloodConsumedEvent>.Subscribe(Func<EventBridge.VBloodConsumedEvent, ValueTask>) Event<EventBridge.VBloodConsumedEvent>.Subscribe(Action<EventBridge.VBloodConsumedEvent>) Event<EventBridge.VBloodConsumedEvent>.Unsubscribe(EventHandler<EventBridge.VBloodConsumedEvent>) Event<EventBridge.VBloodConsumedEvent>.Unsubscribe(Action<EventBridge.VBloodConsumedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors VBloodConsumedEvent(NativeList<VBloodConsumed>) Event raised when one or more V-Blood orbs are consumed. public VBloodConsumedEvent(NativeList<VBloodConsumed> NativeEvents) Parameters NativeEvents NativeList<VBloodConsumed> Properties NativeEvents public NativeList<VBloodConsumed> NativeEvents { get; init; } Property Value NativeList<VBloodConsumed>"
  },
  "api/RisingV.Shared.EventBridge.WeaponDestroyedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.WeaponDestroyedEvent.html",
    "title": "Class EventBridge.WeaponDestroyedEvent | RisingV.Shared",
    "summary": "Class EventBridge.WeaponDestroyedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Fired when a weapon entity is destroyed. public record EventBridge.WeaponDestroyedEvent : Event<EventBridge.WeaponDestroyedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.WeaponDestroyedEvent>>, IEquatable<EventBridge.WeaponDestroyedEvent> Inheritance object Event Event<EventBridge.WeaponDestroyedEvent> EventBridge.WeaponDestroyedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.WeaponDestroyedEvent>> IEquatable<EventBridge.WeaponDestroyedEvent> Inherited Members Event<EventBridge.WeaponDestroyedEvent>.Subscribe(object, EventHandler<EventBridge.WeaponDestroyedEvent>) Event<EventBridge.WeaponDestroyedEvent>.Subscribe(object, Func<EventBridge.WeaponDestroyedEvent, ValueTask>) Event<EventBridge.WeaponDestroyedEvent>.Subscribe(object, Action<EventBridge.WeaponDestroyedEvent>) Event<EventBridge.WeaponDestroyedEvent>.Unsubscribe(object, EventHandler<EventBridge.WeaponDestroyedEvent>) Event<EventBridge.WeaponDestroyedEvent>.Subscribe(EventHandler<EventBridge.WeaponDestroyedEvent>) Event<EventBridge.WeaponDestroyedEvent>.Subscribe(Func<EventBridge.WeaponDestroyedEvent, ValueTask>) Event<EventBridge.WeaponDestroyedEvent>.Subscribe(Action<EventBridge.WeaponDestroyedEvent>) Event<EventBridge.WeaponDestroyedEvent>.Unsubscribe(EventHandler<EventBridge.WeaponDestroyedEvent>) Event<EventBridge.WeaponDestroyedEvent>.Unsubscribe(Action<EventBridge.WeaponDestroyedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors WeaponDestroyedEvent(Entity, WeaponLevel?) Fired when a weapon entity is destroyed. public WeaponDestroyedEvent(Entity WeaponEntity, WeaponLevel? Level) Parameters WeaponEntity Entity Level WeaponLevel? Properties Level public WeaponLevel? Level { get; init; } Property Value WeaponLevel? WeaponEntity public Entity WeaponEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.WeaponSpawnedEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.WeaponSpawnedEvent.html",
    "title": "Class EventBridge.WeaponSpawnedEvent | RisingV.Shared",
    "summary": "Class EventBridge.WeaponSpawnedEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Fired after a weapon has been spawned. public record EventBridge.WeaponSpawnedEvent : Event<EventBridge.WeaponSpawnedEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.WeaponSpawnedEvent>>, IEquatable<EventBridge.WeaponSpawnedEvent> Inheritance object Event Event<EventBridge.WeaponSpawnedEvent> EventBridge.WeaponSpawnedEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.WeaponSpawnedEvent>> IEquatable<EventBridge.WeaponSpawnedEvent> Inherited Members Event<EventBridge.WeaponSpawnedEvent>.Subscribe(object, EventHandler<EventBridge.WeaponSpawnedEvent>) Event<EventBridge.WeaponSpawnedEvent>.Subscribe(object, Func<EventBridge.WeaponSpawnedEvent, ValueTask>) Event<EventBridge.WeaponSpawnedEvent>.Subscribe(object, Action<EventBridge.WeaponSpawnedEvent>) Event<EventBridge.WeaponSpawnedEvent>.Unsubscribe(object, EventHandler<EventBridge.WeaponSpawnedEvent>) Event<EventBridge.WeaponSpawnedEvent>.Subscribe(EventHandler<EventBridge.WeaponSpawnedEvent>) Event<EventBridge.WeaponSpawnedEvent>.Subscribe(Func<EventBridge.WeaponSpawnedEvent, ValueTask>) Event<EventBridge.WeaponSpawnedEvent>.Subscribe(Action<EventBridge.WeaponSpawnedEvent>) Event<EventBridge.WeaponSpawnedEvent>.Unsubscribe(EventHandler<EventBridge.WeaponSpawnedEvent>) Event<EventBridge.WeaponSpawnedEvent>.Unsubscribe(Action<EventBridge.WeaponSpawnedEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors WeaponSpawnedEvent(Entity, WeaponLevel?) Fired after a weapon has been spawned. public WeaponSpawnedEvent(Entity WeaponEntity, WeaponLevel? Level) Parameters WeaponEntity Entity Level WeaponLevel? Properties Level public WeaponLevel? Level { get; init; } Property Value WeaponLevel? WeaponEntity public Entity WeaponEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.WeaponSpawningEvent.html": {
    "href": "api/RisingV.Shared.EventBridge.WeaponSpawningEvent.html",
    "title": "Class EventBridge.WeaponSpawningEvent | RisingV.Shared",
    "summary": "Class EventBridge.WeaponSpawningEvent Namespace RisingV.Shared Assembly RisingV.Shared.dll Fired before a weapon prefab is spawned into the world. public record EventBridge.WeaponSpawningEvent : Event<EventBridge.WeaponSpawningEvent>, IEvent, IEquatable<Event>, IEquatable<Event<EventBridge.WeaponSpawningEvent>>, IEquatable<EventBridge.WeaponSpawningEvent> Inheritance object Event Event<EventBridge.WeaponSpawningEvent> EventBridge.WeaponSpawningEvent Implements IEvent IEquatable<Event> IEquatable<Event<EventBridge.WeaponSpawningEvent>> IEquatable<EventBridge.WeaponSpawningEvent> Inherited Members Event<EventBridge.WeaponSpawningEvent>.Subscribe(object, EventHandler<EventBridge.WeaponSpawningEvent>) Event<EventBridge.WeaponSpawningEvent>.Subscribe(object, Func<EventBridge.WeaponSpawningEvent, ValueTask>) Event<EventBridge.WeaponSpawningEvent>.Subscribe(object, Action<EventBridge.WeaponSpawningEvent>) Event<EventBridge.WeaponSpawningEvent>.Unsubscribe(object, EventHandler<EventBridge.WeaponSpawningEvent>) Event<EventBridge.WeaponSpawningEvent>.Subscribe(EventHandler<EventBridge.WeaponSpawningEvent>) Event<EventBridge.WeaponSpawningEvent>.Subscribe(Func<EventBridge.WeaponSpawningEvent, ValueTask>) Event<EventBridge.WeaponSpawningEvent>.Subscribe(Action<EventBridge.WeaponSpawningEvent>) Event<EventBridge.WeaponSpawningEvent>.Unsubscribe(EventHandler<EventBridge.WeaponSpawningEvent>) Event<EventBridge.WeaponSpawningEvent>.Unsubscribe(Action<EventBridge.WeaponSpawningEvent>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors WeaponSpawningEvent(Entity, WeaponLevel?) Fired before a weapon prefab is spawned into the world. public WeaponSpawningEvent(Entity WeaponEntity, WeaponLevel? Level) Parameters WeaponEntity Entity Level WeaponLevel? Properties Level public WeaponLevel? Level { get; init; } Property Value WeaponLevel? WeaponEntity public Entity WeaponEntity { get; init; } Property Value Entity"
  },
  "api/RisingV.Shared.EventBridge.html": {
    "href": "api/RisingV.Shared.EventBridge.html",
    "title": "Class EventBridge | RisingV.Shared",
    "summary": "Class EventBridge Namespace RisingV.Shared Assembly RisingV.Shared.dll Provides a centralized event bus for handling various game events. public static class EventBridge Inheritance object EventBridge Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispose() Disposes the underlying global EventBus and releases all subscriptions. Call during server shutdown. public static void Dispose() PublishAsync<TEvent>(TEvent, CancellationToken) Publishes evt asynchronously to all subscribers. Exceptions propagate to the caller. public static ValueTask PublishAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent ct CancellationToken Returns ValueTask Type Parameters TEvent PublishSafeAsync<TEvent>(TEvent, CancellationToken) Publishes evt asynchronously, swallowing subscriber exceptions and logging them instead. public static ValueTask PublishSafeAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent ct CancellationToken Returns ValueTask Type Parameters TEvent PublishSafe<TEvent>(TEvent, CancellationToken) Synchronous “safe” publish variant: subscriber exceptions are caught and logged. public static void PublishSafe<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent ct CancellationToken Type Parameters TEvent Publish<TEvent>(TEvent, CancellationToken) Synchronously publishes evt to all listeners. public static void Publish<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent ct CancellationToken Type Parameters TEvent Subscribe<TEvent>(object, EventHandler<TEvent>, int) Subscribes an asynchronous handler to TEvent and returns an IDisposable that removes the subscription when disposed. public static IDisposable Subscribe<TEvent>(object owner, EventHandler<TEvent> handler, int handlerHash = 0) where TEvent : IEvent Parameters owner object handler EventHandler<TEvent> handlerHash int Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(object, Action<TEvent>) Subscribes a synchronous Action<T> handler. public static IDisposable Subscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object handler Action<TEvent> Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(object, Func<TEvent, ValueTask>) Subscribes a Func<TResult> asynchronous handler. public static IDisposable Subscribe<TEvent>(object owner, Func<TEvent, ValueTask> handler) where TEvent : IEvent Parameters owner object handler Func<TEvent, ValueTask> Returns IDisposable Type Parameters TEvent Unsubscribe(object) Removes owner's entire subscription set. public static void Unsubscribe(object owner) Parameters owner object Unsubscribe<TEvent>(object, EventHandler<TEvent>) Unsubscribes a previously registered asynchronous handler. public static void Unsubscribe<TEvent>(object owner, EventHandler<TEvent> handler) where TEvent : IEvent Parameters owner object handler EventHandler<TEvent> Type Parameters TEvent Unsubscribe<TEvent>(object, Action<TEvent>) Unsubscribes a previously registered synchronous handler. public static void Unsubscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object handler Action<TEvent> Type Parameters TEvent"
  },
  "api/RisingV.Shared.Events.Event-1.html": {
    "href": "api/RisingV.Shared.Events.Event-1.html",
    "title": "Class Event<TEvent> | RisingV.Shared",
    "summary": "Class Event<TEvent> Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a generic event that can be used to subscribe to specific event types. public abstract record Event<TEvent> : Event, IEvent, IEquatable<Event>, IEquatable<Event<TEvent>> where TEvent : IEvent Type Parameters TEvent Inheritance object Event Event<TEvent> Implements IEvent IEquatable<Event> IEquatable<Event<TEvent>> Derived EventBridge.ArmorDestroyedEvent EventBridge.ArmorSpawnedEvent EventBridge.ArmorSpawningEvent EventBridge.BuffServerSpawnEvent EventBridge.DeathEvent<TEvent> EventBridge.EquipmentEvent EventBridge.OnFilesChangedEvent EventBridge.OnGameDataDestroyedEvent EventBridge.OnGameDataInitializedEvent EventBridge.OnPersistenceSystemLoadedEvent EventBridge.OnPersistenceSystemLoadingEvent EventBridge.OnPluginReadyEvent<TContext> EventBridge.OnPluginsInitializingEvent EventBridge.OnPluginsLoadedEvent EventBridge.OnPluginsLoadingEvent EventBridge.OnPluginsPartialLoadedEvent EventBridge.OnPluginsReadyEvent EventBridge.OnSaveEvent EventBridge.PlayerAdminAuthEvent EventBridge.PlayerCompleteAchievementEvent EventBridge.PlayerDownedEvent EventBridge.PlayerKickBanEvent EventBridge.ScriptDespawnEvent EventBridge.ScriptSpawnEvent EventBridge.ServerStartupSuccessfulEvent EventBridge.SpawnEvent EventBridge.UnitDownedEvent EventBridge.UnitStatBuffSpawnEvent EventBridge.UserConnectEvent EventBridge.UserDisconnectEvent EventBridge.VBloodConsumedEvent EventBridge.WeaponDestroyedEvent EventBridge.WeaponSpawnedEvent EventBridge.WeaponSpawningEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Subscribe(EventHandler<TEvent>) Unsubscribes from an event using the specified owner and action handler. public static IDisposable Subscribe(EventHandler<TEvent> handler) Parameters handler EventHandler<TEvent> The action handler to be removed from the subscription. Returns IDisposable Returns true if the handler was successfully unsubscribed; otherwise, false. Subscribe(Action<TEvent>) Subscribes to an event with an action handler. public static IDisposable Subscribe(Action<TEvent> handler) Parameters handler Action<TEvent> The action handler to be invoked when the event is raised. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Subscribe(Func<TEvent, ValueTask>) Subscribes to an event with an asynchronous handler. public static IDisposable Subscribe(Func<TEvent, ValueTask> handler) Parameters handler Func<TEvent, ValueTask> The asynchronous event handler to be invoked when the event is raised. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Subscribe(object, EventHandler<TEvent>) Subscribes to an event with a specific owner and handler. public static IDisposable Subscribe(object owner, EventHandler<TEvent> handler) Parameters owner object The owner of the event subscription, used to unsubscribe by owner. handler EventHandler<TEvent> The event handler to be invoked when the event is raised. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Subscribe(object, Action<TEvent>) Subscribes to an event with a specific owner and action handler. public static IDisposable Subscribe(object owner, Action<TEvent> handler) Parameters owner object The owner of the event subscription, used to unsubscribe by owner. handler Action<TEvent> The action handler to be invoked when the event is raised. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Subscribe(object, Func<TEvent, ValueTask>) Subscribes to an event with a specific owner and asynchronous handler. public static IDisposable Subscribe(object owner, Func<TEvent, ValueTask> handler) Parameters owner object The owner of the event subscription, used to unsubscribe by owner. handler Func<TEvent, ValueTask> The asynchronous event handler to be invoked when the event is raised. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Unsubscribe(EventHandler<TEvent>) Unsubscribes from an event using the specified handler. public static void Unsubscribe(EventHandler<TEvent> handler) Parameters handler EventHandler<TEvent> The event handler to be removed from the subscription. Unsubscribe(Action<TEvent>) Unsubscribes from an event using the specified asynchronous handler. public static void Unsubscribe(Action<TEvent> handler) Parameters handler Action<TEvent> The asynchronous event handler to be removed from the subscription. Unsubscribe(object, EventHandler<TEvent>) Unsubscribes from an event using the specified owner and handler. public static void Unsubscribe(object owner, EventHandler<TEvent> handler) Parameters owner object The owner of the event subscription, used to unsubscribe by owner. handler EventHandler<TEvent> The event handler to be removed from the subscription."
  },
  "api/RisingV.Shared.Events.Event.html": {
    "href": "api/RisingV.Shared.Events.Event.html",
    "title": "Class Event | RisingV.Shared",
    "summary": "Class Event Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a base class for events in the application. public abstract record Event : IEvent, IEquatable<Event> Inheritance object Event Implements IEvent IEquatable<Event> Derived EventBridge.StatChangedEvent Event<TEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Events.EventBus.html": {
    "href": "api/RisingV.Shared.Events.EventBus.html",
    "title": "Class EventBus | RisingV.Shared",
    "summary": "Class EventBus Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents an event bus that allows publishing and subscribing to events. public sealed class EventBus : IEventBus, IPluginComponent, IManageable<PluginComponentsManager>, IManageable, IEventBusPublisher, IEventBusSubscriber, IDisposable Inheritance object EventBus Implements IEventBus IPluginComponent IManageable<PluginComponentsManager> IManageable IEventBusPublisher IEventBusSubscriber IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Dispose() Disposes the event bus, clearing all subscriptions. public void Dispose() PublishAsync<TEvent>(TEvent, CancellationToken) Publishes an event asynchronously to all subscribers of the specified event type. public ValueTask PublishAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Returns ValueTask Type Parameters TEvent The type of the event to publish. Exceptions AggregateException Thrown if any of the event handlers throw an exception. PublishSafeAsync<TEvent>(TEvent, CancellationToken) Publishes an event asynchronously to all subscribers of the specified event type, catching any exceptions. public ValueTask PublishSafeAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Returns ValueTask Type Parameters TEvent The type of the event to publish. PublishSafe<TEvent>(TEvent, CancellationToken) Publishes an event synchronously to all subscribers of the specified event type, catching any exceptions. public void PublishSafe<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Type Parameters TEvent The type of the event to publish. Publish<TEvent>(TEvent, CancellationToken) Publishes an event synchronously to all subscribers of the specified event type. public void Publish<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Type Parameters TEvent The type of the event to publish. Subscribe<TEvent>(EventHandler<TEvent>) Subscribes a handler to the event bus for a specific event type. public IDisposable Subscribe<TEvent>(EventHandler<TEvent> handler) where TEvent : IEvent Parameters handler EventHandler<TEvent> Handler to subscribe to the event. Returns IDisposable An IDisposable that can be used to unsubscribe the handler. Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(IEventListener<TEvent>) Subscribes a handler to the event bus for a specific event type using an IEventListener<TEvent>. public IDisposable Subscribe<TEvent>(IEventListener<TEvent> handler) where TEvent : IEvent Parameters handler IEventListener<TEvent> Handler to subscribe to the event. Returns IDisposable An IDisposable that can be used to unsubscribe the handler. Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(Action<TEvent>) Subscribes a handler to the event bus for a specific event type. public IDisposable Subscribe<TEvent>(Action<TEvent> handler) where TEvent : IEvent Parameters handler Action<TEvent> Handler to subscribe to the event. Returns IDisposable An IDisposable that can be used to unsubscribe the handler. Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(Func<TEvent, ValueTask>) Subscribes a handler to the event bus for a specific event type. public IDisposable Subscribe<TEvent>(Func<TEvent, ValueTask> handler) where TEvent : IEvent Parameters handler Func<TEvent, ValueTask> Handler to subscribe to the event. Returns IDisposable An IDisposable that can be used to unsubscribe the handler. Type Parameters TEvent The type of the event to subscribe to. Unsubscribe<TEvent>(EventHandler<TEvent>) Unsubscribes a handler from the event bus for a specific event type. public void Unsubscribe<TEvent>(EventHandler<TEvent> handler) where TEvent : IEvent Parameters handler EventHandler<TEvent> Handler to unsubscribe from the event. Type Parameters TEvent The type of the event to unsubscribe from."
  },
  "api/RisingV.Shared.Events.EventHandler-1.html": {
    "href": "api/RisingV.Shared.Events.EventHandler-1.html",
    "title": "Delegate EventHandler<TEvent> | RisingV.Shared",
    "summary": "Delegate EventHandler<TEvent> Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents an event that can be published and subscribed to in the event bus system. public delegate ValueTask EventHandler<in TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent Represents an event that can be published and subscribed to in the event bus system. ct CancellationToken Represents an event that can be published and subscribed to in the event bus system. Returns ValueTask Represents an event that can be published and subscribed to in the event bus system. Type Parameters TEvent Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Events.GenericEvent-1.html": {
    "href": "api/RisingV.Shared.Events.GenericEvent-1.html",
    "title": "Class GenericEvent<T> | RisingV.Shared",
    "summary": "Class GenericEvent<T> Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a generic event that can be used to subscribe to specific event types. public record GenericEvent<T> : IEvent, IEquatable<GenericEvent<T>> Type Parameters T Inheritance object GenericEvent<T> Implements IEvent IEquatable<GenericEvent<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Shared.Events.GenericEvent-2.html": {
    "href": "api/RisingV.Shared.Events.GenericEvent-2.html",
    "title": "Class GenericEvent<T1, T2> | RisingV.Shared",
    "summary": "Class GenericEvent<T1, T2> Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a generic event that can be used to subscribe to specific event types with two parameters. public record GenericEvent<T1, T2> : IEvent, IEquatable<GenericEvent<T1, T2>> Type Parameters T1 T2 Inheritance object GenericEvent<T1, T2> Implements IEvent IEquatable<GenericEvent<T1, T2>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Shared.Events.IEvent.html": {
    "href": "api/RisingV.Shared.Events.IEvent.html",
    "title": "Interface IEvent | RisingV.Shared",
    "summary": "Interface IEvent Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a base interface for events in the application. public interface IEvent Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Events.IEventBus.html": {
    "href": "api/RisingV.Shared.Events.IEventBus.html",
    "title": "Interface IEventBus | RisingV.Shared",
    "summary": "Interface IEventBus Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents an event that can be published and subscribed to in the event bus system. public interface IEventBus : IPluginComponent, IManageable<PluginComponentsManager>, IManageable Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Events.IEventBusManagedSubscriber.html": {
    "href": "api/RisingV.Shared.Events.IEventBusManagedSubscriber.html",
    "title": "Interface IEventBusManagedSubscriber | RisingV.Shared",
    "summary": "Interface IEventBusManagedSubscriber Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Interface for an event bus that manages subscriptions. public interface IEventBusManagedSubscriber Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Subscribe<TEvent>(object, EventHandler<TEvent>, int) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. IDisposable Subscribe<TEvent>(object owner, EventHandler<TEvent> handler, int handlerHash = 0) where TEvent : IEvent Parameters owner object handler EventHandler<TEvent> handlerHash int Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(object, IEventListener<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. IDisposable Subscribe<TEvent>(object owner, IEventListener<TEvent> handler) where TEvent : IEvent Parameters owner object handler IEventListener<TEvent> Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(object, Action<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. IDisposable Subscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object handler Action<TEvent> Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(object, Func<TEvent, ValueTask>) Convenience wrapper for synchronous handlers that return void. IDisposable Subscribe<TEvent>(object owner, Func<TEvent, ValueTask> handler) where TEvent : IEvent Parameters owner object handler Func<TEvent, ValueTask> Returns IDisposable Type Parameters TEvent Unsubscribe(object) Unsubscribe all handlers for the given owner. void Unsubscribe(object owner) Parameters owner object Unsubscribe<TEvent>(object, EventHandler<TEvent>) Unsubscribe a handler. void Unsubscribe<TEvent>(object owner, EventHandler<TEvent> handler) where TEvent : IEvent Parameters owner object handler EventHandler<TEvent> Type Parameters TEvent Unsubscribe<TEvent>(object, IEventListener<TEvent>) Unsubscribe a handler. void Unsubscribe<TEvent>(object owner, IEventListener<TEvent> handler) where TEvent : IEvent Parameters owner object handler IEventListener<TEvent> Type Parameters TEvent Unsubscribe<TEvent>(object, Action<TEvent>) Unsubscribe a handler. void Unsubscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object handler Action<TEvent> Type Parameters TEvent"
  },
  "api/RisingV.Shared.Events.IEventBusPublisher.html": {
    "href": "api/RisingV.Shared.Events.IEventBusPublisher.html",
    "title": "Interface IEventBusPublisher | RisingV.Shared",
    "summary": "Interface IEventBusPublisher Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents an event that can be published and subscribed to in the event bus system. public interface IEventBusPublisher Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods PublishAsync<TEvent>(TEvent, CancellationToken) Publishes an event asynchronously to all subscribers of the specified event type. ValueTask PublishAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Returns ValueTask A task that represents the asynchronous operation. Type Parameters TEvent The type of the event to publish. PublishSafeAsync<TEvent>(TEvent, CancellationToken) Publishes an event asynchronously to all subscribers of the specified event type, catching any exceptions. ValueTask PublishSafeAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Returns ValueTask A task that represents the asynchronous operation. Type Parameters TEvent The type of the event to publish. PublishSafe<TEvent>(TEvent, CancellationToken) Publishes an event synchronously to all subscribers of the specified event type, catching any exceptions. void PublishSafe<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Type Parameters TEvent The type of the event to publish. Publish<TEvent>(TEvent, CancellationToken) Publishes an event synchronously to all subscribers of the specified event type. void Publish<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken The cancellation token to observe while publishing the event. Type Parameters TEvent The type of the event to publish."
  },
  "api/RisingV.Shared.Events.IEventBusSubscriber.html": {
    "href": "api/RisingV.Shared.Events.IEventBusSubscriber.html",
    "title": "Interface IEventBusSubscriber | RisingV.Shared",
    "summary": "Interface IEventBusSubscriber Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a subscriber to the event bus system. public interface IEventBusSubscriber Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Subscribe<TEvent>(EventHandler<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. IDisposable Subscribe<TEvent>(EventHandler<TEvent> handler) where TEvent : IEvent Parameters handler EventHandler<TEvent> Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(IEventListener<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. IDisposable Subscribe<TEvent>(IEventListener<TEvent> handler) where TEvent : IEvent Parameters handler IEventListener<TEvent> Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(Action<TEvent>) Convenience wrapper for synchronous handlers that return void. IDisposable Subscribe<TEvent>(Action<TEvent> handler) where TEvent : IEvent Parameters handler Action<TEvent> Returns IDisposable Type Parameters TEvent Subscribe<TEvent>(Func<TEvent, ValueTask>) Convenience wrapper for synchronous handlers that return void. IDisposable Subscribe<TEvent>(Func<TEvent, ValueTask> handler) where TEvent : IEvent Parameters handler Func<TEvent, ValueTask> Returns IDisposable Type Parameters TEvent Unsubscribe<TEvent>(EventHandler<TEvent>) Unsubscribe a handler. void Unsubscribe<TEvent>(EventHandler<TEvent> handler) where TEvent : IEvent Parameters handler EventHandler<TEvent> Type Parameters TEvent"
  },
  "api/RisingV.Shared.Events.IEventListener-1.html": {
    "href": "api/RisingV.Shared.Events.IEventListener-1.html",
    "title": "Interface IEventListener<TEvent> | RisingV.Shared",
    "summary": "Interface IEventListener<TEvent> Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents an event that can be published and subscribed to in the event bus system. public interface IEventListener<in TEvent> where TEvent : IEvent Type Parameters TEvent The type of the event. Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods OnEventAsync(TEvent, CancellationToken) Handles the event asynchronously. ValueTask OnEventAsync(TEvent evt, CancellationToken ct = default) Parameters evt TEvent The event to handle. ct CancellationToken The cancellation token to observe while handling the event. Returns ValueTask A task that represents the asynchronous operation."
  },
  "api/RisingV.Shared.Events.ManagedEventBus.html": {
    "href": "api/RisingV.Shared.Events.ManagedEventBus.html",
    "title": "Class ManagedEventBus | RisingV.Shared",
    "summary": "Class ManagedEventBus Namespace RisingV.Shared.Events Assembly RisingV.Shared.dll Represents a managed event bus that allows subscribing and publishing events. public class ManagedEventBus : IEventBus, IPluginComponent, IManageable<PluginComponentsManager>, IManageable, IEventBusPublisher, IEventBusManagedSubscriber Inheritance object ManagedEventBus Implements IEventBus IPluginComponent IManageable<PluginComponentsManager> IManageable IEventBusPublisher IEventBusManagedSubscriber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Dispose() Disposes the event bus and all its subscriptions. public void Dispose() PublishAsync<TEvent>(TEvent, CancellationToken) Publish an event asynchronously to all subscribers. public ValueTask PublishAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Returns ValueTask Type Parameters TEvent The type of the event to publish. PublishSafeAsync<TEvent>(TEvent, CancellationToken) Publish an event asynchronously to all subscribers, with error handling. public ValueTask PublishSafeAsync<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Returns ValueTask Type Parameters TEvent The type of the event to publish. PublishSafe<TEvent>(TEvent, CancellationToken) Publish an event synchronously to all subscribers, with error handling. public void PublishSafe<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Type Parameters TEvent The type of the event to publish. Publish<TEvent>(TEvent, CancellationToken) Publish an event synchronously to all subscribers. public void Publish<TEvent>(TEvent evt, CancellationToken ct = default) where TEvent : IEvent Parameters evt TEvent The event to publish. ct CancellationToken Cancellation token to cancel the operation. Type Parameters TEvent The type of the event to publish. Subscribe<TEvent>(object, EventHandler<TEvent>, int) Initializes a new instance of the ManagedEventBus class. public IDisposable Subscribe<TEvent>(object owner, EventHandler<TEvent> handler, int handlerHash = 0) where TEvent : IEvent Parameters owner object The owner of the event bus, used for managing subscriptions. handler EventHandler<TEvent> Event handler to subscribe to the event bus. handlerHash int Optional hash code for the handler, used to identify the subscription. Returns IDisposable Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(object, IEventListener<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. public IDisposable Subscribe<TEvent>(object owner, IEventListener<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler IEventListener<TEvent> Handler that implements IEventListener<TEvent> interface. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(object, Action<TEvent>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. public IDisposable Subscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler Action<TEvent> Handler function that processes the event. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Type Parameters TEvent The type of the event to subscribe to. Subscribe<TEvent>(object, Func<TEvent, ValueTask>) Subscribe a handler and receive an IDisposable that will unsubscribe when disposed. public IDisposable Subscribe<TEvent>(object owner, Func<TEvent, ValueTask> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler Func<TEvent, ValueTask> Handler function that processes the event. Returns IDisposable An IDisposable that can be used to unsubscribe from the event. Type Parameters TEvent The type of the event to subscribe to. Unsubscribe(object) Unsubscribe all handlers for the given owner. public void Unsubscribe(object owner) Parameters owner object Owner of the subscriptions to unsubscribe. Unsubscribe(object, int) Unsubscribe a handler from the event bus using the owner and handler hash. protected void Unsubscribe(object owner, int handlerHash) Parameters owner object Owner of the subscription, used for managing subscriptions. handlerHash int Hash code of the handler to unsubscribe. Unsubscribe<TEvent>(object, EventHandler<TEvent>) Unsubscribe a handler from the event bus. public void Unsubscribe<TEvent>(object owner, EventHandler<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler EventHandler<TEvent> Handler function that processes the event. Type Parameters TEvent The type of the event to unsubscribe from. Unsubscribe<TEvent>(object, IEventListener<TEvent>) Unsubscribe a handler from the event bus. public void Unsubscribe<TEvent>(object owner, IEventListener<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler IEventListener<TEvent> Handler that implements IEventListener<TEvent> interface. Type Parameters TEvent The type of the event to unsubscribe from. Unsubscribe<TEvent>(object, Action<TEvent>) Unsubscribe a handler from the event bus. public void Unsubscribe<TEvent>(object owner, Action<TEvent> handler) where TEvent : IEvent Parameters owner object Owner of the subscription, used for managing subscriptions. handler Action<TEvent> Handler function that processes the event. Type Parameters TEvent The type of the event to unsubscribe from."
  },
  "api/RisingV.Shared.Events.html": {
    "href": "api/RisingV.Shared.Events.html",
    "title": "Namespace RisingV.Shared.Events | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Events Classes Event Represents a base class for events in the application. EventBus Represents an event bus that allows publishing and subscribing to events. Event<TEvent> Represents a generic event that can be used to subscribe to specific event types. GenericEvent<T> Represents a generic event that can be used to subscribe to specific event types. GenericEvent<T1, T2> Represents a generic event that can be used to subscribe to specific event types with two parameters. ManagedEventBus Represents a managed event bus that allows subscribing and publishing events. Interfaces IEvent Represents a base interface for events in the application. IEventBus Represents an event that can be published and subscribed to in the event bus system. IEventBusManagedSubscriber Interface for an event bus that manages subscriptions. IEventBusPublisher Represents an event that can be published and subscribed to in the event bus system. IEventBusSubscriber Represents a subscriber to the event bus system. IEventListener<TEvent> Represents an event that can be published and subscribed to in the event bus system. Delegates EventHandler<TEvent> Represents an event that can be published and subscribed to in the event bus system."
  },
  "api/RisingV.Shared.Exceptions.AlreadyExistsException.html": {
    "href": "api/RisingV.Shared.Exceptions.AlreadyExistsException.html",
    "title": "Class AlreadyExistsException | RisingV.Shared",
    "summary": "Class AlreadyExistsException Namespace RisingV.Shared.Exceptions Assembly RisingV.Shared.dll Represents an exception that is thrown when an attempt is made to create or add an entity that already exists. public class AlreadyExistsException : BaseException, ISerializable Inheritance object Exception BaseException AlreadyExistsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors AlreadyExistsException() protected AlreadyExistsException() AlreadyExistsException(SerializationInfo, StreamingContext) [Obsolete(\"Obsolete\")] protected AlreadyExistsException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext AlreadyExistsException(string) public AlreadyExistsException(string message) Parameters message string AlreadyExistsException(string, Exception) public AlreadyExistsException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/RisingV.Shared.Exceptions.BaseException.html": {
    "href": "api/RisingV.Shared.Exceptions.BaseException.html",
    "title": "Class BaseException | RisingV.Shared",
    "summary": "Class BaseException Namespace RisingV.Shared.Exceptions Assembly RisingV.Shared.dll Represents the base class for exceptions in the RisingV project. public class BaseException : Exception, ISerializable Inheritance object Exception BaseException Implements ISerializable Derived UnqualifiedTargetException AlreadyExistsException DatabaseException MissingDependenciesException NotFoundException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors BaseException() public BaseException() BaseException(SerializationInfo, StreamingContext) [Obsolete(\"Obsolete\")] protected BaseException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext BaseException(string) public BaseException(string message) Parameters message string BaseException(string, Exception) public BaseException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/RisingV.Shared.Exceptions.DataLoaderException.html": {
    "href": "api/RisingV.Shared.Exceptions.DataLoaderException.html",
    "title": "Class DataLoaderException | RisingV.Shared",
    "summary": "Class DataLoaderException Namespace RisingV.Shared.Exceptions Assembly RisingV.Shared.dll Represents an exception that occurs during data loading operations in the database. public class DataLoaderException : DatabaseException, ISerializable Inheritance object Exception BaseException DatabaseException DataLoaderException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DataLoaderException() public DataLoaderException() DataLoaderException(SerializationInfo, StreamingContext) [Obsolete(\"Obsolete\")] protected DataLoaderException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext DataLoaderException(string) public DataLoaderException(string message) Parameters message string DataLoaderException(string, Exception) public DataLoaderException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/RisingV.Shared.Exceptions.DatabaseException.html": {
    "href": "api/RisingV.Shared.Exceptions.DatabaseException.html",
    "title": "Class DatabaseException | RisingV.Shared",
    "summary": "Class DatabaseException Namespace RisingV.Shared.Exceptions Assembly RisingV.Shared.dll Represents an exception that occurs during database operations. public class DatabaseException : BaseException, ISerializable Inheritance object Exception BaseException DatabaseException Implements ISerializable Derived DataLoaderException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors DatabaseException() public DatabaseException() DatabaseException(SerializationInfo, StreamingContext) [Obsolete(\"Obsolete\")] protected DatabaseException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext DatabaseException(string) public DatabaseException(string message) Parameters message string DatabaseException(string, Exception) public DatabaseException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/RisingV.Shared.Exceptions.MissingDependenciesException.html": {
    "href": "api/RisingV.Shared.Exceptions.MissingDependenciesException.html",
    "title": "Class MissingDependenciesException | RisingV.Shared",
    "summary": "Class MissingDependenciesException Namespace RisingV.Shared.Exceptions Assembly RisingV.Shared.dll Represents an exception that is thrown when there are missing dependencies in the system. public class MissingDependenciesException : BaseException, ISerializable Inheritance object Exception BaseException MissingDependenciesException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors MissingDependenciesException(Map<Type, List<(Type, IManager)>>) Represents an exception that is thrown when there are missing dependencies in the system. public MissingDependenciesException(Map<Type, List<(Type, IManager)>> missingDependencies) Parameters missingDependencies Map<Type, List<(Type, IManager)>> Properties MissingDependencies public Map<Type, List<(Type, IManager)>> MissingDependencies { get; } Property Value Map<Type, List<(Type, IManager)>>"
  },
  "api/RisingV.Shared.Exceptions.NotFoundException.html": {
    "href": "api/RisingV.Shared.Exceptions.NotFoundException.html",
    "title": "Class NotFoundException | RisingV.Shared",
    "summary": "Class NotFoundException Namespace RisingV.Shared.Exceptions Assembly RisingV.Shared.dll Represents an exception that is thrown when a requested resource is not found. public class NotFoundException : BaseException, ISerializable Inheritance object Exception BaseException NotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors NotFoundException() protected NotFoundException() NotFoundException(SerializationInfo, StreamingContext) [Obsolete(\"Obsolete\")] protected NotFoundException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext NotFoundException(string) public NotFoundException(string message) Parameters message string NotFoundException(string, Exception) public NotFoundException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/RisingV.Shared.Exceptions.html": {
    "href": "api/RisingV.Shared.Exceptions.html",
    "title": "Namespace RisingV.Shared.Exceptions | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Exceptions Classes AlreadyExistsException Represents an exception that is thrown when an attempt is made to create or add an entity that already exists. BaseException Represents the base class for exceptions in the RisingV project. DataLoaderException Represents an exception that occurs during data loading operations in the database. DatabaseException Represents an exception that occurs during database operations. MissingDependenciesException Represents an exception that is thrown when there are missing dependencies in the system. NotFoundException Represents an exception that is thrown when a requested resource is not found."
  },
  "api/RisingV.Shared.Extensions.BoundsMinMaxExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.BoundsMinMaxExtensions.html",
    "title": "Class BoundsMinMaxExtensions | RisingV.Shared",
    "summary": "Class BoundsMinMaxExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for working with ProjectM.BoundsMinMax and tile entities. public static class BoundsMinMaxExtensions Inheritance object BoundsMinMaxExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEntitiesInArea(BoundsMinMax, TileType) Gets entities within a specified area and of a specific tile type. public static NativeArray<Entity> GetEntitiesInArea(this BoundsMinMax area, TileType tileType) Parameters area BoundsMinMax The bounds to search within tileType TileType The type of tile to search for Returns NativeArray<Entity> A NativeArray of entities matching the spatial and tile type criteria"
  },
  "api/RisingV.Shared.Extensions.CollectionExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | RisingV.Shared",
    "summary": "Class CollectionExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for collections. public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRange<T>(ICollection<T>, IEnumerable<T>) Adds a range of items to a collection. public static ICollection<T> AddRange<T>(this ICollection<T> collection, IEnumerable<T> items) Parameters collection ICollection<T> The collection to which items will be added. items IEnumerable<T> The items to add to the collection. Returns ICollection<T> The updated collection with the new items added. Type Parameters T The type of items in the collection."
  },
  "api/RisingV.Shared.Extensions.DictionaryExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | RisingV.Shared",
    "summary": "Class DictionaryExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for converting a dictionary to a map. public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToMap<TSource, TKey>(Dictionary<TKey, TSource>, Func<TSource, TKey>) Converts a dictionary to a map using the specified key selector. public static Map<TKey, TSource> ToMap<TSource, TKey>(this Dictionary<TKey, TSource> source, Func<TSource, TKey> keySelector) where TKey : notnull Parameters source Dictionary<TKey, TSource> keySelector Func<TSource, TKey> Returns Map<TKey, TSource> Type Parameters TSource TKey"
  },
  "api/RisingV.Shared.Extensions.DynamicBufferExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.DynamicBufferExtensions.html",
    "title": "Class DynamicBufferExtensions | RisingV.Shared",
    "summary": "Class DynamicBufferExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Extensions for Unity's DynamicBuffer to convert it to a List. public static class DynamicBufferExtensions Inheritance object DynamicBufferExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToList<T>(DynamicBuffer<T>) Converts a DynamicBuffer to a List of the specified type. public static List<T>? ToList<T>(this DynamicBuffer<T> bufferList) where T : new() Parameters bufferList DynamicBuffer<T> The DynamicBuffer to convert. Returns List<T> A List of type T containing the elements from the DynamicBuffer, or null if the buffer is empty. Type Parameters T The type of elements in the DynamicBuffer, must have a parameterless constructor."
  },
  "api/RisingV.Shared.Extensions.EntityExtensions.WithRefHandler-1.html": {
    "href": "api/RisingV.Shared.Extensions.EntityExtensions.WithRefHandler-1.html",
    "title": "Delegate EntityExtensions.WithRefHandler<T> | RisingV.Shared",
    "summary": "Delegate EntityExtensions.WithRefHandler<T> Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Delegate signature used by With<T>(Entity, WithRefHandler<T>) and AddWith<T>(Entity, WithRefHandler<T>) to let callers mutate a value-type component by ref. public delegate void EntityExtensions.WithRefHandler<T>(ref T item) Parameters item T Delegate signature used by and to let callers mutate a value-type component by ref. Type Parameters T Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Extensions.EntityExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.EntityExtensions.html",
    "title": "Class EntityExtensions | RisingV.Shared",
    "summary": "Class EntityExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Helper and convenience extensions that operate on Unity DOTS Unity.Entities.Entity values in V Rising server-side code. The methods fall into three broad groups: ECS helpers – raw component/buffer read-write, existence tests, add/remove utilities. Gameplay helpers – high-level domain operations such as kill/destroy, team assignment, inventory drops, etc. Debug utilities – entity dumps, component stringification, aspect checks. public static class EntityExtensions Inheritance object EntityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(Entity, ComponentType) Adds a component specified by componentType. public static void Add(this Entity entity, ComponentType componentType) Parameters entity Entity componentType ComponentType AddBuffer<T>(Entity) Adds (or retrieves) a dynamic buffer of type T. public static DynamicBuffer<T> AddBuffer<T>(this Entity entity) where T : struct Parameters entity Entity Returns DynamicBuffer<T> Type Parameters T AddWith<T>(Entity, WithRefHandler<T>) Ensures the entity has component T (adds if absent) and routes it through With<T>(Entity, WithRefHandler<T>). public static void AddWith<T>(this Entity entity, EntityExtensions.WithRefHandler<T> action) where T : struct Parameters entity Entity action EntityExtensions.WithRefHandler<T> Type Parameters T Add<T>(Entity) Adds component T (zero-initialised). public static void Add<T>(this Entity entity) Parameters entity Entity Type Parameters T AsPlayerCharacter(Entity) public static PlayerCharacter? AsPlayerCharacter(this Entity entity) Parameters entity Entity Returns PlayerCharacter? DebugName(Entity) public static string DebugName(this Entity entity) Parameters entity Entity Returns string Destroy(Entity) Immediately destroys the entity (no checks). public static void Destroy(this Entity entity) Parameters entity Entity DestroyWithReason(Entity) Destroys an entity with proper cleanup and logging. public static void DestroyWithReason(this Entity entity) Parameters entity Entity The entity to destroy Examples someEntity.DestroyWithReason(); Remarks This method follows the recommended destruction pattern: Disables the entity Creates a destroy event for tracking Performs the actual entity destruction DropItemNearby(Entity, PrefabGUID, int) public static void DropItemNearby(this Entity entity, PrefabGUID itemGuid, int amount) Parameters entity Entity itemGuid PrefabGUID amount int DropItemNearby(Entity, int, int) public static void DropItemNearby(this Entity entity, int itemGuidValue, int amount) Parameters entity Entity itemGuidValue int amount int Dump(Entity, string?, string?, string?) /// Dumps all component information of an entity to a specified file for debugging purposes. public static void Dump(this Entity entity, string? prefixDetails = null, string? directoryPath = null, string? fileName = null) Parameters entity Entity The entity to dump information from prefixDetails string Extra information at the start of the dump directoryPath string The directory path to write the dump, defaults to [BepInEx]/plugins/RisingV/DebugDumps fileName string The file name (with extension) for the dump, defaults to the entity debug name and index Examples someEntity.Dump(\"C:/debug\", \"entity_dump.txt\"); Remarks The dump includes a list of all components attached to the entity and their detailed information. The output is appended to the specified file with clear section separators. Exists(Entity) Checks if the entity exists in the EntityManager. public static bool Exists(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity exists, false otherwise. GetAimPosition(Entity) public static float3 GetAimPosition(this Entity entity) Parameters entity Entity Returns float3 GetAndLogPrefabGuid(Entity, string, Logger?) public static PrefabGUID GetAndLogPrefabGuid(this Entity entity, string logPrefix = \"\", Logger? logger = null) Parameters entity Entity logPrefix string logger Logger Returns PrefabGUID GetBuffTarget(Entity) public static Entity GetBuffTarget(this Entity entity) Parameters entity Entity Returns Entity GetBufferData(Entity, TypeIndex) Unsafe pointer to read-only buffer data. public static void* GetBufferData(this Entity entity, TypeIndex typeIndex) Parameters entity Entity typeIndex TypeIndex Returns void* GetBufferLength(Entity, TypeIndex) Returns the length of a dynamic buffer without instantiating it. public static int GetBufferLength(this Entity entity, TypeIndex typeIndex) Parameters entity Entity typeIndex TypeIndex Returns int GetChunk(Entity) public static TerrainChunk GetChunk(this Entity entity) Parameters entity Entity Returns TerrainChunk GetChunk(float3) public static TerrainChunk GetChunk(this float3 pos) Parameters pos float3 Returns TerrainChunk GetComponentData(Entity, TypeIndex) Unsafe pointer to read-only component data by Unity.Entities.TypeIndex. public static void* GetComponentData(this Entity entity, TypeIndex typeIndex) Parameters entity Entity typeIndex TypeIndex Returns void* GetEntitiesInArea(Entity, TileType) Gets entities intersecting the area defined by the entity's ProjectM.TileBounds. public static NativeArray<Entity> GetEntitiesInArea(this Entity entity, TileType tileType) Parameters entity Entity tileType TileType Returns NativeArray<Entity> GetNetworkId(Entity) public static NetworkId GetNetworkId(this Entity entity) Parameters entity Entity Returns NetworkId GetPlayerCharacter(Entity) public static PlayerCharacter? GetPlayerCharacter(this Entity entity) Parameters entity Entity Returns PlayerCharacter? GetPlayerCharacterEntity(Entity) public static Entity GetPlayerCharacterEntity(this Entity entity) Parameters entity Entity Returns Entity GetPosition(Entity) public static float3 GetPosition(this Entity entity) Parameters entity Entity Returns float3 GetPrefabGuid(Entity) public static PrefabGUID GetPrefabGuid(this Entity entity) Parameters entity Entity Returns PrefabGUID GetSpawnPosition(Entity) public static float3 GetSpawnPosition(this Entity entity) Parameters entity Entity Returns float3 GetSpellTarget(Entity) public static Entity GetSpellTarget(this Entity entity) Parameters entity Entity Returns Entity GetSteamId(Entity) public static ulong GetSteamId(this Entity entity) Parameters entity Entity Returns ulong GetUser(Entity) public static User GetUser(this Entity entity) Parameters entity Entity Returns User GetUserEntity(Entity) public static Entity GetUserEntity(this Entity entity) Parameters entity Entity Returns Entity Has(Entity, ComponentType) Component existence check taking an explicit Unity.Entities.ComponentType. public static bool Has(this Entity entity, ComponentType componentType) Parameters entity Entity componentType ComponentType Returns bool HasBuff(Entity, PrefabGUID) public static bool HasBuff(this Entity entity, PrefabGUID buffPrefabGuid) Parameters entity Entity buffPrefabGuid PrefabGUID Returns bool HasConnectedCoffin(Entity) public static bool HasConnectedCoffin(this Entity entity) Parameters entity Entity Returns bool HasRaw<T>(Entity) Checks for component presence using the raw API (slightly faster than the managed overload). public static bool HasRaw<T>(this Entity entity) where T : struct Parameters entity Entity Returns bool Type Parameters T Has<T>(Entity) Generic component existence check. public static bool Has<T>(this Entity entity) Parameters entity Entity Returns bool Type Parameters T IsAspect<TAspect>(object) public static bool IsAspect<TAspect>(this object entity) where TAspect : IAspect Parameters entity object Returns bool Type Parameters TAspect IsCustomSpawned(Entity) public static bool IsCustomSpawned(this Entity entity) Parameters entity Entity Returns bool IsDead(Entity) public static bool IsDead(this Entity entity) Parameters entity Entity Returns bool IsDisabled(Entity) Checks if the entity is disabled. public static bool IsDisabled(this Entity entity) Parameters entity Entity The entity to check. Returns bool True if the entity is disabled, false otherwise. IsNull(Entity) public static bool IsNull(this Entity entity) Parameters entity Entity Returns bool KillOrDestroy(Entity) Kills or destroys an entity based on game rules and conditions. public static void KillOrDestroy(this Entity entity) Parameters entity Entity The entity to kill or destroy Examples someEntity.KillOrDestroy(); Remarks This method uses the StatChangeUtility to process the entity's death or destruction. The same entity is used for source, target, and instigator parameters. PrintComponentTypes(Entity, bool, string) public static void PrintComponentTypes(this Entity entity, bool printError = true, string separator = \"\\n\") Parameters entity Entity printError bool separator string ReadBuffer<T>(Entity) Returns a dynamic buffer of type T. Throws if the buffer is missing. public static DynamicBuffer<T> ReadBuffer<T>(this Entity entity) where T : struct Parameters entity Entity Returns DynamicBuffer<T> Type Parameters T ReadTry<T>(Entity) Safe wrapper around Read<T>(Entity) that returns null instead of throwing when the component is missing. public static T? ReadTry<T>(this Entity entity) where T : struct Parameters entity Entity Returns T? Type Parameters T Read<T>(Entity) Raw read-only access to component T. public static T Read<T>(this Entity entity) where T : struct Parameters entity Entity Returns T Type Parameters T Remove<T>(Entity) Removes component T from the entity. public static void Remove<T>(this Entity entity) Parameters entity Entity Type Parameters T SetBufferData<T>(Entity, T[]) Clears (or creates) a dynamic buffer and fills it with bufferArray. public static void SetBufferData<T>(this Entity prefabSource, T[] bufferArray) where T : struct Parameters prefabSource Entity bufferArray T[] Type Parameters T SetComponentData(Entity, TypeIndex, void*, int) Unsafe raw setter for component data. public static void SetComponentData(this Entity entity, TypeIndex typeIndex, void* byteData, int size) Parameters entity Entity typeIndex TypeIndex byteData void* size int SetFaction(Entity, PrefabGUID) public static void SetFaction(this Entity entity, PrefabGUID factionPrefabGuid) Parameters entity Entity factionPrefabGuid PrefabGUID SetTeam(Entity, Entity) public static void SetTeam(this Entity entity, Entity teamSource) Parameters entity Entity teamSource Entity SortByDistance(NativeArray<Entity>, float3) Sorts an array of entities by their distance from a given position. public static NativeArray<Entity> SortByDistance(this NativeArray<Entity> entities, float3 position) Parameters entities NativeArray<Entity> The array of entities to sort position float3 The reference position to measure distances from Returns NativeArray<Entity> The sorted array of entities StructureToByteArray<T>(T) Marshals a blittable struct into a byte array. Primarily used by Write<T>(Entity, T). public static byte[] StructureToByteArray<T>(T structure) where T : struct Parameters structure T Returns byte[] Type Parameters T ToComponentString(Entity, string) public static string ToComponentString(this Entity entity, string separator = \"\\n - \") Parameters entity Entity separator string Returns string TryGetBuff(Entity, PrefabGUID, out Entity) public static bool TryGetBuff(this Entity entity, PrefabGUID buffPrefabGuid, out Entity buffEntity) Parameters entity Entity buffPrefabGuid PrefabGUID buffEntity Entity Returns bool TryGetBuffer<T>(Entity, out DynamicBuffer<T>) Attempts to get a dynamic buffer without throwing. public static bool TryGetBuffer<T>(this Entity entity, out DynamicBuffer<T> dynamicBuffer) where T : struct Parameters entity Entity dynamicBuffer DynamicBuffer<T> Returns bool Type Parameters T TryGetComponentObject<T>(Entity, EntityManager, out T?) Attempts to obtain a managed component object. public static bool TryGetComponentObject<T>(this Entity entity, EntityManager entityManager, out T? componentObject) where T : class Parameters entity Entity entityManager EntityManager componentObject T Returns bool Type Parameters T TryGetComponent<T>(Entity, out T) Attempts to read component T without throwing. public static bool TryGetComponent<T>(this Entity entity, out T componentData) where T : struct Parameters entity Entity componentData T Returns bool Type Parameters T TryGetFollower(Entity, out Entity) public static bool TryGetFollower(this Entity source, out Entity result) Parameters source Entity result Entity Returns bool TryGetMatch(HashSet<(ulong, ulong)>, ulong, out (ulong, ulong)) public static bool TryGetMatch(this HashSet<(ulong, ulong)> hashSet, ulong value, out (ulong, ulong) matchingPair) Parameters hashSet HashSet<(ulong, ulong)> value ulong matchingPair (ulong, ulong) Returns bool TryGetPosition(Entity, out float3) public static bool TryGetPosition(this Entity entity, out float3 position) Parameters entity Entity position float3 Returns bool TryGetTeamEntity(Entity, out Entity) public static bool TryGetTeamEntity(this Entity entity, out Entity teamEntity) Parameters entity Entity teamEntity Entity Returns bool TryRemoveComponent<T>(Entity) Removes component T if present and returns true on success. public static bool TryRemoveComponent<T>(this Entity entity) where T : struct Parameters entity Entity Returns bool Type Parameters T With<T>(Entity, WithRefHandler<T>) Reads component T, executes action, then writes the component back to the entity. public static void With<T>(this Entity entity, EntityExtensions.WithRefHandler<T> action) where T : struct Parameters entity Entity Target entity. action EntityExtensions.WithRefHandler<T> Mutation delegate. Type Parameters T Component type. Write<T>(Entity, T) Writes unmanaged component data using the raw pointer API for maximum performance (no boxing or GC allocations). public static void Write<T>(this Entity entity, T componentData) where T : struct Parameters entity Entity componentData T Type Parameters T"
  },
  "api/RisingV.Shared.Extensions.EntityManagerExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.EntityManagerExtensions.html",
    "title": "Class EntityManagerExtensions | RisingV.Shared",
    "summary": "Class EntityManagerExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for the Unity.Entities.EntityManager class. public static class EntityManagerExtensions Inheritance object EntityManagerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBufferInternal<T>(EntityManager, Entity) Gets the component data of type T from the specified entity. public static List<T>? GetBufferInternal<T>(this EntityManager entityManager, Entity entity) where T : struct Parameters entityManager EntityManager The Unity.Entities.EntityManager instance. entity Entity The entity to check. Returns List<T> Type Parameters T The type of the component to check for. GetComponentDataAOT<T>(EntityManager, Entity) Get ComponentData AOT of type T from the specified entity. public static T GetComponentDataAOT<T>(this EntityManager em, Entity entity) where T : unmanaged Parameters em EntityManager The Unity.Entities.EntityManager instance. entity Entity The entity to check. Returns T The component data of type T if it exists, otherwise default value. Type Parameters T The type of the component to check for, must be unmanaged. GetComponentDataOrDefault<T>(EntityManager, Entity, out T?) Gets the component data of type T from the specified entity. public static bool GetComponentDataOrDefault<T>(this EntityManager entityManager, Entity entity, out T? value) where T : new() Parameters entityManager EntityManager The Unity.Entities.EntityManager instance. entity Entity The entity to check. value T The output parameter to hold the component data if it exists. Returns bool Type Parameters T The type of the component to check for. GetEntitiesByComponentType<T1>(EntityManager, EntityQueryOptions, bool) Gets all entities that have a component of type T1. public static NativeArray<Entity> GetEntitiesByComponentType<T1>(this EntityManager em, EntityQueryOptions queryOption = EntityQueryOptions.Default, bool includeAll = false) Parameters em EntityManager The Unity.Entities.EntityManager instance. queryOption EntityQueryOptions The options for the entity query. includeAll bool Whether to include all entities or only those that match the specified component type. Returns NativeArray<Entity> A Unity.Collections.NativeArray<T> containing all entities that have the specified component type. Type Parameters T1 The type of the component to query for. GetEntitiesByComponentTypes<T1, T2>(EntityManager, EntityQueryOptions, bool) Gets all entities that have components of type T1 and T2. public static NativeArray<Entity> GetEntitiesByComponentTypes<T1, T2>(this EntityManager em, EntityQueryOptions queryOption = EntityQueryOptions.Default, bool includeAll = false) Parameters em EntityManager The Unity.Entities.EntityManager instance. queryOption EntityQueryOptions The options for the entity query. includeAll bool Whether to include all entities or only those that match the specified component types. Returns NativeArray<Entity> A Unity.Collections.NativeArray<T> containing all entities that have the specified component types. Type Parameters T1 The type of the first component to query for. T2 The type of the second component to query for. GetEntitiesByComponentTypes<T1, T2, T3>(EntityManager, EntityQueryOptions, bool) Gets all entities that have components of type T1, T2, and T3. public static NativeArray<Entity> GetEntitiesByComponentTypes<T1, T2, T3>(this EntityManager em, EntityQueryOptions queryOption = EntityQueryOptions.Default, bool includeAll = false) Parameters em EntityManager The Unity.Entities.EntityManager instance. queryOption EntityQueryOptions The options for the entity query. includeAll bool Whether to include all entities or only those that match the specified component types. Returns NativeArray<Entity> A Unity.Collections.NativeArray<T> containing all entities that have the specified component types. Type Parameters T1 The type of the first component to query for. T2 The type of the second component to query for. T3 The type of the third component to query for. GetEntityByNetworkId(EntityManager, NetworkId) Gets all entities that have a component network ID. public static Entity GetEntityByNetworkId(this EntityManager em, NetworkId networkId) Parameters em EntityManager The Unity.Entities.EntityManager instance. networkId NetworkId The network ID to search for. Returns Entity GetEntityByNetworkId(EntityManager, ulong) Gets the entity associated with the specified unpacked network ID. public static Entity GetEntityByNetworkId(this EntityManager em, ulong unpackedNetworkId) Parameters em EntityManager The Unity.Entities.EntityManager instance. unpackedNetworkId ulong The unpacked network ID to search for. Returns Entity HasComponent<T>(EntityManager, Entity) Checks if the specified entity has a component of type T. public static bool HasComponent<T>(this EntityManager entityManager, Entity entity) Parameters entityManager EntityManager The Unity.Entities.EntityManager instance. entity Entity The entity to check. Returns bool True if the entity has the component, otherwise false. Type Parameters T The type of the component to check for."
  },
  "api/RisingV.Shared.Extensions.EnumExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | RisingV.Shared",
    "summary": "Class EnumExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for working with enums. public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetRandom<TEnum>(TEnum, Random) Gets a random value from the enum type. public static TEnum GetRandom<TEnum>(this TEnum e, Random random) where TEnum : struct, Enum Parameters e TEnum The enum instance to get a random value from. random Random The random number generator to use for selecting a random value. Returns TEnum A random value of the specified enum type. Type Parameters TEnum The type of the enum, which must be a struct and an enum."
  },
  "api/RisingV.Shared.Extensions.EnumerableExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | RisingV.Shared",
    "summary": "Class EnumerableExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for working with IEnumerable<T> collections. public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsAll<T>(IEnumerable<T>?, IEnumerable<T>?) Checks if the specified collection contains all elements from another collection. public static bool ContainsAll<T>(this IEnumerable<T>? source, IEnumerable<T>? items) Parameters source IEnumerable<T> The collection to check for containment. items IEnumerable<T> The collection of items to check for in the source collection. Returns bool True if the source collection contains all elements from the items collection; otherwise, false. Type Parameters T The type of elements in the collections. ContainsAny<T>(IEnumerable<T>?, IEnumerable<T>?) Checks if the specified collection contains any elements from another collection. public static bool ContainsAny<T>(this IEnumerable<T>? source, IEnumerable<T>? items) Parameters source IEnumerable<T> The collection to check for containment. items IEnumerable<T> The collection of items to check for in the source collection. Returns bool True if the source collection contains any elements from the items collection; otherwise, false. Type Parameters T The type of elements in the collections. IsEmpty<T>(IEnumerable<T>) Checks if the specified collection is empty (contains no elements). public static bool IsEmpty<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to check. Returns bool True if the collection contains no elements; otherwise, false. Type Parameters T The type of elements in the collection. IsNullOrEmpty<T>(IEnumerable<T>?) Checks if the specified collection is null or empty. public static bool IsNullOrEmpty<T>(this IEnumerable<T>? source) Parameters source IEnumerable<T> The collection to check. Returns bool True if the collection is null or contains no elements; otherwise, false. Type Parameters T The type of elements in the collection. PrependRange<T>(IEnumerable<T>, IEnumerable<T>) Returns a sequence whose elements are all the items in toPrepend followed by all the items in source. public static IEnumerable<T> PrependRange<T>(this IEnumerable<T> source, IEnumerable<T> toPrepend) Parameters source IEnumerable<T> toPrepend IEnumerable<T> Returns IEnumerable<T> Type Parameters T ShuffleInto<T, TTarget>(IEnumerable<T>, TTarget) Shuffles the elements of the specified collection into a target collection. public static TTarget ShuffleInto<T, TTarget>(this IEnumerable<T> source, TTarget target) where TTarget : ICollection<T> Parameters source IEnumerable<T> The collection to shuffle. target TTarget The target collection to which the shuffled elements will be added. Returns TTarget The target collection with the shuffled elements added. Type Parameters T The type of elements in the collection. TTarget The type of the target collection, which must implement ICollection<T>. ShuffleToList<T>(IEnumerable<T>) Shuffles the elements of the specified collection into a new list. public static List<T> ShuffleToList<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to shuffle. Returns List<T> A new list containing the shuffled elements. Type Parameters T The type of elements in the collection. Shuffle<T>(IEnumerable<T>) Shuffles the elements of the specified collection randomly. public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to shuffle. Returns IEnumerable<T> A new collection with the elements shuffled randomly. Type Parameters T The type of elements in the collection. ToMap<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>?) Converts the elements of the specified collection to a Map<TKey, TValue> using the specified key selector. public static Map<TKey, TSource> ToMap<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey>? keySelector = null) where TKey : notnull Parameters source IEnumerable<TSource> The collection to convert to a map. keySelector Func<TSource, TKey> Key selector function to extract the key from each element. Returns Map<TKey, TSource> A Map<TKey, TValue> containing the keys and elements from the source collection. Type Parameters TSource The type of elements in the source collection. TKey The type of keys in the resulting map. ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) Converts the elements of the specified collection to a Map<TKey, TValue> using the specified key and element selectors. public static Map<TKey, TElement> ToMap<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) where TKey : notnull Parameters source IEnumerable<TSource> The collection to convert to a map. keySelector Func<TSource, TKey> Key selector function to extract the key from each element. elementSelector Func<TSource, TElement> Element selector function to extract the value from each element. Returns Map<TKey, TElement> A Map<TKey, TValue> containing the keys and elements from the source collection. Type Parameters TSource The type of elements in the source collection. TKey The type of keys in the resulting map. TElement The type of elements in the resulting map. ToMap<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>?) Converts the elements of the specified collection to a Map<TKey, TValue> using the specified key and element selectors, public static Map<TKey, TElement> ToMap<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey>? comparer) where TKey : notnull Parameters source IEnumerable<TSource> The collection to convert to a map. keySelector Func<TSource, TKey> Key selector function to extract the key from each element. elementSelector Func<TSource, TElement> Element selector function to extract the value from each element. comparer IEqualityComparer<TKey> Optional equality comparer for the keys in the resulting map. Returns Map<TKey, TElement> A Map<TKey, TValue> containing the keys and elements from the source collection. Type Parameters TSource The type of elements in the source collection. TKey The type of keys in the resulting map. TElement The type of elements in the resulting map. ToStringBy<T>(IEnumerable<T>, Func<T, string>, string) Converts the elements of the specified collection to a string using a specified function to format each element, with a specified separator. public static string ToStringBy<T>(this IEnumerable<T> enumerable, Func<T, string> func, string separator = \", \") Parameters enumerable IEnumerable<T> The collection to convert to a string. func Func<T, string> The function to apply to each element to convert it to a string. separator string The separator to use between elements in the resulting string. Returns string A string representation of the collection, with each element formatted by the specified function and separated by the specified separator. Type Parameters T The type of elements in the collection. ToStringBy<T>(IEnumerable<T>, string) Converts the elements of the specified collection to a string, using a specified separator. public static string ToStringBy<T>(this IEnumerable<T> source, string separator = \", \") Parameters source IEnumerable<T> The collection to convert to a string. separator string The separator to use between elements in the resulting string. Returns string A string representation of the collection, with elements separated by the specified separator. Type Parameters T The type of elements in the collection."
  },
  "api/RisingV.Shared.Extensions.FloatExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.FloatExtensions.html",
    "title": "Class FloatExtensions | RisingV.Shared",
    "summary": "Class FloatExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for working with floating-point numbers and their related operations in the RisingV project. public static class FloatExtensions Inheritance object FloatExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateWorldItem(float3, PrefabGUID, int) Creates a world item at the specified position with the given PrefabGUID and amount. public static void CreateWorldItem(this float3 pos, PrefabGUID guid, int amount) Parameters pos float3 The position in the world where the item will be created. guid PrefabGUID The PrefabGUID of the prefab to create. amount int The amount of the item to create. CreateWorldItem(float3, int, int) Creates a world item at the specified position with the given GUID and amount. public static void CreateWorldItem(this float3 pos, int guid, int amount) Parameters pos float3 The position in the world where the item will be created. guid int The GUID of the prefab to create. amount int The amount of the item to create. SortEntitiesByDistance(float3, NativeArray<Entity>) Sorts an array of entities by their distance from a given position. public static NativeArray<Entity> SortEntitiesByDistance(this float3 position, NativeArray<Entity> entities) Parameters position float3 The reference position to measure distances from entities NativeArray<Entity> The array of entities to sort Returns NativeArray<Entity> The sorted array of entities"
  },
  "api/RisingV.Shared.Extensions.IntegerExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.IntegerExtensions.html",
    "title": "Class IntegerExtensions | RisingV.Shared",
    "summary": "Class IntegerExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for integer types to convert them to PrefabGUIDs and Entities. public static class IntegerExtensions Inheritance object IntegerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EntityFromGuid(int) Converts an integer to a PrefabGUID and retrieves the corresponding Entity. public static Entity EntityFromGuid(this int guid) Parameters guid int The integer value representing the GUID. Returns Entity An Entity instance corresponding to the PrefabGUID created from the integer. ToPrefabGuid(int) Converts an integer to a PrefabGUID (not validated). public static PrefabGUID ToPrefabGuid(this int guid) Parameters guid int The integer value representing the GUID. Returns PrefabGUID A PrefabGUID instance created from the integer."
  },
  "api/RisingV.Shared.Extensions.NativeCollectionsExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.NativeCollectionsExtensions.html",
    "title": "Class NativeCollectionsExtensions | RisingV.Shared",
    "summary": "Class NativeCollectionsExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for working with Unity's Native Collections. public static class NativeCollectionsExtensions Inheritance object NativeCollectionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsEmpty<T>(NativeArray<T>) Checks if a NativeArray is empty. public static bool IsEmpty<T>(this NativeArray<T> nativeArray) where T : unmanaged Parameters nativeArray NativeArray<T> The NativeArray to check. Returns bool True if the NativeArray is empty, otherwise false. Type Parameters T The type of elements in the NativeArray, must be unmanaged. IsNullOrEmpty<T>(NativeArray<T>?) Checks if a NativeArray is null or empty. public static bool IsNullOrEmpty<T>(this NativeArray<T>? nativeArray) where T : unmanaged Parameters nativeArray NativeArray<T>? The NativeArray to check. Returns bool True if the NativeArray is null or empty, otherwise false. Type Parameters T The type of elements in the NativeArray, must be unmanaged. PrintItems<T>(NativeArray<T>, Logger, LogLevel) Prints each item in a NativeArray to the specified logger at the specified log level. public static void PrintItems<T>(this NativeArray<T> array, Logger logger, LogLevel logLevel = LogLevel.Debug) where T : unmanaged Parameters array NativeArray<T> The NativeArray whose items will be printed. logger Logger The logger to which the items will be printed. logLevel LogLevel The log level at which to print the items. Type Parameters T The type of elements in the NativeArray, must be unmanaged. PrintItems<TValue>(NativeList<TValue>, Logger, LogLevel) Prints each item in a NativeList to the specified logger at the specified log level. public static void PrintItems<TValue>(this NativeList<TValue> list, Logger logger, LogLevel logLevel = LogLevel.Debug) where TValue : unmanaged Parameters list NativeList<TValue> The NativeList whose items will be printed. logger Logger The logger to which the items will be printed. logLevel LogLevel The log level at which to print the items. Type Parameters TValue The type of elements in the NativeList, must be unmanaged. PrintItems<TKey, TValue>(NativeHashMap<TKey, TValue>, Logger, LogLevel) Prints each key-value pair in a NativeHashMap to the specified logger at the specified log level. public static void PrintItems<TKey, TValue>(this NativeHashMap<TKey, TValue> map, Logger logger, LogLevel logLevel = LogLevel.Debug) where TKey : unmanaged Parameters map NativeHashMap<TKey, TValue> The NativeHashMap whose items will be printed. logger Logger The logger to which the items will be printed. logLevel LogLevel The log level at which to print the items. Type Parameters TKey The type of keys in the NativeHashMap, must be unmanaged. TValue The type of values in the NativeHashMap, must be unmanaged. ToList<T>(NativeList<T>) Converts a NativeArray to a List. public static List<T> ToList<T>(this NativeList<T> nativeList) where T : unmanaged Parameters nativeList NativeList<T> The NativeArray to convert. Returns List<T> A List containing the elements from the NativeArray. Type Parameters T The type of elements in the NativeArray, must be unmanaged. ToStringBy<T>(NativeArray<T>, Func<T, string>, string) Converts a NativeArray to a string representation using a specified function for each element. public static string ToStringBy<T>(this NativeArray<T> array, Func<T, string> func, string separator = \", \") where T : unmanaged Parameters array NativeArray<T> The NativeArray to convert. func Func<T, string> The function to apply to each element of the NativeArray to convert it to a string. separator string The separator to use between elements in the resulting string. Returns string A string representation of the NativeArray, with each element converted using the specified function and separated by the specified separator. Type Parameters T The type of elements in the NativeArray, must be unmanaged."
  },
  "api/RisingV.Shared.Extensions.NetworkIdExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.NetworkIdExtensions.html",
    "title": "Class NetworkIdExtensions | RisingV.Shared",
    "summary": "Class NetworkIdExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for packing and unpacking ProjectM.Network.NetworkId. public static class NetworkIdExtensions Inheritance object NetworkIdExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Pack(NetworkId) public static ulong Pack(this NetworkId id) Parameters id NetworkId Returns ulong Unpack(ulong) public static NetworkId Unpack(this ulong packed) Parameters packed ulong Returns NetworkId"
  },
  "api/RisingV.Shared.Extensions.PrefabGuidExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.PrefabGuidExtensions.html",
    "title": "Class PrefabGuidExtensions | RisingV.Shared",
    "summary": "Class PrefabGuidExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for Stunlock.Core.PrefabGUID to convert it to various game entities. public static class PrefabGuidExtensions Inheritance object PrefabGuidExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateWorldItem(PrefabGUID, float3, int) public static void CreateWorldItem(this PrefabGUID guid, float3 pos, int amount) Parameters guid PrefabGUID pos float3 amount int DebugName(PrefabGUID, string) public static string DebugName(this PrefabGUID prefabGuid, string prefix = \"\") Parameters prefabGuid PrefabGUID prefix string Returns string GetEntity(PrefabGUID) Gets an entity from its prefab GUID. public static Entity GetEntity(this PrefabGUID guid) Parameters guid PrefabGUID The prefab GUID to look up Returns Entity The entity associated with the GUID GetEntityUnit(PrefabGUID, EntityQueryOptions) public static Entity GetEntityUnit(this PrefabGUID prefabGuid, EntityQueryOptions options = EntityQueryOptions.IncludeDisabled) Parameters prefabGuid PrefabGUID options EntityQueryOptions Returns Entity LookupName(PrefabGUID) public static string LookupName(this PrefabGUID prefabGuid) Parameters prefabGuid PrefabGUID Returns string"
  },
  "api/RisingV.Shared.Extensions.RandomExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.RandomExtensions.html",
    "title": "Class RandomExtensions | RisingV.Shared",
    "summary": "Class RandomExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for the Random class to get random enum values. public static class RandomExtensions Inheritance object RandomExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetRandom<TEnum>(Random) public static TEnum GetRandom<TEnum>(this Random random) where TEnum : struct, Enum Parameters random Random Returns TEnum Type Parameters TEnum GetRandom<TEnum>(Random, List<TEnum>) public static TEnum GetRandom<TEnum>(this Random random, List<TEnum> values) where TEnum : struct, Enum Parameters random Random values List<TEnum> Returns TEnum Type Parameters TEnum GetRandom<TEnum>(Random, TEnum[]) public static TEnum GetRandom<TEnum>(this Random random, TEnum[] values) where TEnum : struct, Enum Parameters random Random values TEnum[] Returns TEnum Type Parameters TEnum"
  },
  "api/RisingV.Shared.Extensions.ReflectionExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | RisingV.Shared",
    "summary": "Class ReflectionExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for reflection-related operations. public static class ReflectionExtensions Inheritance object ReflectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCleanName(MethodBase) Gets a “clean” method name: If it’s a compiler-generated lambda/local function like \"<Load>b__0\", returns \"Load\" Strips any generic arity suffix (e.g. \"`2\") Otherwise just returns MethodBase.Name public static string GetCleanName(this MethodBase method) Parameters method MethodBase Returns string"
  },
  "api/RisingV.Shared.Extensions.StringExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | RisingV.Shared",
    "summary": "Class StringExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for string manipulation. public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FloatHash(string) Generates a float hash from a string. public static float FloatHash(this string str) Parameters str string The string to hash. Returns float A float hash value derived from the string. FormatWith(string, params object[]) Like string.Format, but lets you write \"{}\" instead of \"{0}\", \"{1}\", ... public static string FormatWith(this string format, params object[] args) Parameters format string args object[] Returns string IsNullOrEmpty(string?) Checks if a string is null or empty. public static bool IsNullOrEmpty(this string? str) Parameters str string The string to check. Returns bool True if the string is null or empty; otherwise, false. IsNullOrWhiteSpace(string?) Checks if a string is null or whitespace. public static bool IsNullOrWhiteSpace(this string? value) Parameters value string The string to check. Returns bool True if the string is null or consists only of whitespace characters; otherwise, false. MaybeAddSpace(string?) Adds a space to the end of the string if it is not null or empty, ensuring that the string ends with a space. public static string MaybeAddSpace(this string? str) Parameters str string The string to process. Returns string A new string with a space added at the end if it was not null or empty, otherwise an empty string. Repeat(string, uint) Repeats a string a specified number of times. public static string Repeat(this string str, uint count) Parameters str string The string to repeat. count uint The number of times to repeat the string. Returns string A new string that consists of the original string repeated the specified number of times. ToBool(string) Converts a string to a boolean. public static bool ToBool(this string str) Parameters str string The string to convert. Returns bool The boolean value represented by the string. ToFloat(string) Converts a string to a float. public static float ToFloat(this string str) Parameters str string The string to convert. Returns float The float value represented by the string. ToInt(string) Converts a string to an integer. public static int ToInt(this string str) Parameters str string The string to convert. Returns int The integer value represented by the string. UnityColorTag(string, string) Wraps text in a color tag with the specified hex color code. public static string UnityColorTag(this string text, string hex) Parameters text string The text to color hex string The hex color code (with or without # prefix) Returns string Text wrapped in a Unity rich text color tag"
  },
  "api/RisingV.Shared.Extensions.WorldExtensions.html": {
    "href": "api/RisingV.Shared.Extensions.WorldExtensions.html",
    "title": "Class WorldExtensions | RisingV.Shared",
    "summary": "Class WorldExtensions Namespace RisingV.Shared.Extensions Assembly RisingV.Shared.dll Provides extension methods for the game world. public static class WorldExtensions Inheritance object WorldExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Shared.Extensions.html": {
    "href": "api/RisingV.Shared.Extensions.html",
    "title": "Namespace RisingV.Shared.Extensions | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Extensions Classes BoundsMinMaxExtensions Provides extension methods for working with ProjectM.BoundsMinMax and tile entities. CollectionExtensions Provides extension methods for collections. DictionaryExtensions Provides extension methods for converting a dictionary to a map. DynamicBufferExtensions Extensions for Unity's DynamicBuffer to convert it to a List. EntityExtensions Helper and convenience extensions that operate on Unity DOTS Unity.Entities.Entity values in V Rising server-side code. The methods fall into three broad groups: ECS helpers – raw component/buffer read-write, existence tests, add/remove utilities. Gameplay helpers – high-level domain operations such as kill/destroy, team assignment, inventory drops, etc. Debug utilities – entity dumps, component stringification, aspect checks. EntityManagerExtensions Provides extension methods for the Unity.Entities.EntityManager class. EnumExtensions Provides extension methods for working with enums. EnumerableExtensions Provides extension methods for working with IEnumerable<T> collections. FloatExtensions Provides extension methods for working with floating-point numbers and their related operations in the RisingV project. IntegerExtensions Provides extension methods for integer types to convert them to PrefabGUIDs and Entities. NativeCollectionsExtensions Provides extension methods for working with Unity's Native Collections. NetworkIdExtensions Provides extension methods for packing and unpacking ProjectM.Network.NetworkId. PrefabGuidExtensions Provides extension methods for Stunlock.Core.PrefabGUID to convert it to various game entities. RandomExtensions Provides extension methods for the Random class to get random enum values. ReflectionExtensions Provides extension methods for reflection-related operations. StringExtensions Provides extension methods for string manipulation. WorldExtensions Provides extension methods for the game world. Delegates EntityExtensions.WithRefHandler<T> Delegate signature used by With<T>(Entity, WithRefHandler<T>) and AddWith<T>(Entity, WithRefHandler<T>) to let callers mutate a value-type component by ref."
  },
  "api/RisingV.Shared.Features.FeatureConfig.html": {
    "href": "api/RisingV.Shared.Features.FeatureConfig.html",
    "title": "Class FeatureConfig | RisingV.Shared",
    "summary": "Class FeatureConfig Namespace RisingV.Shared.Features Assembly RisingV.Shared.dll Represents a feature configuration class. public class FeatureConfig : BaseConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig Implements IFeatureConfig IConfig Derived EngineConfig Inherited Members BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors FeatureConfig(string, string, string, string, string) Represents a feature configuration class. public FeatureConfig(string name, string description, string version, string author, string relativePath) Parameters name string Name of the feature. description string Description of the feature. version string Version of the feature. author string Author of the feature. relativePath string Relative path to the configuration file. Properties Author public string Author { get; init; } Property Value string Description public string Description { get; init; } Property Value string Log protected override Logger Log { get; } Property Value Logger Name public string Name { get; init; } Property Value string Version public string Version { get; init; } Property Value string Methods Deconstruct(out string, out string, out string, out string, out string?) public void Deconstruct(out string name, out string description, out string version, out string author, out string? relativePath) Parameters name string description string version string author string relativePath string"
  },
  "api/RisingV.Shared.Features.IFeature.html": {
    "href": "api/RisingV.Shared.Features.IFeature.html",
    "title": "Interface IFeature | RisingV.Shared",
    "summary": "Interface IFeature Namespace RisingV.Shared.Features Assembly RisingV.Shared.dll Represents a feature interface. public interface IFeature Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Features.IFeatureConfig.html": {
    "href": "api/RisingV.Shared.Features.IFeatureConfig.html",
    "title": "Interface IFeatureConfig | RisingV.Shared",
    "summary": "Interface IFeatureConfig Namespace RisingV.Shared.Features Assembly RisingV.Shared.dll Represents a feature configuration interface. public interface IFeatureConfig : IConfig Inherited Members IConfig.ConfigRelativePath IConfig.ConfigFileName IConfig.ConfigFile IConfig.Initialize() IConfig.Load() IConfig.Ready() IConfig.Unload() IConfig.Terminate() IConfig.Reload(ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Author string Author { get; } Property Value string Description string Description { get; } Property Value string Enabled ConfigEntry<bool>? Enabled { get; } Property Value ConfigEntry<bool> Name string Name { get; } Property Value string Version string Version { get; } Property Value string"
  },
  "api/RisingV.Shared.Features.html": {
    "href": "api/RisingV.Shared.Features.html",
    "title": "Namespace RisingV.Shared.Features | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Features Classes FeatureConfig Represents a feature configuration class. Interfaces IFeature Represents a feature interface. IFeatureConfig Represents a feature configuration interface."
  },
  "api/RisingV.Shared.Files.FileChange.html": {
    "href": "api/RisingV.Shared.Files.FileChange.html",
    "title": "Struct FileChange | RisingV.Shared",
    "summary": "Struct FileChange Namespace RisingV.Shared.Files Assembly RisingV.Shared.dll Represents a change that occurred to a file. public readonly record struct FileChange : IEquatable<FileChange> Implements IEquatable<FileChange> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors FileChange(FileChangeType, string, string?) Represents a change that occurred to a file. public FileChange(FileChangeType ChangeType, string Path, string? NewPath = null) Parameters ChangeType FileChangeType The type of change that occurred to the file. Path string The path of the file that was changed. NewPath string The new path of the file if it was renamed; otherwise, null. Properties ChangeType The type of change that occurred to the file. public FileChangeType ChangeType { get; init; } Property Value FileChangeType NewPath The new path of the file if it was renamed; otherwise, null. public string? NewPath { get; init; } Property Value string Path The path of the file that was changed. public string Path { get; init; } Property Value string"
  },
  "api/RisingV.Shared.Files.FileChangeType.html": {
    "href": "api/RisingV.Shared.Files.FileChangeType.html",
    "title": "Enum FileChangeType | RisingV.Shared",
    "summary": "Enum FileChangeType Namespace RisingV.Shared.Files Assembly RisingV.Shared.dll Represents the type of change that occurred to a file. public enum FileChangeType Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields Created = 0 Deleted = 2 Modified = 1 Renamed = 3"
  },
  "api/RisingV.Shared.Files.FileSystemObserver.html": {
    "href": "api/RisingV.Shared.Files.FileSystemObserver.html",
    "title": "Class FileSystemObserver | RisingV.Shared",
    "summary": "Class FileSystemObserver Namespace RisingV.Shared.Files Assembly RisingV.Shared.dll Thin, debounced wrapper around FileSystemWatcher. public sealed class FileSystemObserver : IDisposable Inheritance object FileSystemObserver Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors FileSystemObserver(string, string, bool, Func<string, bool>?, NotifyFilters, TimeSpan?, int) Initializes a new instance of the FileSystemObserver class. public FileSystemObserver(string rootPath, string filter = \"*\", bool includeSubDirs = true, Func<string, bool>? pathFilter = null, NotifyFilters notifyFilters = NotifyFilters.FileName | NotifyFilters.DirectoryName | NotifyFilters.LastWrite | NotifyFilters.CreationTime, TimeSpan? debounce = null, int internalBuffer = 65536) Parameters rootPath string The root path to observe. filter string The file filter to apply (default is \"*\"). includeSubDirs bool Whether to include subdirectories in the observation (default is true). pathFilter Func<string, bool> Optional filter function to apply to the paths of changes. If provided, only paths that return true will be processed. notifyFilters NotifyFilters The notify filters to apply (default includes file name, directory name, last write time, and creation time). debounce TimeSpan? The debounce time to wait before triggering the event after a change (default is 100 milliseconds). internalBuffer int The internal buffer size for the file system watcher (default is 64 kB). Exceptions DirectoryNotFoundException Thrown if the specified root path does not exist. Properties Debounce public TimeSpan Debounce { get; } Property Value TimeSpan Filter public string Filter { get; } Property Value string IncludeSubs public bool IncludeSubs { get; } Property Value bool RootPath public string RootPath { get; } Property Value string Methods Dispose() Disposes the FileSystemObserver and releases all resources. public void Dispose() Events FilesChanged public event EventHandler<FilesChangedEventArgs>? FilesChanged Event Type EventHandler<FilesChangedEventArgs>"
  },
  "api/RisingV.Shared.Files.FilesChangedEventArgs.html": {
    "href": "api/RisingV.Shared.Files.FilesChangedEventArgs.html",
    "title": "Class FilesChangedEventArgs | RisingV.Shared",
    "summary": "Class FilesChangedEventArgs Namespace RisingV.Shared.Files Assembly RisingV.Shared.dll Represents the event arguments for file changes. public sealed class FilesChangedEventArgs : EventArgs Inheritance object EventArgs FilesChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Changes Gets the list of file changes that occurred. public IReadOnlyList<FileChange> Changes { get; } Property Value IReadOnlyList<FileChange>"
  },
  "api/RisingV.Shared.Files.PollingFileObserver.html": {
    "href": "api/RisingV.Shared.Files.PollingFileObserver.html",
    "title": "Class PollingFileObserver | RisingV.Shared",
    "summary": "Class PollingFileObserver Namespace RisingV.Shared.Files Assembly RisingV.Shared.dll Periodically scans a directory tree and reports file-level changes public sealed class PollingFileObserver : IAsyncDisposable Inheritance object PollingFileObserver Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PollingFileObserver(string, TimeSpan?, bool) Initializes a new instance of the PollingFileObserver class. public PollingFileObserver(string rootPath, TimeSpan? pollInterval = null, bool includeSubdirectories = true) Parameters rootPath string The root path to observe for file changes. pollInterval TimeSpan? The interval at which to poll for changes. Defaults to 5 seconds. includeSubdirectories bool If true, includes subdirectories in the observation. Defaults to true. Exceptions DirectoryNotFoundException Thrown if the specified root path does not exist. Properties IncludeSubdirs public bool IncludeSubdirs { get; } Property Value bool PollInterval public TimeSpan PollInterval { get; } Property Value TimeSpan RootPath public string RootPath { get; } Property Value string Methods DisposeAsync() Stops the file observer and releases resources. public ValueTask DisposeAsync() Returns ValueTask Start() Starts the file observer. public void Start() Events FilesChanged Raised after each scan that detects ≥ 1 changes public event EventHandler<FilesChangedEventArgs>? FilesChanged Event Type EventHandler<FilesChangedEventArgs>"
  },
  "api/RisingV.Shared.Files.html": {
    "href": "api/RisingV.Shared.Files.html",
    "title": "Namespace RisingV.Shared.Files | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Files Classes FileSystemObserver Thin, debounced wrapper around FileSystemWatcher. FilesChangedEventArgs Represents the event arguments for file changes. PollingFileObserver Periodically scans a directory tree and reports file-level changes Structs FileChange Represents a change that occurred to a file. Enums FileChangeType Represents the type of change that occurred to a file."
  },
  "api/RisingV.Shared.FrameTimer.html": {
    "href": "api/RisingV.Shared.FrameTimer.html",
    "title": "Class FrameTimer | RisingV.Shared",
    "summary": "Class FrameTimer Namespace RisingV.Shared Assembly RisingV.Shared.dll FrameTimer is a utility class that allows you to run an action after a specified delay, with the option to repeat it a certain number of times. public class FrameTimer Inheritance object FrameTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Enabled public bool Enabled { get; } Property Value bool TimeSinceLastRun Gets the delay between calls. This will not be called more frequently than this delay, but it might be called longer if the delay is greater than the time between frames. public TimeSpan TimeSinceLastRun { get; } Property Value TimeSpan Methods Initialize(Action, Func<TimeSpan>, int) Initializes the FrameTimer with a delay generator function. public FrameTimer Initialize(Action action, Func<TimeSpan> delayGenerator, int runCount = 1) Parameters action Action The action to perform after the delay. delayGenerator Func<TimeSpan> A function that generates the delay as a TimeSpan. runCount int The number of times to run the action. A negative value will cause the action to run indefinitely. Returns FrameTimer Returns the FrameTimer instance for method chaining. Initialize(Action, TimeSpan, int) public FrameTimer Initialize(Action action, TimeSpan delay, int runCount = 1) Parameters action Action the action that is performed delay TimeSpan the delay between calls. This will not be called more frequently than this delay, but it might be called longer if the delay is greater than the time between frames runCount int the amount of times to perform the action. Negative numbers will cause the action to run infinitely Returns FrameTimer Start() Starts the FrameTimer. public void Start() Stop() Stops the FrameTimer. public void Stop()"
  },
  "api/RisingV.Shared.GameFrame.html": {
    "href": "api/RisingV.Shared.GameFrame.html",
    "title": "Class GameFrame | RisingV.Shared",
    "summary": "Class GameFrame Namespace RisingV.Shared Assembly RisingV.Shared.dll This class provides hooks for the Update and LateUpdate frame functions invoked by Unity. Original code comes from Bloodstone public class GameFrame : MonoBehaviour Inheritance object Il2CppObjectBase Object Object Component Behaviour MonoBehaviour GameFrame Inherited Members MonoBehaviour.RaiseCancellation() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.Internal_CancelInvokeAll(MonoBehaviour) MonoBehaviour.Internal_IsInvokingAll(MonoBehaviour) MonoBehaviour.InvokeDelayed(MonoBehaviour, string, float, float) MonoBehaviour.CancelInvoke(MonoBehaviour, string) MonoBehaviour.IsInvoking(MonoBehaviour, string) MonoBehaviour.IsObjectMonoBehaviour(Object) MonoBehaviour.StartCoroutineManaged(string, Object) MonoBehaviour.StartCoroutineManaged2(IEnumerator) MonoBehaviour.StopCoroutineManaged(Coroutine) MonoBehaviour.StopCoroutineFromEnumeratorManaged(IEnumerator) MonoBehaviour.GetScriptClassName() MonoBehaviour.OnCancellationTokenCreated() MonoBehaviour.m_CancellationTokenSource MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponentFastPath(Type, IntPtr) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponentsForListInternal(Type, Object) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessage(string, Object, SendMessageOptions) Component.BroadcastMessage(string, Object, SendMessageOptions) Component.GetComponent(string) Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentInParent(Type) Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentIndex() Component.SendMessageUpwards(string, Object, SendMessageOptions) Component.SendMessageUpwards(string, Object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, Object) Component.SendMessage(string) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, Object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.CompareBaseObjects(Object, Object) Object.IsNativeObjectAlive(Object) Object.GetCachedPtr() Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.CheckNullArgument(Object, string) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.GetOffsetOfInstanceIDInCPlusPlusObject() Object.Internal_CloneSingle(Object) Object.Internal_CloneSingleWithParent(Object, Transform, bool) Object.Internal_InstantiateSingle(Object, Vector3, Quaternion) Object.Internal_InstantiateSingleWithParent(Object, Transform, Vector3, Quaternion) Object.ToString(Object) Object.GetName(Object) Object.SetName(Object, string) Object.FindObjectFromInstanceID(int) Object.ForceLoadFromInstanceID(int) Object.Internal_InstantiateSingle_Injected(Object, ref Vector3, ref Quaternion) Object.Internal_InstantiateSingleWithParent_Injected(Object, Transform, ref Vector3, ref Quaternion) Object.EnsureRunningOnMainThread() Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate<T>(T, Vector3, Quaternion) Object.FindObjectsOfType(Type) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.CurrentThreadIsMainThread() Object.Internal_CloneSingleWithScene(Object, Scene) Object.IsPersistent(Object) Object.DoesObjectWithInstanceIDExist(int) Object.MarkDirty() Object.Internal_CloneSingleWithScene_Injected(Object, ref Scene) Object.m_CachedPtr Object.OffsetOfInstanceIDInCPlusPlusObject Object.objectIsNullMessage Object.cloneDestroyedMessage Object.name Object.hideFlags Object.Equals(Object, Object) Object.Finalize() Object.GetIl2CppType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.InternalGetHashCode(Object) Object.FieldGetter(string, string, ref Object) Object.FieldSetter(string, string, Object) Il2CppObjectBase.Cast<T>() Il2CppObjectBase.Unbox<T>() Il2CppObjectBase.TryCast<T>() Il2CppObjectBase.ObjectClass Il2CppObjectBase.Pointer Il2CppObjectBase.WasCollected object.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Initialize(BasePlugin) public static void Initialize(BasePlugin plugin) Parameters plugin BasePlugin Uninitialize() public static void Uninitialize() Events OnLateUpdate This event will be emitted on every LateUpdate call. The same considerations as with the OnUpdate event apply. public static event GameFrameUpdateEventHandler? OnLateUpdate Event Type GameFrameUpdateEventHandler OnUpdate This event will be emitted on every Update call. It may be more performant to inject your own MonoBehavior if you do not need to be invoked every frame. public static event GameFrameUpdateEventHandler? OnUpdate Event Type GameFrameUpdateEventHandler"
  },
  "api/RisingV.Shared.GameFrameUpdateEventHandler.html": {
    "href": "api/RisingV.Shared.GameFrameUpdateEventHandler.html",
    "title": "Delegate GameFrameUpdateEventHandler | RisingV.Shared",
    "summary": "Delegate GameFrameUpdateEventHandler Namespace RisingV.Shared Assembly RisingV.Shared.dll public delegate void GameFrameUpdateEventHandler() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Hooks.Internal.ClientBootstrapSystemHook.html": {
    "href": "api/RisingV.Shared.Hooks.Internal.ClientBootstrapSystemHook.html",
    "title": "Class ClientBootstrapSystemHook | RisingV.Shared",
    "summary": "Class ClientBootstrapSystemHook Namespace RisingV.Shared.Hooks.Internal Assembly RisingV.Shared.dll ClientBootstrapSystemHook is a Harmony patch for the ClientBootstrapSystem. public class ClientBootstrapSystemHook Inheritance object ClientBootstrapSystemHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Hooks.Internal.GameManagerHook.html": {
    "href": "api/RisingV.Shared.Hooks.Internal.GameManagerHook.html",
    "title": "Class GameManagerHook | RisingV.Shared",
    "summary": "Class GameManagerHook Namespace RisingV.Shared.Hooks.Internal Assembly RisingV.Shared.dll GameManagerHook is responsible for hooking into the game data manager's update method public static class GameManagerHook Inheritance object GameManagerHook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/RisingV.Shared.Hooks.Internal.html": {
    "href": "api/RisingV.Shared.Hooks.Internal.html",
    "title": "Namespace RisingV.Shared.Hooks.Internal | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Hooks.Internal Classes ClientBootstrapSystemHook ClientBootstrapSystemHook is a Harmony patch for the ClientBootstrapSystem. GameManagerHook GameManagerHook is responsible for hooking into the game data manager's update method"
  },
  "api/RisingV.Shared.LogTags.html": {
    "href": "api/RisingV.Shared.LogTags.html",
    "title": "Class LogTags | RisingV.Shared",
    "summary": "Class LogTags Namespace RisingV.Shared Assembly RisingV.Shared.dll Represents a collection of predefined log tags used throughout the application. public class LogTags Inheritance object LogTags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Aspects public static readonly LogTag Aspects Field Value LogTag Collections public static readonly LogTag Collections Field Value LogTag Commands public static readonly LogTag Commands Field Value LogTag Config public static readonly LogTag Config Field Value LogTag Databases public static readonly LogTag Databases Field Value LogTag Diagnostics public static readonly LogTag Diagnostics Field Value LogTag Engines public static readonly LogTag Engines Field Value LogTag EventBus public static readonly LogTag EventBus Field Value LogTag Events public static readonly LogTag Events Field Value LogTag Extensions public static readonly LogTag Extensions Field Value LogTag Features public static readonly LogTag Features Field Value LogTag FileSystem public static readonly LogTag FileSystem Field Value LogTag Hooks public static readonly LogTag Hooks Field Value LogTag Managers public static readonly LogTag Managers Field Value LogTag Plugins public static readonly LogTag Plugins Field Value LogTag Prefabs public static readonly LogTag Prefabs Field Value LogTag Processors public static readonly LogTag Processors Field Value LogTag Scripting public static readonly LogTag Scripting Field Value LogTag Services public static readonly LogTag Services Field Value LogTag Systems public static readonly LogTag Systems Field Value LogTag Transport public static readonly LogTag Transport Field Value LogTag Utils public static readonly LogTag Utils Field Value LogTag"
  },
  "api/RisingV.Shared.Logging.ILogTag.html": {
    "href": "api/RisingV.Shared.Logging.ILogTag.html",
    "title": "Interface ILogTag | RisingV.Shared",
    "summary": "Interface ILogTag Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Represents a tag for logging purposes. public interface ILogTag Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Name Gets the name of the log tag. string Name { get; } Property Value string"
  },
  "api/RisingV.Shared.Logging.ILogger.html": {
    "href": "api/RisingV.Shared.Logging.ILogger.html",
    "title": "Interface ILogger | RisingV.Shared",
    "summary": "Interface ILogger Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Represents a logger interface for logging messages at various levels. public interface ILogger Extension Methods LogNoTag.Debug(ILogger, string, params object[]) LogNoTag.DebugTrace(ILogger, string, params object[]) LogNoTag.Error(ILogger, params object[]) LogNoTag.Error(ILogger, string, Exception, params object[]) LogNoTag.Error(ILogger, string, params object[]) LogNoTag.ErrorTrace(ILogger, params object[]) LogNoTag.ErrorTrace(ILogger, string, Exception, params object[]) LogNoTag.ErrorTrace(ILogger, string, params object[]) LogNoTag.Fatal(ILogger, string, params object[]) LogNoTag.FatalTrace(ILogger, string, params object[]) LogNoTag.Fine(ILogger, string, params object[]) LogNoTag.FineTrace(ILogger, string, params object[]) LogNoTag.Info(ILogger, string, params object[]) LogNoTag.InfoTrace(ILogger, string, params object[]) LogNoTag.IsAllEnabled(ILogger) LogNoTag.IsDebugEnabled(ILogger) LogNoTag.IsErrorEnabled(ILogger) LogNoTag.IsFatalEnabled(ILogger) LogNoTag.IsFineEnabled(ILogger) LogNoTag.IsInfoEnabled(ILogger) LogNoTag.IsMessageEnabled(ILogger) LogNoTag.IsNoneEnabled(ILogger) LogNoTag.IsWarnEnabled(ILogger) LogNoTag.Message(ILogger, string, params object[]) LogNoTag.MessageTrace(ILogger, string, params object[]) LogNoTag.Warn(ILogger, string, params object[]) LogNoTag.WarnTrace(ILogger, string, params object[]) LogWithTag.Debug(ILogger, ILogTag, string, params object[]) LogWithTag.DebugTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Error(ILogger, ILogTag, Exception, params object[]) LogWithTag.Error(ILogger, ILogTag, string, Exception, params object[]) LogWithTag.Error(ILogger, ILogTag, string, params object[]) LogWithTag.ErrorTrace(ILogger, ILogTag, Exception, params object[]) LogWithTag.ErrorTrace(ILogger, ILogTag, string, Exception, params object[]) LogWithTag.ErrorTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Fatal(ILogger, ILogTag, string, params object[]) LogWithTag.FatalTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Fine(ILogger, ILogTag, string, params object[]) LogWithTag.FineTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Info(ILogger, ILogTag, string, params object[]) LogWithTag.InfoTrace(ILogger, ILogTag, string, params object[]) LogWithTag.IsAllEnabled(ILogger, ILogTag?) LogWithTag.IsDebugEnabled(ILogger, ILogTag?) LogWithTag.IsErrorEnabled(ILogger, ILogTag?) LogWithTag.IsFatalEnabled(ILogger, ILogTag?) LogWithTag.IsFineEnabled(ILogger, ILogTag?) LogWithTag.IsInfoEnabled(ILogger, ILogTag?) LogWithTag.IsMessageEnabled(ILogger, ILogTag?) LogWithTag.IsNoneEnabled(ILogger, ILogTag?) LogWithTag.IsWarnEnabled(ILogger, ILogTag?) LogWithTag.Message(ILogger, ILogTag, string, params object[]) LogWithTag.MessageTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Warn(ILogger, ILogTag, string, params object[]) LogWithTag.WarnTrace(ILogger, ILogTag, string, params object[]) EntityExtensions.IsAspect<TAspect>(object) Methods IsEnabled(LogLevel, ILogTag?) Determines whether logging is enabled for the given level / tag pair. bool IsEnabled(LogLevel logLevel, ILogTag? tag = null) Parameters logLevel LogLevel The LogLevel to test. tag ILogTag Optional tag; may be null. Returns bool IsEnabled(int, ILogTag?) Determines whether logging is enabled for a numeric log-level value and tag. bool IsEnabled(int logLevelValue, ILogTag? tag = null) Parameters logLevelValue int Numeric log level. tag ILogTag Optional tag; may be null. Returns bool Log(LogLevel, string, int, params object[]) Logs a message at the specified log level. void Log(LogLevel logLevel, string message, int methodTrace = 1, params object[] args) Parameters logLevel LogLevel The log level to use for the message. message string The message to log. methodTrace int The number of stack frames to skip when tracing the method call. Defaults to 1 (i.e., the immediate caller). args object[] Optional arguments used to format message. Log(int, string, int, params object[]) Logs a message at the specified logLevel (numeric form). void Log(int logLevel, string message, int methodTrace = 1, params object[] args) Parameters logLevel int The numeric log-level value. message string The message to log. methodTrace int The number of stack frames to skip when tracing the call site. Defaults to 1. args object[] Optional arguments used to format message."
  },
  "api/RisingV.Shared.Logging.LogLevel.html": {
    "href": "api/RisingV.Shared.Logging.LogLevel.html",
    "title": "Enum LogLevel | RisingV.Shared",
    "summary": "Enum LogLevel Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Represents the different levels of logging that can be used in the application. [Flags] public enum LogLevel Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields All = Fatal | Error | Warning | Message | Info | Debug | Fine All log levels. Debug = 32 A message that would likely only interest a developer. Error = 2 An error has occured, but can be recovered from. Fatal = 1 A fatal error has occurred, which cannot be recovered from. Fine = 64 A message that would likely only interest a developer, but is more verbose than Debug. Info = 16 A message of low importance. Message = 8 An important message that should be displayed to the user. None = 0 Warning = 4 A warning has been produced, but does not necessarily mean that something wrong has happened."
  },
  "api/RisingV.Shared.Logging.LogNoTag.html": {
    "href": "api/RisingV.Shared.Logging.LogNoTag.html",
    "title": "Class LogNoTag | RisingV.Shared",
    "summary": "Class LogNoTag Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Convenience logging helpers that do not apply a tag. public static class LogNoTag Inheritance object LogNoTag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debug(ILogger, string, params object[]) Logs a message at the specified log level. public static void Debug(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. DebugTrace(ILogger, string, params object[]) Logs a debug message with trace information (if enabled). public static void DebugTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] Error(ILogger, params object[]) Logs an error with no explicit message (message built from args). public static void Error(this ILogger logger, params object[] args) Parameters logger ILogger args object[] Error(ILogger, string, Exception, params object[]) Logs an error containing an exception’s details. public static void Error(this ILogger logger, string message, Exception exception, params object[] args) Parameters logger ILogger Logger instance. message string Custom message to prepend. exception Exception Exception to log. args object[] Format arguments. Error(ILogger, string, params object[]) Logs a message at the specified log level. public static void Error(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. ErrorTrace(ILogger, params object[]) Logs an error and appends a stack trace (if enabled). public static void ErrorTrace(this ILogger logger, params object[] args) Parameters logger ILogger args object[] ErrorTrace(ILogger, string, Exception, params object[]) Logs an error with the exception’s stack trace if enabled. public static void ErrorTrace(this ILogger logger, string message, Exception exception, params object[] args) Parameters logger ILogger message string exception Exception args object[] ErrorTrace(ILogger, string, params object[]) Logs an error message with trace data. public static void ErrorTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] Fatal(ILogger, string, params object[]) Logs a message at the specified log level. public static void Fatal(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. FatalTrace(ILogger, string, params object[]) Logs a fatal error with trace (if enabled). public static void FatalTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] Fine(ILogger, string, params object[]) Logs a message at the specified log level. public static void Fine(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. FineTrace(ILogger, string, params object[]) Logs a fine-level message with optional trace. public static void FineTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] Info(ILogger, string, params object[]) Logs a message at the specified log level. public static void Info(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. InfoTrace(ILogger, string, params object[]) Logs an informational message and, if enabled, appends a stack trace. public static void InfoTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] IsAllEnabled(ILogger) Returns true if All is enabled. public static bool IsAllEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsDebugEnabled(ILogger) Returns true if debug-level logging is enabled. public static bool IsDebugEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsErrorEnabled(ILogger) Returns true if error-level logging is enabled. public static bool IsErrorEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsFatalEnabled(ILogger) Returns true if fatal-level logging is enabled. public static bool IsFatalEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsFineEnabled(ILogger) Returns true if fine-level logging is enabled. public static bool IsFineEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsInfoEnabled(ILogger) Returns true if info-level logging is enabled. public static bool IsInfoEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsMessageEnabled(ILogger) Returns true if message-level logging is enabled. public static bool IsMessageEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsNoneEnabled(ILogger) Returns true if None is enabled (usually false). public static bool IsNoneEnabled(this ILogger logger) Parameters logger ILogger Returns bool IsWarnEnabled(ILogger) Returns true if warn-level logging is enabled. public static bool IsWarnEnabled(this ILogger logger) Parameters logger ILogger Returns bool Message(ILogger, string, params object[]) Logs a message at the specified log level. public static void Message(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. MessageTrace(ILogger, string, params object[]) Logs a general “message” level entry with optional trace. public static void MessageTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[] Warn(ILogger, string, params object[]) Logs a message at the specified log level. public static void Warn(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string The message to log. args object[] Optional arguments used to format message. WarnTrace(ILogger, string, params object[]) Logs a warning with an optional stack trace (if enabled). public static void WarnTrace(this ILogger logger, string message, params object[] args) Parameters logger ILogger message string args object[]"
  },
  "api/RisingV.Shared.Logging.LogTag.html": {
    "href": "api/RisingV.Shared.Logging.LogTag.html",
    "title": "Class LogTag | RisingV.Shared",
    "summary": "Class LogTag Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Represents a tag for logging purposes, allowing for hierarchical organization of log messages. public class LogTag : ILogTag Inheritance object LogTag Implements ILogTag Derived LogTagShared Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors LogTag(string) Initializes a new instance of the LogTag class with the specified full tag name. public LogTag(string full) Parameters full string The full tag name, which may include a space and a name separated by a dot. LogTag(string, ILogTag, string) Initializes a new instance of the LogTag class with the specified space, parent tag, and name. public LogTag(string space, ILogTag parent, string name = \"\") Parameters space string The space of the log tag, used for categorization. parent ILogTag The parent tag of this log tag, allowing for hierarchical organization. Can be null if this is a top-level tag. name string The name of the log tag. If not provided, it defaults to the parent's name if available. LogTag(string, string) Initializes a new instance of the LogTag class with the specified space and name. public LogTag(string space, string name) Parameters space string The space of the log tag, used for categorization. name string The name of the log tag. This is typically a descriptive string that identifies the tag. Properties Name Gets the name of the log tag. This is typically a descriptive string that identifies the tag. public string Name { get; } Property Value string Parent Gets the parent tag of this log tag, if any. This allows for a hierarchical structure of tags. public ILogTag? Parent { get; } Property Value ILogTag Space Gets the space of the log tag, which is a string that can be used to categorize or group log messages. public string Space { get; } Property Value string Methods Equals(LogTag) Determines whether the specified LogTag is equal to the current LogTag. protected bool Equals(LogTag other) Parameters other LogTag The LogTag to compare with the current LogTag. Returns bool True if the specified LogTag is equal to the current LogTag; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current LogTag. public override bool Equals(object? obj) Parameters obj object The object to compare with the current LogTag. Returns bool True if the specified object is equal to the current LogTag; otherwise, false. GetHashCode() Gets a hash code for the current LogTag instance. public override int GetHashCode() Returns int A hash code for the current LogTag instance. ToString() Returns a string representation of the LogTag instance. public override string ToString() Returns string A string that represents the current LogTag instance."
  },
  "api/RisingV.Shared.Logging.LogTagShared.html": {
    "href": "api/RisingV.Shared.Logging.LogTagShared.html",
    "title": "Class LogTagShared | RisingV.Shared",
    "summary": "Class LogTagShared Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Represents a log tag for shared components in the RisingV project. public class LogTagShared : LogTag, ILogTag Inheritance object LogTag LogTagShared Implements ILogTag Inherited Members LogTag.Parent LogTag.Space LogTag.Name LogTag.Equals(LogTag) LogTag.Equals(object) LogTag.GetHashCode() LogTag.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors LogTagShared(ILogTag, string) Initializes a new instance of the LogTagShared class with the specified parent tag and name. public LogTagShared(ILogTag parent, string name = \"\") Parameters parent ILogTag The parent log tag. name string The name of the log tag. LogTagShared(string) Initializes a new instance of the LogTagShared class with the specified name. public LogTagShared(string name) Parameters name string The name of the log tag."
  },
  "api/RisingV.Shared.Logging.LogWithTag.html": {
    "href": "api/RisingV.Shared.Logging.LogWithTag.html",
    "title": "Class LogWithTag | RisingV.Shared",
    "summary": "Class LogWithTag Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Convenience logging helpers that prepend a custom ILogTag to every message. public static class LogWithTag Inheritance object LogWithTag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debug(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Debug(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. DebugTrace(ILogger, ILogTag, string, params object[]) Logs a debug message with trace information (if enabled). public static void DebugTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[] Error(ILogger, ILogTag, Exception, params object[]) Logs an error encapsulating an exception. public static void Error(this ILogger logger, ILogTag tag, Exception exception, params object[] args) Parameters logger ILogger tag ILogTag exception Exception args object[] Error(ILogger, ILogTag, string, Exception, params object[]) Logs an error with a custom message and attached exception. public static void Error(this ILogger logger, ILogTag tag, string message, Exception exception, params object[] args) Parameters logger ILogger tag ILogTag message string exception Exception args object[] Error(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Error(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. ErrorTrace(ILogger, ILogTag, Exception, params object[]) Logs an error with trace information for exception. public static void ErrorTrace(this ILogger logger, ILogTag tag, Exception exception, params object[] args) Parameters logger ILogger tag ILogTag exception Exception args object[] ErrorTrace(ILogger, ILogTag, string, Exception, params object[]) Logs an error with trace data (if enabled) and attached exception. public static void ErrorTrace(this ILogger logger, ILogTag tag, string message, Exception exception, params object[] args) Parameters logger ILogger tag ILogTag message string exception Exception args object[] ErrorTrace(ILogger, ILogTag, string, params object[]) Logs an error message with trace data. public static void ErrorTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[] Fatal(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Fatal(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. FatalTrace(ILogger, ILogTag, string, params object[]) Logs a fatal error with trace (if enabled). public static void FatalTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[] Fine(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Fine(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. FineTrace(ILogger, ILogTag, string, params object[]) Logs a fine-level message with optional trace. public static void FineTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[] Info(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Info(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. InfoTrace(ILogger, ILogTag, string, params object[]) Logs an informational message and, if enabled, appends a stack trace. public static void InfoTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[] IsAllEnabled(ILogger, ILogTag?) Returns true if All is enabled for tag. public static bool IsAllEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsDebugEnabled(ILogger, ILogTag?) Returns true if debug-level logging is enabled for tag. public static bool IsDebugEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsErrorEnabled(ILogger, ILogTag?) Returns true if error-level logging is enabled for tag. public static bool IsErrorEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsFatalEnabled(ILogger, ILogTag?) Returns true if fatal-level logging is enabled for tag. public static bool IsFatalEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsFineEnabled(ILogger, ILogTag?) Returns true if fine-level logging is enabled for tag. public static bool IsFineEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsInfoEnabled(ILogger, ILogTag?) Returns true if info-level logging is enabled for tag. public static bool IsInfoEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsMessageEnabled(ILogger, ILogTag?) Returns true if message-level logging is enabled for tag. public static bool IsMessageEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsNoneEnabled(ILogger, ILogTag?) Returns true if None is enabled for tag. public static bool IsNoneEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool IsWarnEnabled(ILogger, ILogTag?) Returns true if warn-level logging is enabled for tag. public static bool IsWarnEnabled(this ILogger logger, ILogTag? tag = null) Parameters logger ILogger tag ILogTag Returns bool Message(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Message(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. MessageTrace(ILogger, ILogTag, string, params object[]) Logs a general “message” level entry with optional trace. public static void MessageTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[] Warn(ILogger, ILogTag, string, params object[]) Logs a message at the specified log level. public static void Warn(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string The message to log. args object[] Optional arguments used to format message. WarnTrace(ILogger, ILogTag, string, params object[]) Logs a warning with an optional stack trace (if enabled). public static void WarnTrace(this ILogger logger, ILogTag tag, string message, params object[] args) Parameters logger ILogger tag ILogTag message string args object[]"
  },
  "api/RisingV.Shared.Logging.Logger.html": {
    "href": "api/RisingV.Shared.Logging.Logger.html",
    "title": "Class Logger | RisingV.Shared",
    "summary": "Class Logger Namespace RisingV.Shared.Logging Assembly RisingV.Shared.dll Provides a logger implementation that integrates with BepInEx's logging system. Logs level can be adjusted setting ActiveLogLevels Logs can be filtered by log level and tags, allowing for flexible logging configurations. ActiveTags for assigning active tags to the logger. InactiveTags for assigning tags that should be suppressed in logs. private static readonly Logger logger = Logger.Create(typeof(MyPluginClass), LogTags.MyCustomTag); logger.Debug(\"This is an debug message with {} argument.\", \"example\"); logger.Info(\"This is an info message with {} argument.\", \"example\"); logger.Warn(\"This is a warning message with {} argument.\", \"example\"); logger.Error(\"This is an error message with an exception.\", ex); logger.Fatal(\"This is a fatal message with an exception.\", ex); public class Logger : ILogger Inheritance object Logger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods LogNoTag.Debug(ILogger, string, params object[]) LogNoTag.DebugTrace(ILogger, string, params object[]) LogNoTag.Error(ILogger, params object[]) LogNoTag.Error(ILogger, string, Exception, params object[]) LogNoTag.Error(ILogger, string, params object[]) LogNoTag.ErrorTrace(ILogger, params object[]) LogNoTag.ErrorTrace(ILogger, string, Exception, params object[]) LogNoTag.ErrorTrace(ILogger, string, params object[]) LogNoTag.Fatal(ILogger, string, params object[]) LogNoTag.FatalTrace(ILogger, string, params object[]) LogNoTag.Fine(ILogger, string, params object[]) LogNoTag.FineTrace(ILogger, string, params object[]) LogNoTag.Info(ILogger, string, params object[]) LogNoTag.InfoTrace(ILogger, string, params object[]) LogNoTag.IsAllEnabled(ILogger) LogNoTag.IsDebugEnabled(ILogger) LogNoTag.IsErrorEnabled(ILogger) LogNoTag.IsFatalEnabled(ILogger) LogNoTag.IsFineEnabled(ILogger) LogNoTag.IsInfoEnabled(ILogger) LogNoTag.IsMessageEnabled(ILogger) LogNoTag.IsNoneEnabled(ILogger) LogNoTag.IsWarnEnabled(ILogger) LogNoTag.Message(ILogger, string, params object[]) LogNoTag.MessageTrace(ILogger, string, params object[]) LogNoTag.Warn(ILogger, string, params object[]) LogNoTag.WarnTrace(ILogger, string, params object[]) LogWithTag.Debug(ILogger, ILogTag, string, params object[]) LogWithTag.DebugTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Error(ILogger, ILogTag, Exception, params object[]) LogWithTag.Error(ILogger, ILogTag, string, Exception, params object[]) LogWithTag.Error(ILogger, ILogTag, string, params object[]) LogWithTag.ErrorTrace(ILogger, ILogTag, Exception, params object[]) LogWithTag.ErrorTrace(ILogger, ILogTag, string, Exception, params object[]) LogWithTag.ErrorTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Fatal(ILogger, ILogTag, string, params object[]) LogWithTag.FatalTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Fine(ILogger, ILogTag, string, params object[]) LogWithTag.FineTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Info(ILogger, ILogTag, string, params object[]) LogWithTag.InfoTrace(ILogger, ILogTag, string, params object[]) LogWithTag.IsAllEnabled(ILogger, ILogTag?) LogWithTag.IsDebugEnabled(ILogger, ILogTag?) LogWithTag.IsErrorEnabled(ILogger, ILogTag?) LogWithTag.IsFatalEnabled(ILogger, ILogTag?) LogWithTag.IsFineEnabled(ILogger, ILogTag?) LogWithTag.IsInfoEnabled(ILogger, ILogTag?) LogWithTag.IsMessageEnabled(ILogger, ILogTag?) LogWithTag.IsNoneEnabled(ILogger, ILogTag?) LogWithTag.IsWarnEnabled(ILogger, ILogTag?) LogWithTag.Message(ILogger, ILogTag, string, params object[]) LogWithTag.MessageTrace(ILogger, ILogTag, string, params object[]) LogWithTag.Warn(ILogger, ILogTag, string, params object[]) LogWithTag.WarnTrace(ILogger, ILogTag, string, params object[]) EntityExtensions.IsAspect<TAspect>(object) Constructors Logger(ManualLogSource, string, params ILogTag[]) Provides a logger implementation that integrates with BepInEx's logging system. Logs level can be adjusted setting ActiveLogLevels Logs can be filtered by log level and tags, allowing for flexible logging configurations. ActiveTags for assigning active tags to the logger. InactiveTags for assigning tags that should be suppressed in logs. private static readonly Logger logger = Logger.Create(typeof(MyPluginClass), LogTags.MyCustomTag); logger.Debug(\"This is an debug message with {} argument.\", \"example\"); logger.Info(\"This is an info message with {} argument.\", \"example\"); logger.Warn(\"This is a warning message with {} argument.\", \"example\"); logger.Error(\"This is an error message with an exception.\", ex); logger.Fatal(\"This is a fatal message with an exception.\", ex); public Logger(ManualLogSource logger, string pluginName, params ILogTag[] requiredTags) Parameters logger ManualLogSource The BepInEx logging source to use. pluginName string The name of the plugin for which this logger is created. requiredTags ILogTag[] Optional tags that this logger requires to be active. Properties ActiveLogLevels Our global logging defined listened log levels. public static LogLevel ActiveLogLevels { get; } Property Value LogLevel ActiveTags Gets the active tags for this logger. public static LogTag[] ActiveTags { get; } Property Value LogTag[] InactiveTags Gets the inactive (suppressed) tags for this logger. public static LogTag[] InactiveTags { get; } Property Value LogTag[] PluginName Plugin name for which this logger is created. public string PluginName { get; } Property Value string Methods Create(string, params ILogTag[]) Creates a new logger instance with the specified logging name and optional auto tags. public static Logger Create(string loggingName, params ILogTag[] requiredTags) Parameters loggingName string The name of the logging source. requiredTags ILogTag[] Optional required tags that this logger should include. Returns Logger A new instance of the Logger class. Create(Type, params ILogTag[]) Creates a new logger instance for the specified type, automatically determining the plugin name public static Logger Create(Type loggingType, params ILogTag[] requiredTags) Parameters loggingType Type The type for which the logger is being created. This type should be part of the plugin assembly. requiredTags ILogTag[] Optional tags that this logger should automatically include. Returns Logger A new instance of the Logger class. Create<T>(params ILogTag[]) Creates a new logger instance for the specified type, automatically determining the plugin name public static Logger Create<T>(params ILogTag[] requiredTags) Parameters requiredTags ILogTag[] Optional tags that this logger should automatically include. Returns Logger Type Parameters T The type for which the logger is being created. This type should be part of the plugin assembly. Enable(bool) Sets whether this logger is enabled or disabled. public void Enable(bool enable) Parameters enable bool If true, enables the logger; otherwise, disables it. FindCallerStackFrame(StackTrace, int) Finds the caller stack frame in the current stack trace, skipping a specified number of frames. protected static StackFrame? FindCallerStackFrame(StackTrace stackTrace, int skipFrames) Parameters stackTrace StackTrace The stack trace to search for the caller frame. skipFrames int The number of frames to skip before looking for the caller frame. Default is 2. Returns StackFrame The first stack frame that is not part of the Logger or ILogger, or the default frame if none is found. GetBepLogLevel(int) Get the BepInEx log level from an integer value. protected static LogLevel GetBepLogLevel(int logLevelValue) Parameters logLevelValue int The integer value representing the log level. Returns LogLevel The corresponding BepInEx log level. IsEnabled(int, ILogTag?) Checks if the logger is enabled for the specified log level and category. public bool IsEnabled(int logLevelValue, ILogTag? category = null) Parameters logLevelValue int The integer value representing the log level to check. category ILogTag The optional log tag category to check against the active and inactive tags. Returns bool True if the logger is enabled for the specified log level and category; otherwise, false. Log(LogLevel, string, int, params object[]) Logs a message with the specified log level, message, and optional arguments. public void Log(LogLevel logLevel, string message, int methodTrace = 3, params object[] args) Parameters logLevel LogLevel The log level to use for the message. message string The message to log, which can include format placeholders. methodTrace int The number of stack frames to skip when finding the caller method. Default is 3. args object[] Optional arguments to format the message with. If an argument is an exception, its message and stack trace will be included. Log(int, string, int, params object[]) Logs a message with the specified log level value, message, and optional arguments. public void Log(int logLevelValue, string message, int methodTrace = 2, params object[] args) Parameters logLevelValue int The integer value representing the log level. message string The message to log, which can include format placeholders. methodTrace int The number of stack frames to skip when finding the caller method. Default is 2. args object[] Optional arguments to format the message with. If an argument is an exception, its message and stack trace will be included."
  },
  "api/RisingV.Shared.Logging.html": {
    "href": "api/RisingV.Shared.Logging.html",
    "title": "Namespace RisingV.Shared.Logging | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Logging Classes LogNoTag Convenience logging helpers that do not apply a tag. LogTag Represents a tag for logging purposes, allowing for hierarchical organization of log messages. LogTagShared Represents a log tag for shared components in the RisingV project. LogWithTag Convenience logging helpers that prepend a custom ILogTag to every message. Logger Provides a logger implementation that integrates with BepInEx's logging system. Logs level can be adjusted setting ActiveLogLevels Logs can be filtered by log level and tags, allowing for flexible logging configurations. ActiveTags for assigning active tags to the logger. InactiveTags for assigning tags that should be suppressed in logs. private static readonly Logger logger = Logger.Create(typeof(MyPluginClass), LogTags.MyCustomTag); logger.Debug(\"This is an debug message with {} argument.\", \"example\"); logger.Info(\"This is an info message with {} argument.\", \"example\"); logger.Warn(\"This is a warning message with {} argument.\", \"example\"); logger.Error(\"This is an error message with an exception.\", ex); logger.Fatal(\"This is a fatal message with an exception.\", ex); Interfaces ILogTag Represents a tag for logging purposes. ILogger Represents a logger interface for logging messages at various levels. Enums LogLevel Represents the different levels of logging that can be used in the application."
  },
  "api/RisingV.Shared.Managers.IEnableable.html": {
    "href": "api/RisingV.Shared.Managers.IEnableable.html",
    "title": "Interface IEnableable | RisingV.Shared",
    "summary": "Interface IEnableable Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll public interface IEnableable Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Enabled bool Enabled { get; } Property Value bool"
  },
  "api/RisingV.Shared.Managers.IManageable-1.html": {
    "href": "api/RisingV.Shared.Managers.IManageable-1.html",
    "title": "Interface IManageable<T> | RisingV.Shared",
    "summary": "Interface IManageable<T> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents an interface for manageable components that are associated with a specific type of manager. public interface IManageable<in T> : IManageable where T : class, IManager Type Parameters T Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Managers.IManageable.html": {
    "href": "api/RisingV.Shared.Managers.IManageable.html",
    "title": "Interface IManageable | RisingV.Shared",
    "summary": "Interface IManageable Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents an interface for manageable components within the system. public interface IManageable Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Managers.IManageableLifecycle-1.html": {
    "href": "api/RisingV.Shared.Managers.IManageableLifecycle-1.html",
    "title": "Interface IManageableLifecycle<T> | RisingV.Shared",
    "summary": "Interface IManageableLifecycle<T> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents an interface for manageable components that have a lifecycle and are associated with a specific type of manager. public interface IManageableLifecycle<in T> : IManageableLifecycle, IReloadable, IManageable<T>, IManageable where T : class, IManager Type Parameters T The type of manager this manageable component is associated with. Inherited Members IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Initialize(T, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. void Initialize(T manager, List<IPlugin> plugins) Parameters manager T plugins List<IPlugin> Load(T, List<IPlugin>) Loads the manager and its dependencies with a specific type. void Load(T manager, List<IPlugin> plugins) Parameters manager T plugins List<IPlugin> OnReload(T, List<IPlugin>, ReloadReason) Called when the manager is reloaded with a specific type. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. bool OnReload(T manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager T plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop Ready(T, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. void Ready(T manager, List<IPlugin> plugins) Parameters manager T plugins List<IPlugin> Reload(T, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. void Reload(T manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager T plugins List<IPlugin> reason ReloadReason Terminate(T, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. void Terminate(T manager, List<IPlugin> plugins) Parameters manager T plugins List<IPlugin> Unload(T, List<IPlugin>) Unloads the manager and its dependencies with a specific type. void Unload(T manager, List<IPlugin> plugins) Parameters manager T plugins List<IPlugin>"
  },
  "api/RisingV.Shared.Managers.IManageableLifecycle.html": {
    "href": "api/RisingV.Shared.Managers.IManageableLifecycle.html",
    "title": "Interface IManageableLifecycle | RisingV.Shared",
    "summary": "Interface IManageableLifecycle Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents an interface for manageable components that have a lifecycle. public interface IManageableLifecycle : IManageable, IReloadable Inherited Members IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Initialize(IManager) Initializes the lifecycle of the manager. void Initialize(IManager manager) Parameters manager IManager Initialize(IManager, List<IPlugin>) void Initialize(IManager manager, List<IPlugin> plugins) Parameters manager IManager plugins List<IPlugin> Load(IManager) Loads the manager and its dependencies. void Load(IManager manager) Parameters manager IManager Load(IManager, List<IPlugin>) void Load(IManager manager, List<IPlugin> plugins) Parameters manager IManager plugins List<IPlugin> Ready(IManager) Prepares the manager for use, typically after loading. void Ready(IManager manager) Parameters manager IManager Ready(IManager, List<IPlugin>) void Ready(IManager manager, List<IPlugin> plugins) Parameters manager IManager plugins List<IPlugin> Terminate(IManager) Terminates the manager and cleans up resources. void Terminate(IManager manager) Parameters manager IManager Terminate(IManager, List<IPlugin>) void Terminate(IManager manager, List<IPlugin> plugins) Parameters manager IManager plugins List<IPlugin> Unload(IManager) Unloads the manager and its dependencies. void Unload(IManager manager) Parameters manager IManager Unload(IManager, List<IPlugin>) void Unload(IManager manager, List<IPlugin> plugins) Parameters manager IManager plugins List<IPlugin>"
  },
  "api/RisingV.Shared.Managers.IManager-2.html": {
    "href": "api/RisingV.Shared.Managers.IManager-2.html",
    "title": "Interface IManager<T, TM> | RisingV.Shared",
    "summary": "Interface IManager<T, TM> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Interface for a manager that handles manageable objects of a specific type. public interface IManager<T, TM> : IManager, IManageable where T : class, IManageable<TM> where TM : class, IManager Type Parameters T The type of manageable objects this manager handles. TM The type of manager that this manageable object is associated with. Inherited Members IManager.UnsubscribeEventsOnRemoval IManager.IsInitialized IManager.IsLoaded IManager.IsReady IManager.Initialize(IPlugin) IManager.Load(IPlugin) IManager.Ready(IPlugin) IManager.Unload(IPlugin) IManager.Terminate(IPlugin) IManager.Reload(IPlugin, ReloadReason) IManager.OnReload(IPlugin, ReloadReason) IManager.TryInitialize(IManageable, IPlugin) IManager.TryLoad(IManageable, IPlugin) IManager.TryUnload(IManageable, IPlugin) IManager.TryTerminate(IManageable, IPlugin) IManager.TryReload(IManageable, IPlugin, ReloadReason) IManager.GetDependentPlugins(Type, params IPlugin[]) IManager.AssignDependentPlugins(Type, List<IPlugin>) IManager.GetManagedInfo() IManager.Count() IManager.Has(Type, bool, bool) IManager.Has(string, bool, bool) IManager.Add<TX>(IPlugin, Type, bool) IManager.RequiredType() IManager.RequiredTypeName() IManager.IsEnabled(IManageable) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Add<TX>(IPlugin, bool) Add a manageable object of the given type to the manager. TX? Add<TX>(IPlugin plugin, bool failIfExists = true) where TX : T Parameters plugin IPlugin failIfExists bool Returns TX Type Parameters TX Add<TX>(IPlugin, TX, bool) Add a manageable object of the given type to the manager. void Add<TX>(IPlugin plugin, TX obj, bool failIfExists = true) where TX : T Parameters plugin IPlugin obj TX failIfExists bool Type Parameters TX ForEach(Action<T>) Execute an action for each manageable object in the manager. void ForEach(Action<T> action) Parameters action Action<T> The action to execute for each manageable object. GetDependentPlugins<TX>(params IPlugin[]?) Get a list of plugins that depend on the given type. List<IPlugin> GetDependentPlugins<TX>(params IPlugin[]? additionalPlugins) where TX : T Parameters additionalPlugins IPlugin[] Returns List<IPlugin> Type Parameters TX GetList() Get a manageable object of the given type from the manager. List<T> GetList() Returns List<T> GetOrCreate<TX>(IPlugin) Get a manageable object of the given type from the manager. TX GetOrCreate<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Returns TX Type Parameters TX Get<TX>(bool) Get a manageable object of the given type from the manager. TX? Get<TX>(bool required = true) where TX : T Parameters required bool Returns TX Type Parameters TX Has<TX>(bool) Check if the manager has a manageable object of the given type. bool Has<TX>(bool checkEnabled = true) where TX : T Parameters checkEnabled bool Returns bool Type Parameters TX IsEnabled<TX>(TX?) Is the manageable object enabled. bool IsEnabled<TX>(TX? manageable) where TX : T Parameters manageable TX Returns bool Type Parameters TX Remove<TX>(IPlugin) Remove a manageable object of the given type from the manager. void Remove<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Type Parameters TX Remove<TX>(IPlugin, TX) Remove a manageable object of the given type from the manager. void Remove<TX>(IPlugin plugin, TX obj) where TX : T Parameters plugin IPlugin obj TX Type Parameters TX Select(Func<KeyValuePair<Type, T>, T>) Select manageable objects using a selector function. IEnumerable<T> Select(Func<KeyValuePair<Type, T>, T> selector) Parameters selector Func<KeyValuePair<Type, T>, T> The function to select manageable objects. Returns IEnumerable<T>"
  },
  "api/RisingV.Shared.Managers.IManager.html": {
    "href": "api/RisingV.Shared.Managers.IManager.html",
    "title": "Interface IManager | RisingV.Shared",
    "summary": "Interface IManager Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Interface for a manager that handles manageable objects. public interface IManager : IManageable Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties IsInitialized Indicates whether the manager is initialized. bool IsInitialized { get; } Property Value bool IsLoaded Indicates whether the manager is finished loading. bool IsLoaded { get; } Property Value bool IsReady Indicates whether the manager is ready to be used. bool IsReady { get; } Property Value bool UnsubscribeEventsOnRemoval Indicates whether the manager should unsubscribe from events when manageable objects are removed. bool UnsubscribeEventsOnRemoval { get; } Property Value bool Methods Add<TX>(IPlugin, Type, bool) Get a manageable object of the given type. void Add<TX>(IPlugin plugin, Type type, bool failIfExists = true) where TX : IManageable Parameters plugin IPlugin The plugin that is requesting the manageable object. type Type The type of the manageable object to get. failIfExists bool If true, will throw an exception if the manageable object already exists. Type Parameters TX Type of the manageable object to get, must implement IManageable. AssignDependentPlugins(Type, List<IPlugin>) Assign a list of dependent plugins to the given type. void AssignDependentPlugins(Type type, List<IPlugin> dependentPlugins) Parameters type Type dependentPlugins List<IPlugin> Count() Count the number of manageable objects that are managed by this manager. int Count() Returns int GetDependentPlugins(Type, params IPlugin[]?) Get a list of plugins that depend on the given type. List<IPlugin> GetDependentPlugins(Type type, params IPlugin[]? additionalPlugins) Parameters type Type additionalPlugins IPlugin[] Returns List<IPlugin> GetManagedInfo() Get a formatted string of all manageable objects that are managed by this manager. string GetManagedInfo() Returns string Has(string, bool, bool) Check if the manager has a manageable object of the given type by its name. bool Has(string typeName, bool checkAssignable = true, bool checkEnabled = true) Parameters typeName string checkAssignable bool checkEnabled bool Returns bool Has(Type, bool, bool) Check if the manager has a manageable object of the given type. bool Has(Type type, bool checkAssignable = true, bool checkEnabled = true) Parameters type Type checkAssignable bool checkEnabled bool Returns bool Initialize(IPlugin) Initialize the manager with the given plugin including its manageable objects. void Initialize(IPlugin plugin) Parameters plugin IPlugin IsEnabled(IManageable?) Check if the manageable object is enabled. bool IsEnabled(IManageable? manageable) Parameters manageable IManageable Returns bool Load(IPlugin) Load the manager with the given plugin including its manageable objects. This should be called after all other Managers have been initialized. void Load(IPlugin plugin) Parameters plugin IPlugin OnReload(IPlugin, ReloadReason) Called when a reload is requested, can be used to perform custom actions before the reload and override the default reload behavior. bool OnReload(IPlugin plugin, ReloadReason reason) Parameters plugin IPlugin reason ReloadReason Returns bool true to allow default reload behaviour, false to stop Ready(IPlugin) Ready the manager with the given plugin including its manageable objects. This should be called after all other Managers have been loaded. void Ready(IPlugin plugin) Parameters plugin IPlugin Reload(IPlugin, ReloadReason) Reload the manager with the given plugin including its manageable objects. The manageable objects should be unloaded before calling their Reload method and should then be loaded after. void Reload(IPlugin plugin, ReloadReason reason) Parameters plugin IPlugin reason ReloadReason RequiredType() Type of the object that is required. Type RequiredType() Returns Type Returns the type of the required manageable object. RequiredTypeName() Type name of the object that is required. string RequiredTypeName() Returns string Returns the name of the required manageable object type. Terminate(IPlugin) Terminate the manager with the given plugin including its manageable objects. This should be called when the plugin is being unloaded or the manager is being disposed. void Terminate(IPlugin plugin) Parameters plugin IPlugin TryInitialize(IManageable, IPlugin) Try to initialize the manageable object with the given plugin. bool TryInitialize(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryLoad(IManageable, IPlugin) Try to load the manageable object with the given plugin. bool TryLoad(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryReload(IManageable, IPlugin, ReloadReason) Try to reload the manageable object with the given plugin. bool TryReload(IManageable manageable, IPlugin plugin, ReloadReason reason) Parameters manageable IManageable plugin IPlugin reason ReloadReason Returns bool TryTerminate(IManageable, IPlugin) Try to unload the manageable object with the given plugin. bool TryTerminate(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryUnload(IManageable, IPlugin) Try to ready the manageable object with the given plugin. bool TryUnload(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool Unload(IPlugin) Unload the manager with the given plugin including its manageable objects. This should be called before the manager is terminated. void Unload(IPlugin plugin) Parameters plugin IPlugin"
  },
  "api/RisingV.Shared.Managers.IManagerSource-2.html": {
    "href": "api/RisingV.Shared.Managers.IManagerSource-2.html",
    "title": "Interface IManagerSource<T, TM> | RisingV.Shared",
    "summary": "Interface IManagerSource<T, TM> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents a source of managers that can manage instances of type T. public interface IManagerSource<T, in TM> : IManagerSource, ITypeSource<T>, ITypeSource where T : class, IManageable<in TM> where TM : class, IManager Type Parameters T Type of manageable instances. TM Type of the manager that manages instances of type T. Inherited Members IManagerSource.GetManagedInfo() ITypeSource<T>.Add<TX>(IPlugin, bool) ITypeSource<T>.Add<TX>(IPlugin, TX, bool) ITypeSource<T>.Remove<TX>(IPlugin) ITypeSource<T>.Remove<TX>(IPlugin, TX) ITypeSource<T>.Get<TX>(bool) ITypeSource<T>.Get(Type, bool) ITypeSource<T>.GetOrCreate<TX>(IPlugin) ITypeSource<T>.Has<TX>(out TX) ITypeSource<T>.ForEach(Action<T>) ITypeSource<T>.GetList() ITypeSource<T>.Select(Func<KeyValuePair<Type, T>, T>) ITypeSource<T>.RequiredType() ITypeSource<T>.RequiredTypeName() ITypeSource.Count() ITypeSource.Has(Type, out IManageable, bool) ITypeSource.Has(string, out IManageable, bool) ITypeSource.Add<TX>(IPlugin, Type, bool) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods AssignManager(TM) void AssignManager(TM manager) Parameters manager TM"
  },
  "api/RisingV.Shared.Managers.IManagerSource.html": {
    "href": "api/RisingV.Shared.Managers.IManagerSource.html",
    "title": "Interface IManagerSource | RisingV.Shared",
    "summary": "Interface IManagerSource Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents a source of managers that can be used to manage instances of type T. public interface IManagerSource : ITypeSource Inherited Members ITypeSource.Count() ITypeSource.Has(Type, out IManageable, bool) ITypeSource.Has(string, out IManageable, bool) ITypeSource.Add<TX>(IPlugin, Type, bool) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods GetManagedInfo() Get information about the managed instances. string GetManagedInfo() Returns string"
  },
  "api/RisingV.Shared.Managers.IReloadable-1.html": {
    "href": "api/RisingV.Shared.Managers.IReloadable-1.html",
    "title": "Interface IReloadable<T> | RisingV.Shared",
    "summary": "Interface IReloadable<T> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll public interface IReloadable<in T> : IReloadable where T : IManager Type Parameters T Inherited Members IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods OnReload(T, List<IPlugin>, ReloadReason) Called when the manager is reloaded with a specific type. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. bool OnReload(T manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager T plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop Reload(T, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. void Reload(T manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager T plugins List<IPlugin> reason ReloadReason"
  },
  "api/RisingV.Shared.Managers.IReloadable.html": {
    "href": "api/RisingV.Shared.Managers.IReloadable.html",
    "title": "Interface IReloadable | RisingV.Shared",
    "summary": "Interface IReloadable Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll public interface IReloadable Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods OnReload(IManager, List<IPlugin>, ReloadReason) Called when the manager is reloaded. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. bool OnReload(IManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager IManager plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop Reload(IManager, ReloadReason) Reloads the manager and its dependencies. void Reload(IManager manager, ReloadReason reason) Parameters manager IManager reason ReloadReason Reload(IManager, List<IPlugin>, ReloadReason) void Reload(IManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager IManager plugins List<IPlugin> reason ReloadReason"
  },
  "api/RisingV.Shared.Managers.ITypeSource-1.html": {
    "href": "api/RisingV.Shared.Managers.ITypeSource-1.html",
    "title": "Interface ITypeSource<T> | RisingV.Shared",
    "summary": "Interface ITypeSource<T> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Interface for a type source that manages objects of a specific type T. public interface ITypeSource<T> : ITypeSource where T : class Type Parameters T Inherited Members ITypeSource.Count() ITypeSource.Has(Type, out IManageable, bool) ITypeSource.Has(string, out IManageable, bool) ITypeSource.Add<TX>(IPlugin, Type, bool) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Add<TX>(IPlugin, bool) Add an object to the source of the type TX. TX? Add<TX>(IPlugin plugin, bool failIfExists = true) where TX : T Parameters plugin IPlugin failIfExists bool Returns TX Type Parameters TX Add<TX>(IPlugin, TX, bool) Add an object to the source. void Add<TX>(IPlugin plugin, TX obj, bool failIfExists = true) where TX : T Parameters plugin IPlugin obj TX failIfExists bool Type Parameters TX ForEach(Action<T>) Get an object from the source. void ForEach(Action<T> action) Parameters action Action<T> Get(Type, bool) Get an object from the source. T? Get(Type type, bool required = true) Parameters type Type required bool Returns T GetList() Get all objects from the source. List<T> GetList() Returns List<T> GetOrCreate<TX>(IPlugin) Get an object from the source or create and add if not. TX GetOrCreate<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Returns TX Type Parameters TX Get<TX>(bool) Get an object from the source. TX? Get<TX>(bool required = true) where TX : T Parameters required bool Returns TX Type Parameters TX Has<TX>(out TX?) Do we have an object of the type TX in the source. bool Has<TX>(out TX? manageable) where TX : T Parameters manageable TX Returns bool Type Parameters TX Remove<TX>(IPlugin) Remove an object from the source. void Remove<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Type Parameters TX Remove<TX>(IPlugin, TX) Remove an object from the source. void Remove<TX>(IPlugin plugin, TX obj) where TX : T Parameters plugin IPlugin obj TX Type Parameters TX RequiredType() Get the type of the object that is required. Type RequiredType() Returns Type RequiredTypeName() Get the name of the type that is required. string RequiredTypeName() Returns string Select(Func<KeyValuePair<Type, T>, T>) Select an enumerable of objects from the source. IEnumerable<T> Select(Func<KeyValuePair<Type, T>, T> selector) Parameters selector Func<KeyValuePair<Type, T>, T> Returns IEnumerable<T>"
  },
  "api/RisingV.Shared.Managers.ITypeSource.html": {
    "href": "api/RisingV.Shared.Managers.ITypeSource.html",
    "title": "Interface ITypeSource | RisingV.Shared",
    "summary": "Interface ITypeSource Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Interface for a type source that manages objects of a specific type. public interface ITypeSource Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Add<TX>(IPlugin, Type, bool) Get an object from the source. TX Add<TX>(IPlugin plugin, Type type, bool failIfExists = true) where TX : IManageable Parameters plugin IPlugin type Type failIfExists bool Returns TX Type Parameters TX Count() Get the count of objects in the source. int Count() Returns int Has(string, out IManageable?, bool) Do we have a manageable of a type name. bool Has(string typeName, out IManageable? manageable, bool checkAssignable = true) Parameters typeName string manageable IManageable checkAssignable bool Returns bool Has(Type, out IManageable?, bool) Do we have an object of the type TX in the source. bool Has(Type type, out IManageable? manageable, bool checkAssignable = true) Parameters type Type manageable IManageable checkAssignable bool Returns bool"
  },
  "api/RisingV.Shared.Managers.ManagerBase-2.html": {
    "href": "api/RisingV.Shared.Managers.ManagerBase-2.html",
    "title": "Class ManagerBase<T, TM> | RisingV.Shared",
    "summary": "Class ManagerBase<T, TM> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Base class for managers that handle manageable objects. public abstract class ManagerBase<T, TM> : IManager<T, TM>, IManager, IManageable where T : class, IManageable<TM> where TM : class, IManager Type Parameters T The type of manageable objects this manager handles, must implement IManageable<T>. TM The type of manager interface this manager implements, must implement IManager. Inheritance object ManagerBase<T, TM> Implements IManager<T, TM> IManager IManageable Derived TypeMapManager<T, TM> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ManagerBase(IManagerSource<T, TM>) protected ManagerBase(IManagerSource<T, TM> source) Parameters source IManagerSource<T, TM> Fields InitializedMap protected readonly Map<Type, bool> InitializedMap Field Value Map<Type, bool> LoadedMap protected readonly Map<Type, bool> LoadedMap Field Value Map<Type, bool> PluginsMap protected readonly Map<Type, List<IPlugin>> PluginsMap Field Value Map<Type, List<IPlugin>> ReadyMap protected readonly Map<Type, bool> ReadyMap Field Value Map<Type, bool> ReloadingMap protected readonly Map<string, bool> ReloadingMap Field Value Map<string, bool> Properties AllowAutoReload Indicates whether this manager allows auto-reloading of manageable objects. public virtual bool AllowAutoReload { get; } Property Value bool IsFullReloading public bool IsFullReloading { get; protected set; } Property Value bool IsInitialized Indicates whether the manager is initialized. public bool IsInitialized { get; protected set; } Property Value bool IsLoaded Indicates whether the manager is finished loading. public bool IsLoaded { get; protected set; } Property Value bool IsReady Indicates whether the manager is ready to be used. public bool IsReady { get; protected set; } Property Value bool Log protected abstract Logger Log { get; } Property Value Logger UnsubscribeEventsOnRemoval Indicates whether this manager should unsubscribe from events when manageable objects are removed. public bool UnsubscribeEventsOnRemoval { get; set; } Property Value bool Methods Add<TX>(IPlugin, bool) Add a manageable object of the given type to the manager. public TX? Add<TX>(IPlugin plugin, bool failIfExists = true) where TX : T Parameters plugin IPlugin failIfExists bool Returns TX Type Parameters TX Add<TX>(IPlugin, Type, bool) Get a manageable object of the given type. public virtual void Add<TX>(IPlugin plugin, Type type, bool failIfExists = true) where TX : IManageable Parameters plugin IPlugin The plugin that is requesting the manageable object. type Type The type of the manageable object to get. failIfExists bool If true, will throw an exception if the manageable object already exists. Type Parameters TX Type of the manageable object to get, must implement IManageable. Add<TX>(IPlugin, TX, bool) Add a manageable object of the given type to the manager. public virtual void Add<TX>(IPlugin plugin, TX manageable, bool failIfExists = true) where TX : T Parameters plugin IPlugin manageable TX failIfExists bool Type Parameters TX AssignDependentPlugins(Type, List<IPlugin>) Assign a list of dependent plugins to the given type. public void AssignDependentPlugins(Type type, List<IPlugin> dependentPlugins) Parameters type Type dependentPlugins List<IPlugin> AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) Automatically reloads manageable objects based on file changes. protected virtual void AutoReload(IReadOnlyList<FileChange> fileChanges, IPlugin plugin, bool force = false) Parameters fileChanges IReadOnlyList<FileChange> List of file changes that triggered the reload. plugin IPlugin The plugin that is reloading the manageable objects. force bool If true, forces the reload regardless of the file changes. CanAutoReloadAll(IReadOnlyList<FileChange>) protected virtual bool CanAutoReloadAll(IReadOnlyList<FileChange> fileChanges) Parameters fileChanges IReadOnlyList<FileChange> Returns bool Count() Count the number of manageable objects that are managed by this manager. public int Count() Returns int DebugPrintAll(string) Prints all manageable objects in this manager to the debug log with an optional prefix message. public virtual void DebugPrintAll(string prefixMessage = \"\") Parameters prefixMessage string An optional prefix message to include in the debug log. Equals(ManagerBase<T, TM>) protected bool Equals(ManagerBase<T, TM> other) Parameters other ManagerBase<T, TM> Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. ForEach(Action<T>) Execute an action for each manageable object in the manager. public void ForEach(Action<T> action) Parameters action Action<T> The action to execute for each manageable object. Get(Type, bool) public T? Get(Type type, bool required = true) Parameters type Type required bool Returns T GetDependentPlugins(params IPlugin[]?) public List<IPlugin> GetDependentPlugins(params IPlugin[]? additionalPlugins) Parameters additionalPlugins IPlugin[] Returns List<IPlugin> GetDependentPlugins(Type, params IPlugin[]?) Get a list of plugins that depend on the given type. public List<IPlugin> GetDependentPlugins(Type type, params IPlugin[]? additionalPlugins) Parameters type Type additionalPlugins IPlugin[] Returns List<IPlugin> GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetList() Get a manageable object of the given type from the manager. public List<T> GetList() Returns List<T> GetManagedInfo() Get a formatted string of all manageable objects that are managed by this manager. public string GetManagedInfo() Returns string GetOrCreate<TX>(IPlugin) Get a manageable object of the given type from the manager. public TX GetOrCreate<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Returns TX Type Parameters TX Get<TX>(bool) Get a manageable object of the given type from the manager. public TX? Get<TX>(bool required = true) where TX : T Parameters required bool Returns TX Type Parameters TX Has(string, bool, bool) Check if the manager has a manageable object of the given type by its name. public bool Has(string typeName, bool checkAssignable = true, bool checkEnabled = false) Parameters typeName string checkAssignable bool checkEnabled bool Returns bool Has(Type, bool, bool) Check if the manager has a manageable object of the given type. public bool Has(Type type, bool checkAssignable = true, bool checkEnabled = false) Parameters type Type checkAssignable bool checkEnabled bool Returns bool Has<TX>(bool) Check if the manager has a manageable object of the given type. public bool Has<TX>(bool checkEnabled = false) where TX : T Parameters checkEnabled bool Returns bool Type Parameters TX Initialize(IPlugin) Initialize the manager with the given plugin including its manageable objects. public virtual void Initialize(IPlugin plugin) Parameters plugin IPlugin IsEnabled(IManageable?) Check if the manageable object is enabled. public virtual bool IsEnabled(IManageable? manageable) Parameters manageable IManageable Returns bool IsEnabled<TX>(TX?) Is the manageable object enabled. public virtual bool IsEnabled<TX>(TX? manageable) where TX : T Parameters manageable TX Returns bool Type Parameters TX Load(IPlugin) Load the manager with the given plugin including its manageable objects. This should be called after all other Managers have been initialized. public virtual void Load(IPlugin plugin) Parameters plugin IPlugin OnManageableAdded<TX>(IPlugin, T?, bool) protected virtual void OnManageableAdded<TX>(IPlugin plugin, T? manageable, bool failIfExists) where TX : T Parameters plugin IPlugin manageable T failIfExists bool Type Parameters TX OnManageableRemoved<TX>(IPlugin, T?) protected virtual void OnManageableRemoved<TX>(IPlugin plugin, T? manageable) where TX : T Parameters plugin IPlugin manageable T Type Parameters TX OnReload(IPlugin, ReloadReason) Called when a reload is requested, can be used to perform custom actions before the reload and override the default reload behavior. public virtual bool OnReload(IPlugin plugin, ReloadReason reason) Parameters plugin IPlugin reason ReloadReason Returns bool true to allow default reload behaviour, false to stop Ready(IPlugin) Ready the manager with the given plugin including its manageable objects. This should be called after all other Managers have been loaded. public virtual void Ready(IPlugin plugin) Parameters plugin IPlugin Reload(ReloadReason) public virtual void Reload(ReloadReason reason) Parameters reason ReloadReason Reload(IPlugin, ReloadReason) Reload the manager with the given plugin including its manageable objects. The manageable objects should be unloaded before calling their Reload method and should then be loaded after. public virtual void Reload(IPlugin plugin, ReloadReason reason) Parameters plugin IPlugin reason ReloadReason Remove<TX>(IPlugin) Remove a manageable object of the given type from the manager. public void Remove<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Type Parameters TX Remove<TX>(IPlugin, TX) Remove a manageable object of the given type from the manager. public void Remove<TX>(IPlugin plugin, TX obj) where TX : T Parameters plugin IPlugin obj TX Type Parameters TX RequiredType() Type of the object that is required. public Type RequiredType() Returns Type Returns the type of the required manageable object. RequiredTypeName() Type name of the object that is required. public string RequiredTypeName() Returns string Returns the name of the required manageable object type. Select(Func<KeyValuePair<Type, T>, T>) Select manageable objects using a selector function. public IEnumerable<T> Select(Func<KeyValuePair<Type, T>, T> selector) Parameters selector Func<KeyValuePair<Type, T>, T> The function to select manageable objects. Returns IEnumerable<T> Terminate(IPlugin) Terminate the manager with the given plugin including its manageable objects. This should be called when the plugin is being unloaded or the manager is being disposed. public virtual void Terminate(IPlugin plugin) Parameters plugin IPlugin ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TryInitialize(IManageable, IPlugin) Try to initialize the manageable object with the given plugin. public bool TryInitialize(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryLoad(IManageable, IPlugin) Try to load the manageable object with the given plugin. public bool TryLoad(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryReady(IManageable, IPlugin) public bool TryReady(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryReload(IManageable, IPlugin, ReloadReason) Try to reload the manageable object with the given plugin. public bool TryReload(IManageable manageable, IPlugin plugin, ReloadReason reason) Parameters manageable IManageable plugin IPlugin reason ReloadReason Returns bool TryTerminate(IManageable, IPlugin) Try to unload the manageable object with the given plugin. public bool TryTerminate(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool TryUnload(IManageable, IPlugin) Try to ready the manageable object with the given plugin. public bool TryUnload(IManageable manageable, IPlugin plugin) Parameters manageable IManageable plugin IPlugin Returns bool Unload(IPlugin) Unload the manager with the given plugin including its manageable objects. This should be called before the manager is terminated. public virtual void Unload(IPlugin plugin) Parameters plugin IPlugin"
  },
  "api/RisingV.Shared.Managers.ManagerSource-2.html": {
    "href": "api/RisingV.Shared.Managers.ManagerSource-2.html",
    "title": "Class ManagerSource<T, TM> | RisingV.Shared",
    "summary": "Class ManagerSource<T, TM> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents a source of managers that can manage instances of type T. public abstract class ManagerSource<T, TM> : IManagerSource<T, TM>, IManagerSource, ITypeSource<T>, ITypeSource where T : class, IManageable<TM> where TM : class, IManager Type Parameters T Type of manageable instances. TM Type of the manager that manages instances of type T. Inheritance object ManagerSource<T, TM> Implements IManagerSource<T, TM> IManagerSource ITypeSource<T> ITypeSource Derived TypeMapManagerSource<T, TM> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Manager protected TM? Manager Field Value TM Properties Log protected abstract Logger Log { get; } Property Value Logger Methods Add<TX>(IPlugin, bool) Add an object to the source of the type TX. public virtual TX? Add<TX>(IPlugin plugin, bool failIfExists = true) where TX : T Parameters plugin IPlugin failIfExists bool Returns TX Type Parameters TX Add<TX>(IPlugin, Type, bool) Get an object from the source. public TX Add<TX>(IPlugin plugin, Type type, bool failIfExists = true) where TX : IManageable Parameters plugin IPlugin type Type failIfExists bool Returns TX Type Parameters TX Add<TX>(IPlugin, TX, bool) Add an object to the source. public virtual void Add<TX>(IPlugin plugin, TX obj, bool failIfExists = true) where TX : T Parameters plugin IPlugin obj TX failIfExists bool Type Parameters TX AssignManager(TM) public void AssignManager(TM manager) Parameters manager TM Count() Get the count of objects in the source. public abstract int Count() Returns int ForEach(Action<T>) Get an object from the source. public abstract void ForEach(Action<T> action) Parameters action Action<T> Get(Type, bool) Get an object from the source. public abstract T? Get(Type type, bool required = true) Parameters type Type required bool Returns T GetList() Get all objects from the source. public abstract List<T> GetList() Returns List<T> GetManagedInfo() Get information about the managed instances. public abstract string GetManagedInfo() Returns string GetOrCreate<TX>(IPlugin) Get an object from the source or create and add if not. public abstract TX GetOrCreate<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Returns TX Type Parameters TX Get<TX>(bool) Get an object from the source. public abstract TX? Get<TX>(bool required = true) where TX : T Parameters required bool Returns TX Type Parameters TX Has(string, out IManageable?, bool) Do we have a manageable of a type name. public abstract bool Has(string typeName, out IManageable? manageable, bool checkAssignable = true) Parameters typeName string manageable IManageable checkAssignable bool Returns bool Has(Type, out IManageable?, bool) Do we have an object of the type TX in the source. public abstract bool Has(Type type, out IManageable? manageable, bool checkAssignable = true) Parameters type Type manageable IManageable checkAssignable bool Returns bool Has<TX>(out TX?) Do we have an object of the type TX in the source. public abstract bool Has<TX>(out TX? manageable) where TX : T Parameters manageable TX Returns bool Type Parameters TX Remove<TX>(IPlugin) Remove an object from the source. public abstract void Remove<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Type Parameters TX Remove<TX>(IPlugin, TX) Remove an object from the source. public virtual void Remove<TX>(IPlugin plugin, TX obj) where TX : T Parameters plugin IPlugin obj TX Type Parameters TX RequiredType() Get the type of the object that is required. public Type RequiredType() Returns Type RequiredTypeName() Get the name of the type that is required. public string RequiredTypeName() Returns string Select(Func<KeyValuePair<Type, T>, T>) Select an enumerable of objects from the source. public abstract IEnumerable<T> Select(Func<KeyValuePair<Type, T>, T> selector) Parameters selector Func<KeyValuePair<Type, T>, T> Returns IEnumerable<T>"
  },
  "api/RisingV.Shared.Managers.ReloadReason.html": {
    "href": "api/RisingV.Shared.Managers.ReloadReason.html",
    "title": "Class ReloadReason | RisingV.Shared",
    "summary": "Class ReloadReason Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll Represents a reason for reloading a manager or component. public sealed record ReloadReason : IEquatable<ReloadReason> Inheritance object ReloadReason Implements IEquatable<ReloadReason> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ReloadReason(string, IReadOnlyList<FileChange>?, bool, bool, bool, string?) Represents a reason for reloading a manager or component. public ReloadReason(string Reason, IReadOnlyList<FileChange>? Changes = null, bool IsForced = false, bool IsCritical = false, bool IsFull = false, string? Key = null) Parameters Reason string The reason for the reload. Changes IReadOnlyList<FileChange> A list of file changes that triggered the reload, if applicable. IsForced bool Indicates whether the reload is forced. IsCritical bool Indicates whether the reload is critical. IsFull bool Indicates whether the reload is a full reload. Key string An optional key associated with the reload reason, used for identification purposes. Properties Changes A list of file changes that triggered the reload, if applicable. public IReadOnlyList<FileChange>? Changes { get; init; } Property Value IReadOnlyList<FileChange> IsCritical Indicates whether the reload is critical. public bool IsCritical { get; init; } Property Value bool IsFileChange Checks if we had file changes that triggered this reload reason. public bool IsFileChange { get; } Property Value bool IsForced Indicates whether the reload is forced. public bool IsForced { get; init; } Property Value bool IsFull Indicates whether the reload is a full reload. public bool IsFull { get; init; } Property Value bool Key An optional key associated with the reload reason, used for identification purposes. public string? Key { get; init; } Property Value string Reason The reason for the reload. public string Reason { get; init; } Property Value string"
  },
  "api/RisingV.Shared.Managers.TypeMapManager-2.html": {
    "href": "api/RisingV.Shared.Managers.TypeMapManager-2.html",
    "title": "Class TypeMapManager<T, TM> | RisingV.Shared",
    "summary": "Class TypeMapManager<T, TM> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll A base class for managers that use a type map to manage instances of IManageable<T>. public abstract class TypeMapManager<T, TM> : ManagerBase<T, TM>, IManager<T, TM>, IManager, IManageable where T : class, IManageable<TM> where TM : class, IManager Type Parameters T The type of manageable objects, which must implement IManageable<T>. TM The type of manager, which must implement IManager. Inheritance object ManagerBase<T, TM> TypeMapManager<T, TM> Implements IManager<T, TM> IManager IManageable Derived DatabaseManager EngineManager PluginComponentsManager PluginConfigManager PluginManager ProcessorManager SystemManager Inherited Members ManagerBase<T, TM>.InitializedMap ManagerBase<T, TM>.LoadedMap ManagerBase<T, TM>.ReadyMap ManagerBase<T, TM>.ReloadingMap ManagerBase<T, TM>.PluginsMap ManagerBase<T, TM>.Log ManagerBase<T, TM>.AllowAutoReload ManagerBase<T, TM>.UnsubscribeEventsOnRemoval ManagerBase<T, TM>.IsInitialized ManagerBase<T, TM>.IsLoaded ManagerBase<T, TM>.IsReady ManagerBase<T, TM>.IsFullReloading ManagerBase<T, TM>.IsEnabled(IManageable) ManagerBase<T, TM>.IsEnabled<TX>(TX) ManagerBase<T, TM>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<T, TM>.GetDependentPlugins(params IPlugin[]) ManagerBase<T, TM>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<T, TM>.Initialize(IPlugin) ManagerBase<T, TM>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<T, TM>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<T, TM>.Ready(IPlugin) ManagerBase<T, TM>.Load(IPlugin) ManagerBase<T, TM>.Unload(IPlugin) ManagerBase<T, TM>.Reload(ReloadReason) ManagerBase<T, TM>.Reload(IPlugin, ReloadReason) ManagerBase<T, TM>.OnReload(IPlugin, ReloadReason) ManagerBase<T, TM>.Terminate(IPlugin) ManagerBase<T, TM>.TryInitialize(IManageable, IPlugin) ManagerBase<T, TM>.TryReady(IManageable, IPlugin) ManagerBase<T, TM>.TryLoad(IManageable, IPlugin) ManagerBase<T, TM>.TryUnload(IManageable, IPlugin) ManagerBase<T, TM>.TryTerminate(IManageable, IPlugin) ManagerBase<T, TM>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<T, TM>.Add<TX>(IPlugin, bool) ManagerBase<T, TM>.Add<TX>(IPlugin, TX, bool) ManagerBase<T, TM>.Add<TX>(IPlugin, Type, bool) ManagerBase<T, TM>.OnManageableAdded<TX>(IPlugin, T, bool) ManagerBase<T, TM>.OnManageableRemoved<TX>(IPlugin, T) ManagerBase<T, TM>.Remove<TX>(IPlugin) ManagerBase<T, TM>.Remove<TX>(IPlugin, TX) ManagerBase<T, TM>.Get<TX>(bool) ManagerBase<T, TM>.Get(Type, bool) ManagerBase<T, TM>.GetOrCreate<TX>(IPlugin) ManagerBase<T, TM>.Has<TX>(bool) ManagerBase<T, TM>.Has(Type, bool, bool) ManagerBase<T, TM>.Has(string, bool, bool) ManagerBase<T, TM>.Count() ManagerBase<T, TM>.ForEach(Action<T>) ManagerBase<T, TM>.GetList() ManagerBase<T, TM>.Select(Func<KeyValuePair<Type, T>, T>) ManagerBase<T, TM>.RequiredType() ManagerBase<T, TM>.RequiredTypeName() ManagerBase<T, TM>.GetManagedInfo() ManagerBase<T, TM>.Equals(ManagerBase<T, TM>) ManagerBase<T, TM>.Equals(object) ManagerBase<T, TM>.GetHashCode() ManagerBase<T, TM>.DebugPrintAll(string) ManagerBase<T, TM>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors TypeMapManager() A base class for managers that use a type map to manage instances of IManageable<T>. protected TypeMapManager()"
  },
  "api/RisingV.Shared.Managers.TypeMapManagerSource-2.html": {
    "href": "api/RisingV.Shared.Managers.TypeMapManagerSource-2.html",
    "title": "Class TypeMapManagerSource<T, TM> | RisingV.Shared",
    "summary": "Class TypeMapManagerSource<T, TM> Namespace RisingV.Shared.Managers Assembly RisingV.Shared.dll A manager source that uses a type map to manage instances of IManageable<T>. public class TypeMapManagerSource<T, TM> : ManagerSource<T, TM>, IManagerSource<T, TM>, IManagerSource, ITypeSource<T>, ITypeSource where T : class, IManageable<TM> where TM : class, IManager Type Parameters T The type of manageable objects, which must implement IManageable<T>. TM The type of manager, which must implement IManager. Inheritance object ManagerSource<T, TM> TypeMapManagerSource<T, TM> Implements IManagerSource<T, TM> IManagerSource ITypeSource<T> ITypeSource Inherited Members ManagerSource<T, TM>.Log ManagerSource<T, TM>.Manager ManagerSource<T, TM>.AssignManager(TM) ManagerSource<T, TM>.Add<TX>(IPlugin, bool) ManagerSource<T, TM>.Add<TX>(IPlugin, TX, bool) ManagerSource<T, TM>.Add<TX>(IPlugin, Type, bool) ManagerSource<T, TM>.Remove<TX>(IPlugin) ManagerSource<T, TM>.Remove<TX>(IPlugin, TX) ManagerSource<T, TM>.Get<TX>(bool) ManagerSource<T, TM>.Get(Type, bool) ManagerSource<T, TM>.GetOrCreate<TX>(IPlugin) ManagerSource<T, TM>.Has<TX>(out TX) ManagerSource<T, TM>.Has(Type, out IManageable, bool) ManagerSource<T, TM>.Has(string, out IManageable, bool) ManagerSource<T, TM>.ForEach(Action<T>) ManagerSource<T, TM>.GetList() ManagerSource<T, TM>.Select(Func<KeyValuePair<Type, T>, T>) ManagerSource<T, TM>.Count() ManagerSource<T, TM>.GetManagedInfo() ManagerSource<T, TM>.RequiredType() ManagerSource<T, TM>.RequiredTypeName() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods Add<TX>(IPlugin, bool) Add an object to the source of the type TX. public override TX? Add<TX>(IPlugin plugin, bool failIfExists = true) where TX : T Parameters plugin IPlugin failIfExists bool Returns TX Type Parameters TX Add<TX>(IPlugin, TX, bool) Add an object to the source. public override void Add<TX>(IPlugin plugin, TX obj, bool failIfExists = true) where TX : T Parameters plugin IPlugin obj TX failIfExists bool Type Parameters TX Count() Get the count of objects in the source. public override int Count() Returns int ForEach(Action<T>) Get an object from the source. public override void ForEach(Action<T> action) Parameters action Action<T> Get(Type, bool) Get an object from the source. public override T? Get(Type type, bool required = true) Parameters type Type required bool Returns T GetList() Get all objects from the source. public override List<T> GetList() Returns List<T> GetManagedInfo() Get information about the managed instances. public override string GetManagedInfo() Returns string GetOrCreate<TX>(IPlugin) Get an object from the source or create and add if not. public override TX GetOrCreate<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Returns TX Type Parameters TX Get<TX>(bool) Get an object from the source. public override TX? Get<TX>(bool required = true) where TX : T Parameters required bool Returns TX Type Parameters TX Has(string, out IManageable?, bool) Do we have a manageable of a type name. public override bool Has(string typeName, out IManageable? manageable, bool checkAssignable = true) Parameters typeName string manageable IManageable checkAssignable bool Returns bool Has(Type, out IManageable, bool) Do we have an object of the type TX in the source. public override bool Has(Type type, out IManageable manageable, bool checkAssignable = true) Parameters type Type manageable IManageable checkAssignable bool Returns bool Has<TX>(out TX) Do we have an object of the type TX in the source. public override bool Has<TX>(out TX manageable) where TX : T Parameters manageable TX Returns bool Type Parameters TX Remove<TX>(IPlugin) Remove an object from the source. public override void Remove<TX>(IPlugin plugin) where TX : T Parameters plugin IPlugin Type Parameters TX Select(Func<KeyValuePair<Type, T>, T>) Select an enumerable of objects from the source. public override IEnumerable<T> Select(Func<KeyValuePair<Type, T>, T> selector) Parameters selector Func<KeyValuePair<Type, T>, T> Returns IEnumerable<T>"
  },
  "api/RisingV.Shared.Managers.html": {
    "href": "api/RisingV.Shared.Managers.html",
    "title": "Namespace RisingV.Shared.Managers | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Managers Classes ManagerBase<T, TM> Base class for managers that handle manageable objects. ManagerSource<T, TM> Represents a source of managers that can manage instances of type T. ReloadReason Represents a reason for reloading a manager or component. TypeMapManagerSource<T, TM> A manager source that uses a type map to manage instances of IManageable<T>. TypeMapManager<T, TM> A base class for managers that use a type map to manage instances of IManageable<T>. Interfaces IEnableable IManageable Represents an interface for manageable components within the system. IManageableLifecycle Represents an interface for manageable components that have a lifecycle. IManageableLifecycle<T> Represents an interface for manageable components that have a lifecycle and are associated with a specific type of manager. IManageable<T> Represents an interface for manageable components that are associated with a specific type of manager. IManager Interface for a manager that handles manageable objects. IManagerSource Represents a source of managers that can be used to manage instances of type T. IManagerSource<T, TM> Represents a source of managers that can manage instances of type T. IManager<T, TM> Interface for a manager that handles manageable objects of a specific type. IReloadable IReloadable<T> ITypeSource Interface for a type source that manages objects of a specific type. ITypeSource<T> Interface for a type source that manages objects of a specific type T."
  },
  "api/RisingV.Shared.MyPluginInfo.html": {
    "href": "api/RisingV.Shared.MyPluginInfo.html",
    "title": "Class MyPluginInfo | RisingV.Shared",
    "summary": "Class MyPluginInfo Namespace RisingV.Shared Assembly RisingV.Shared.dll public static class MyPluginInfo Inheritance object MyPluginInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PLUGIN_GUID public const string PLUGIN_GUID = \"RisingV.Shared\" Field Value string PLUGIN_NAME public const string PLUGIN_NAME = \"RisingV.Shared\" Field Value string PLUGIN_VERSION public const string PLUGIN_VERSION = \"0.1.0\" Field Value string"
  },
  "api/RisingV.Shared.Plugin.html": {
    "href": "api/RisingV.Shared.Plugin.html",
    "title": "Class Plugin | RisingV.Shared",
    "summary": "Class Plugin Namespace RisingV.Shared Assembly RisingV.Shared.dll [BepInPlugin(\"RisingV.Shared\", \"RisingV.Shared\", \"0.1.0\")] public class Plugin : BasePlugin Inheritance object BasePlugin Plugin Inherited Members BasePlugin.AddComponent<T>() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Log public static readonly Logger Log Field Value Logger Properties Config public static SharedPluginConfig Config { get; } Property Value SharedPluginConfig Harmony public static Harmony Harmony { get; } Property Value Harmony Methods Load() public override void Load() OnInitialized(OnGameDataInitializedEvent) public void OnInitialized(EventBridge.OnGameDataInitializedEvent e) Parameters e EventBridge.OnGameDataInitializedEvent OnPluginsLoaded() protected void OnPluginsLoaded() Unload() public override bool Unload() Returns bool"
  },
  "api/RisingV.Shared.Plugins.IHasPlugin-1.html": {
    "href": "api/RisingV.Shared.Plugins.IHasPlugin-1.html",
    "title": "Interface IHasPlugin<T> | RisingV.Shared",
    "summary": "Interface IHasPlugin<T> Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents an interface for objects that have a plugin associated with them, with a specific plugin type. public interface IHasPlugin<T> where T : IPlugin Type Parameters T The type of the plugin, which must implement IPlugin. Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Plugin T Plugin { get; set; } Property Value T"
  },
  "api/RisingV.Shared.Plugins.IHasPlugin.html": {
    "href": "api/RisingV.Shared.Plugins.IHasPlugin.html",
    "title": "Interface IHasPlugin | RisingV.Shared",
    "summary": "Interface IHasPlugin Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents an interface for objects that have a plugin associated with them. public interface IHasPlugin Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Plugin Gets or sets the plugin associated with this object. IPlugin Plugin { get; set; } Property Value IPlugin"
  },
  "api/RisingV.Shared.Plugins.IHasPluginContext-1.html": {
    "href": "api/RisingV.Shared.Plugins.IHasPluginContext-1.html",
    "title": "Interface IHasPluginContext<T> | RisingV.Shared",
    "summary": "Interface IHasPluginContext<T> Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents a plugin context that provides access to a specific type of plugin context. public interface IHasPluginContext<out T> : IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable where T : IPluginContext Type Parameters T The type of plugin context. Inherited Members IPluginContext.PluginInfo IPluginContext.PluginConfig IPluginContext.PluginTarget IPluginContext.Harmony Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Context Gets the specific plugin context associated with this instance. T Context { get; } Property Value T"
  },
  "api/RisingV.Shared.Plugins.IPlugin-1.html": {
    "href": "api/RisingV.Shared.Plugins.IPlugin-1.html",
    "title": "Interface IPlugin<T> | RisingV.Shared",
    "summary": "Interface IPlugin<T> Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents a plugin in the RisingV framework with a specific plugin context. public interface IPlugin<out T> : IPlugin, IManageable<PluginManager>, IReloadable<PluginManager>, IReloadable, IDisposable, IHasPluginContext<T>, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable where T : IPluginContext Type Parameters T The type of the plugin context, which must implement IPluginContext. Inherited Members IPlugin.SystemManager IPlugin.ProcessorManager IPlugin.DatabaseManager IPlugin.EngineManager IPlugin.GetSharedComponent(Type) IPlugin.GetSharedComponent<TX>() IPlugin.AddSharedComponent<T>(IPlugin, bool) IPlugin.AddSharedComponent<T>(IPlugin, T, bool) IPlugin.Load() IPlugin.OnPreLoad() IPlugin.OnInitialize() IPlugin.OnLoad() IPlugin.OnUnload() IPlugin.SetupConfiguration(PluginConfig) IPlugin.SetupSharedEventBus(ManagedEventBus) IReloadable<PluginManager>.Reload(PluginManager, List<IPlugin>, ReloadReason) IReloadable<PluginManager>.OnReload(PluginManager, List<IPlugin>, ReloadReason) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) IDisposable.Dispose() IHasPluginContext<T>.Context IPluginContext.PluginInfo IPluginContext.PluginConfig IPluginContext.PluginTarget IPluginContext.Harmony Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Plugins.IPlugin.html": {
    "href": "api/RisingV.Shared.Plugins.IPlugin.html",
    "title": "Interface IPlugin | RisingV.Shared",
    "summary": "Interface IPlugin Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents a plugin in the RisingV framework. public interface IPlugin : IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable<PluginManager>, IManageable, IReloadable<PluginManager>, IReloadable, IDisposable Inherited Members IPluginContext.PluginInfo IPluginContext.PluginConfig IPluginContext.PluginTarget IPluginContext.Harmony IReloadable<PluginManager>.Reload(PluginManager, List<IPlugin>, ReloadReason) IReloadable<PluginManager>.OnReload(PluginManager, List<IPlugin>, ReloadReason) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) IDisposable.Dispose() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties DatabaseManager The database manager for the plugin. DatabaseManager DatabaseManager { get; } Property Value DatabaseManager EngineManager The engine manager for the plugin. EngineManager EngineManager { get; } Property Value EngineManager ProcessorManager The processor manager for the plugin. ProcessorManager ProcessorManager { get; } Property Value ProcessorManager SystemManager The system manager for the plugin. SystemManager SystemManager { get; } Property Value SystemManager Methods AddSharedComponent<T>(IPlugin, bool) Adds a shared component to the plugin context. T? AddSharedComponent<T>(IPlugin plugin, bool failIfExists = true) where T : class, IPluginComponent Parameters plugin IPlugin The plugin to which the component belongs. failIfExists bool Throw an exception if the shared component already exists. Default: true Returns T The added plugin component of the specified type, or null if it was not added. Type Parameters T The type of the plugin component to add. AddSharedComponent<T>(IPlugin, T, bool) Adds a shared component to the plugin context with an instance of the component. void AddSharedComponent<T>(IPlugin plugin, T obj, bool failIfExists = true) where T : class, IPluginComponent Parameters plugin IPlugin The plugin to which the component belongs. obj T The instance of the plugin component to add. failIfExists bool Throw an exception if the shared component already exists. Default: true Type Parameters T The type of the plugin component to add. GetSharedComponent(Type) Gets a shared component of the specified type from the plugin context. IPluginComponent? GetSharedComponent(Type type) Parameters type Type The type of the plugin context to retrieve. Returns IPluginComponent The plugin context of the specified type, or null if not found. GetSharedComponent<TX>() Gets a shared component of the specified type from the plugin context. TX? GetSharedComponent<TX>() where TX : class, IPluginComponent Returns TX The plugin component of the specified type, or null if not found. Type Parameters TX The type of the plugin component to retrieve. Load() Loads the plugin, initializing it and registering necessary components and events. void Load() OnInitialize() void OnInitialize() OnLoad() void OnLoad() OnPreLoad() void OnPreLoad() OnUnload() bool OnUnload() Returns bool SetupConfiguration(PluginConfig?) void SetupConfiguration(PluginConfig? pluginConfig) Parameters pluginConfig PluginConfig SetupSharedEventBus(ManagedEventBus) void SetupSharedEventBus(ManagedEventBus eventBus) Parameters eventBus ManagedEventBus"
  },
  "api/RisingV.Shared.Plugins.IPluginComponent.html": {
    "href": "api/RisingV.Shared.Plugins.IPluginComponent.html",
    "title": "Interface IPluginComponent | RisingV.Shared",
    "summary": "Interface IPluginComponent Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents a component of a plugin that can be managed by the PluginComponentsManager. public interface IPluginComponent : IManageable<PluginComponentsManager>, IManageable Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Plugins.IPluginConfig.html": {
    "href": "api/RisingV.Shared.Plugins.IPluginConfig.html",
    "title": "Interface IPluginConfig | RisingV.Shared",
    "summary": "Interface IPluginConfig Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents a plugin configuration interface. public interface IPluginConfig : IConfig, IManageableLifecycle<PluginConfigManager>, IManageableLifecycle, IReloadable, IManageable<PluginConfigManager>, IManageable Inherited Members IConfig.ConfigRelativePath IConfig.ConfigFileName IConfig.ConfigFile IConfig.Initialize() IConfig.Load() IConfig.Ready() IConfig.Unload() IConfig.Terminate() IConfig.Reload(ReloadReason) IManageableLifecycle<PluginConfigManager>.Initialize(PluginConfigManager, List<IPlugin>) IManageableLifecycle<PluginConfigManager>.Load(PluginConfigManager, List<IPlugin>) IManageableLifecycle<PluginConfigManager>.Unload(PluginConfigManager, List<IPlugin>) IManageableLifecycle<PluginConfigManager>.Ready(PluginConfigManager, List<IPlugin>) IManageableLifecycle<PluginConfigManager>.Terminate(PluginConfigManager, List<IPlugin>) IManageableLifecycle<PluginConfigManager>.Reload(PluginConfigManager, List<IPlugin>, ReloadReason) IManageableLifecycle<PluginConfigManager>.OnReload(PluginConfigManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Plugins.IPluginContext.html": {
    "href": "api/RisingV.Shared.Plugins.IPluginContext.html",
    "title": "Interface IPluginContext | RisingV.Shared",
    "summary": "Interface IPluginContext Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents the context in which a plugin operates. public interface IPluginContext : IPluginComponent, IManageable<PluginComponentsManager>, IManageable Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Harmony Harmony Harmony { get; } Property Value Harmony PluginConfig PluginConfig? PluginConfig { get; } Property Value PluginConfig PluginInfo PluginInfo PluginInfo { get; } Property Value PluginInfo PluginTarget PluginTarget PluginTarget { get; } Property Value PluginTarget"
  },
  "api/RisingV.Shared.Plugins.PluginComponentsManager.html": {
    "href": "api/RisingV.Shared.Plugins.PluginComponentsManager.html",
    "title": "Class PluginComponentsManager | RisingV.Shared",
    "summary": "Class PluginComponentsManager Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Manages shared components across plugins. public class PluginComponentsManager : TypeMapManager<IPluginComponent, PluginComponentsManager>, IManager<IPluginComponent, PluginComponentsManager>, IManager, IManageable Inheritance object ManagerBase<IPluginComponent, PluginComponentsManager> TypeMapManager<IPluginComponent, PluginComponentsManager> PluginComponentsManager Implements IManager<IPluginComponent, PluginComponentsManager> IManager IManageable Inherited Members ManagerBase<IPluginComponent, PluginComponentsManager>.InitializedMap ManagerBase<IPluginComponent, PluginComponentsManager>.LoadedMap ManagerBase<IPluginComponent, PluginComponentsManager>.ReadyMap ManagerBase<IPluginComponent, PluginComponentsManager>.ReloadingMap ManagerBase<IPluginComponent, PluginComponentsManager>.PluginsMap ManagerBase<IPluginComponent, PluginComponentsManager>.Log ManagerBase<IPluginComponent, PluginComponentsManager>.AllowAutoReload ManagerBase<IPluginComponent, PluginComponentsManager>.UnsubscribeEventsOnRemoval ManagerBase<IPluginComponent, PluginComponentsManager>.IsInitialized ManagerBase<IPluginComponent, PluginComponentsManager>.IsLoaded ManagerBase<IPluginComponent, PluginComponentsManager>.IsReady ManagerBase<IPluginComponent, PluginComponentsManager>.IsFullReloading ManagerBase<IPluginComponent, PluginComponentsManager>.IsEnabled(IManageable) ManagerBase<IPluginComponent, PluginComponentsManager>.IsEnabled<TX>(TX) ManagerBase<IPluginComponent, PluginComponentsManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<IPluginComponent, PluginComponentsManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<IPluginComponent, PluginComponentsManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<IPluginComponent, PluginComponentsManager>.Initialize(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<IPluginComponent, PluginComponentsManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Ready(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.Load(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.Unload(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.Reload(ReloadReason) ManagerBase<IPluginComponent, PluginComponentsManager>.Reload(IPlugin, ReloadReason) ManagerBase<IPluginComponent, PluginComponentsManager>.OnReload(IPlugin, ReloadReason) ManagerBase<IPluginComponent, PluginComponentsManager>.Terminate(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.TryInitialize(IManageable, IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.TryReady(IManageable, IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.TryLoad(IManageable, IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.TryUnload(IManageable, IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.TryTerminate(IManageable, IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<IPluginComponent, PluginComponentsManager>.Add<TX>(IPlugin, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.OnManageableAdded<TX>(IPlugin, IPluginComponent, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.OnManageableRemoved<TX>(IPlugin, IPluginComponent) ManagerBase<IPluginComponent, PluginComponentsManager>.Remove<TX>(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.Remove<TX>(IPlugin, TX) ManagerBase<IPluginComponent, PluginComponentsManager>.Get<TX>(bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Get(Type, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.GetOrCreate<TX>(IPlugin) ManagerBase<IPluginComponent, PluginComponentsManager>.Has<TX>(bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Has(Type, bool, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Has(string, bool, bool) ManagerBase<IPluginComponent, PluginComponentsManager>.Count() ManagerBase<IPluginComponent, PluginComponentsManager>.ForEach(Action<IPluginComponent>) ManagerBase<IPluginComponent, PluginComponentsManager>.GetList() ManagerBase<IPluginComponent, PluginComponentsManager>.Select(Func<KeyValuePair<Type, IPluginComponent>, IPluginComponent>) ManagerBase<IPluginComponent, PluginComponentsManager>.RequiredType() ManagerBase<IPluginComponent, PluginComponentsManager>.RequiredTypeName() ManagerBase<IPluginComponent, PluginComponentsManager>.GetManagedInfo() ManagerBase<IPluginComponent, PluginComponentsManager>.Equals(ManagerBase<IPluginComponent, PluginComponentsManager>) ManagerBase<IPluginComponent, PluginComponentsManager>.Equals(object) ManagerBase<IPluginComponent, PluginComponentsManager>.GetHashCode() ManagerBase<IPluginComponent, PluginComponentsManager>.DebugPrintAll(string) ManagerBase<IPluginComponent, PluginComponentsManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger"
  },
  "api/RisingV.Shared.Plugins.PluginConfig.html": {
    "href": "api/RisingV.Shared.Plugins.PluginConfig.html",
    "title": "Class PluginConfig | RisingV.Shared",
    "summary": "Class PluginConfig Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents a plugin configuration class. public class PluginConfig : BaseConfig, IPluginConfig, IConfig, IManageableLifecycle<PluginConfigManager>, IManageableLifecycle, IReloadable, IManageable<PluginConfigManager>, IManageable Inheritance object BaseConfig PluginConfig Implements IPluginConfig IConfig IManageableLifecycle<PluginConfigManager> IManageableLifecycle IReloadable IManageable<PluginConfigManager> IManageable Derived SharedPluginConfig Inherited Members BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PluginConfig(string?, string?) Represents a plugin configuration class. public PluginConfig(string? configFileName, string? configRelativePath = null) Parameters configFileName string configRelativePath string Properties AutoLoadEngines Try to autoload engines for the plugin via the engine's bootloader. public ConfigEntry<bool>? AutoLoadEngines { get; } Property Value ConfigEntry<bool> DependencyAutoLoad Gets or sets a configuration entry for allowing automatic dependency loading. public ConfigEntry<bool>? DependencyAutoLoad { get; } Property Value ConfigEntry<bool> HotReload Gets or sets a configuration entry for enabling hot reloading of the plugin. public ConfigEntry<bool>? HotReload { get; } Property Value ConfigEntry<bool> Log protected override Logger Log { get; } Property Value Logger RegisterCommands Gets or sets a configuration entry for registering commands. public ConfigEntry<bool>? RegisterCommands { get; } Property Value ConfigEntry<bool> Methods Initialize(PluginConfigManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public void Initialize(PluginConfigManager manager, List<IPlugin> plugins) Parameters manager PluginConfigManager plugins List<IPlugin> Load(PluginConfigManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public void Load(PluginConfigManager manager, List<IPlugin> plugins) Parameters manager PluginConfigManager plugins List<IPlugin> Ready(PluginConfigManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public void Ready(PluginConfigManager manager, List<IPlugin> plugins) Parameters manager PluginConfigManager plugins List<IPlugin> Reload(PluginConfigManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public void Reload(PluginConfigManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager PluginConfigManager plugins List<IPlugin> reason ReloadReason Terminate(PluginConfigManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public void Terminate(PluginConfigManager manager, List<IPlugin> plugins) Parameters manager PluginConfigManager plugins List<IPlugin> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Unload(PluginConfigManager, List<IPlugin>) Unloads the manager and its dependencies with a specific type. public void Unload(PluginConfigManager manager, List<IPlugin> plugins) Parameters manager PluginConfigManager plugins List<IPlugin>"
  },
  "api/RisingV.Shared.Plugins.PluginConfigManager.html": {
    "href": "api/RisingV.Shared.Plugins.PluginConfigManager.html",
    "title": "Class PluginConfigManager | RisingV.Shared",
    "summary": "Class PluginConfigManager Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Manages plugin configurations. public class PluginConfigManager : TypeMapManager<IPluginConfig, PluginConfigManager>, IManager<IPluginConfig, PluginConfigManager>, IManager, IManageable Inheritance object ManagerBase<IPluginConfig, PluginConfigManager> TypeMapManager<IPluginConfig, PluginConfigManager> PluginConfigManager Implements IManager<IPluginConfig, PluginConfigManager> IManager IManageable Inherited Members ManagerBase<IPluginConfig, PluginConfigManager>.InitializedMap ManagerBase<IPluginConfig, PluginConfigManager>.LoadedMap ManagerBase<IPluginConfig, PluginConfigManager>.ReadyMap ManagerBase<IPluginConfig, PluginConfigManager>.ReloadingMap ManagerBase<IPluginConfig, PluginConfigManager>.PluginsMap ManagerBase<IPluginConfig, PluginConfigManager>.Log ManagerBase<IPluginConfig, PluginConfigManager>.AllowAutoReload ManagerBase<IPluginConfig, PluginConfigManager>.UnsubscribeEventsOnRemoval ManagerBase<IPluginConfig, PluginConfigManager>.IsInitialized ManagerBase<IPluginConfig, PluginConfigManager>.IsLoaded ManagerBase<IPluginConfig, PluginConfigManager>.IsReady ManagerBase<IPluginConfig, PluginConfigManager>.IsFullReloading ManagerBase<IPluginConfig, PluginConfigManager>.IsEnabled(IManageable) ManagerBase<IPluginConfig, PluginConfigManager>.IsEnabled<TX>(TX) ManagerBase<IPluginConfig, PluginConfigManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<IPluginConfig, PluginConfigManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<IPluginConfig, PluginConfigManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<IPluginConfig, PluginConfigManager>.Initialize(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<IPluginConfig, PluginConfigManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<IPluginConfig, PluginConfigManager>.Ready(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.Load(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.Unload(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.Reload(ReloadReason) ManagerBase<IPluginConfig, PluginConfigManager>.Reload(IPlugin, ReloadReason) ManagerBase<IPluginConfig, PluginConfigManager>.OnReload(IPlugin, ReloadReason) ManagerBase<IPluginConfig, PluginConfigManager>.Terminate(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.TryInitialize(IManageable, IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.TryReady(IManageable, IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.TryLoad(IManageable, IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.TryUnload(IManageable, IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.TryTerminate(IManageable, IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<IPluginConfig, PluginConfigManager>.Add<TX>(IPlugin, bool) ManagerBase<IPluginConfig, PluginConfigManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<IPluginConfig, PluginConfigManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<IPluginConfig, PluginConfigManager>.OnManageableAdded<TX>(IPlugin, IPluginConfig, bool) ManagerBase<IPluginConfig, PluginConfigManager>.OnManageableRemoved<TX>(IPlugin, IPluginConfig) ManagerBase<IPluginConfig, PluginConfigManager>.Remove<TX>(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.Remove<TX>(IPlugin, TX) ManagerBase<IPluginConfig, PluginConfigManager>.Get<TX>(bool) ManagerBase<IPluginConfig, PluginConfigManager>.Get(Type, bool) ManagerBase<IPluginConfig, PluginConfigManager>.GetOrCreate<TX>(IPlugin) ManagerBase<IPluginConfig, PluginConfigManager>.Has<TX>(bool) ManagerBase<IPluginConfig, PluginConfigManager>.Has(Type, bool, bool) ManagerBase<IPluginConfig, PluginConfigManager>.Has(string, bool, bool) ManagerBase<IPluginConfig, PluginConfigManager>.Count() ManagerBase<IPluginConfig, PluginConfigManager>.ForEach(Action<IPluginConfig>) ManagerBase<IPluginConfig, PluginConfigManager>.GetList() ManagerBase<IPluginConfig, PluginConfigManager>.Select(Func<KeyValuePair<Type, IPluginConfig>, IPluginConfig>) ManagerBase<IPluginConfig, PluginConfigManager>.RequiredType() ManagerBase<IPluginConfig, PluginConfigManager>.RequiredTypeName() ManagerBase<IPluginConfig, PluginConfigManager>.GetManagedInfo() ManagerBase<IPluginConfig, PluginConfigManager>.Equals(ManagerBase<IPluginConfig, PluginConfigManager>) ManagerBase<IPluginConfig, PluginConfigManager>.Equals(object) ManagerBase<IPluginConfig, PluginConfigManager>.GetHashCode() ManagerBase<IPluginConfig, PluginConfigManager>.DebugPrintAll(string) ManagerBase<IPluginConfig, PluginConfigManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger"
  },
  "api/RisingV.Shared.Plugins.PluginContext.html": {
    "href": "api/RisingV.Shared.Plugins.PluginContext.html",
    "title": "Class PluginContext | RisingV.Shared",
    "summary": "Class PluginContext Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents the context for a plugin, providing access to plugin information, configuration, and Harmony instance. public abstract class PluginContext : IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object PluginContext Implements IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Derived BootstrapPluginContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PluginContext(PluginInfo, PluginConfig?, PluginTarget) protected PluginContext(PluginInfo pluginInfo, PluginConfig? pluginConfig = null, PluginTarget pluginTarget = PluginTarget.Server) Parameters pluginInfo PluginInfo pluginConfig PluginConfig pluginTarget PluginTarget PluginContext(Type, PluginConfig?, PluginTarget) protected PluginContext(Type infoStaticType, PluginConfig? pluginConfig = null, PluginTarget pluginTarget = PluginTarget.Server) Parameters infoStaticType Type pluginConfig PluginConfig pluginTarget PluginTarget Properties Harmony Gets the Harmony instance associated with this plugin, used for patching methods in the game. public Harmony Harmony { get; } Property Value Harmony PluginConfig Gets the plugin configuration, which may include settings and options for the plugin. public PluginConfig? PluginConfig { get; } Property Value PluginConfig PluginInfo Gets the plugin information, including name, version, and GUID. public PluginInfo PluginInfo { get; } Property Value PluginInfo PluginTarget Gets the target platform for the plugin, indicating whether it is for the server or client. public PluginTarget PluginTarget { get; } Property Value PluginTarget"
  },
  "api/RisingV.Shared.Plugins.PluginInfo.html": {
    "href": "api/RisingV.Shared.Plugins.PluginInfo.html",
    "title": "Class PluginInfo | RisingV.Shared",
    "summary": "Class PluginInfo Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents information about a plugin. [Serializable] public class PluginInfo Inheritance object PluginInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PluginInfo(PluginInfo) public PluginInfo(PluginInfo pluginInfo) Parameters pluginInfo PluginInfo PluginInfo(string?, string?, string?) Represents information about a plugin. public PluginInfo(string? guid, string? name, string? version) Parameters guid string The unique identifier for the plugin. name string The name of the plugin. version string The version of the plugin. Properties ConfigPath Gets the path to the plugin's configuration directory. public string ConfigPath { get; } Property Value string Guid Gets or sets the unique identifier for the plugin. public string Guid { get; protected set; } Property Value string Name Gets or sets the name of the plugin. public string Name { get; protected set; } Property Value string PluginPath public string PluginPath { get; } Property Value string Version Gets or sets the version of the plugin. public string Version { get; protected set; } Property Value string Methods FromConfigPath(string) Combines the plugin's configuration path with a relative path to create a full path. public string FromConfigPath(string relativePath) Parameters relativePath string The relative path to combine with the plugin's configuration path. Returns string A full path that combines the plugin's configuration path with the specified relative path. FromType(Type) Creates a new instance of PluginInfo from a static type that contains plugin information. public static PluginInfo FromType(Type infoStaticType) Parameters infoStaticType Type The static type that contains plugin information. Returns PluginInfo A new instance of PluginInfo. GetPluginValue(Type, PluginInfoType) Gets the value of a specific plugin information type from a static type. public static string? GetPluginValue(Type infoStaticType, PluginInfoType infoType) Parameters infoStaticType Type The static type that contains plugin information. infoType PluginInfoType The type of plugin information to retrieve. Returns string The value of the specified plugin information type, or null if not found. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Shared.Plugins.PluginInfoType.html": {
    "href": "api/RisingV.Shared.Plugins.PluginInfoType.html",
    "title": "Enum PluginInfoType | RisingV.Shared",
    "summary": "Enum PluginInfoType Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents the type of plugin information. public enum PluginInfoType Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields Guid = 0 Name = 1 Version = 2"
  },
  "api/RisingV.Shared.Plugins.PluginManager.html": {
    "href": "api/RisingV.Shared.Plugins.PluginManager.html",
    "title": "Class PluginManager | RisingV.Shared",
    "summary": "Class PluginManager Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Manages plugins in the RisingV framework. public class PluginManager : TypeMapManager<IPlugin, PluginManager>, IManager<IPlugin, PluginManager>, IManager, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object ManagerBase<IPlugin, PluginManager> TypeMapManager<IPlugin, PluginManager> PluginManager Implements IManager<IPlugin, PluginManager> IManager IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members ManagerBase<IPlugin, PluginManager>.InitializedMap ManagerBase<IPlugin, PluginManager>.LoadedMap ManagerBase<IPlugin, PluginManager>.ReadyMap ManagerBase<IPlugin, PluginManager>.ReloadingMap ManagerBase<IPlugin, PluginManager>.PluginsMap ManagerBase<IPlugin, PluginManager>.Log ManagerBase<IPlugin, PluginManager>.AllowAutoReload ManagerBase<IPlugin, PluginManager>.UnsubscribeEventsOnRemoval ManagerBase<IPlugin, PluginManager>.IsInitialized ManagerBase<IPlugin, PluginManager>.IsLoaded ManagerBase<IPlugin, PluginManager>.IsReady ManagerBase<IPlugin, PluginManager>.IsFullReloading ManagerBase<IPlugin, PluginManager>.IsEnabled(IManageable) ManagerBase<IPlugin, PluginManager>.IsEnabled<TX>(TX) ManagerBase<IPlugin, PluginManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<IPlugin, PluginManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<IPlugin, PluginManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<IPlugin, PluginManager>.Initialize(IPlugin) ManagerBase<IPlugin, PluginManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<IPlugin, PluginManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<IPlugin, PluginManager>.Ready(IPlugin) ManagerBase<IPlugin, PluginManager>.Load(IPlugin) ManagerBase<IPlugin, PluginManager>.Unload(IPlugin) ManagerBase<IPlugin, PluginManager>.Reload(ReloadReason) ManagerBase<IPlugin, PluginManager>.Reload(IPlugin, ReloadReason) ManagerBase<IPlugin, PluginManager>.OnReload(IPlugin, ReloadReason) ManagerBase<IPlugin, PluginManager>.Terminate(IPlugin) ManagerBase<IPlugin, PluginManager>.TryInitialize(IManageable, IPlugin) ManagerBase<IPlugin, PluginManager>.TryReady(IManageable, IPlugin) ManagerBase<IPlugin, PluginManager>.TryLoad(IManageable, IPlugin) ManagerBase<IPlugin, PluginManager>.TryUnload(IManageable, IPlugin) ManagerBase<IPlugin, PluginManager>.TryTerminate(IManageable, IPlugin) ManagerBase<IPlugin, PluginManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<IPlugin, PluginManager>.Add<TX>(IPlugin, bool) ManagerBase<IPlugin, PluginManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<IPlugin, PluginManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<IPlugin, PluginManager>.OnManageableAdded<TX>(IPlugin, IPlugin, bool) ManagerBase<IPlugin, PluginManager>.OnManageableRemoved<TX>(IPlugin, IPlugin) ManagerBase<IPlugin, PluginManager>.Remove<TX>(IPlugin) ManagerBase<IPlugin, PluginManager>.Remove<TX>(IPlugin, TX) ManagerBase<IPlugin, PluginManager>.Get<TX>(bool) ManagerBase<IPlugin, PluginManager>.Get(Type, bool) ManagerBase<IPlugin, PluginManager>.GetOrCreate<TX>(IPlugin) ManagerBase<IPlugin, PluginManager>.Has<TX>(bool) ManagerBase<IPlugin, PluginManager>.Has(Type, bool, bool) ManagerBase<IPlugin, PluginManager>.Has(string, bool, bool) ManagerBase<IPlugin, PluginManager>.Count() ManagerBase<IPlugin, PluginManager>.ForEach(Action<IPlugin>) ManagerBase<IPlugin, PluginManager>.GetList() ManagerBase<IPlugin, PluginManager>.Select(Func<KeyValuePair<Type, IPlugin>, IPlugin>) ManagerBase<IPlugin, PluginManager>.RequiredType() ManagerBase<IPlugin, PluginManager>.RequiredTypeName() ManagerBase<IPlugin, PluginManager>.GetManagedInfo() ManagerBase<IPlugin, PluginManager>.Equals(ManagerBase<IPlugin, PluginManager>) ManagerBase<IPlugin, PluginManager>.Equals(object) ManagerBase<IPlugin, PluginManager>.GetHashCode() ManagerBase<IPlugin, PluginManager>.DebugPrintAll(string) ManagerBase<IPlugin, PluginManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties ChainLoader Represents the chainloader for RisingV plugins, responsible for loading and managing plugin dependencies. public RisingVChainloader ChainLoader { get; } Property Value RisingVChainloader Log protected override Logger Log { get; } Property Value Logger Methods Add<TX>(TX) public void Add<TX>(TX plugin) where TX : IPlugin Parameters plugin TX Type Parameters TX AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) Automatically reloads manageable objects based on file changes. protected override void AutoReload(IReadOnlyList<FileChange> fileChanges, IPlugin plugin, bool force = false) Parameters fileChanges IReadOnlyList<FileChange> List of file changes that triggered the reload. plugin IPlugin The plugin that is reloading the manageable objects. force bool If true, forces the reload regardless of the file changes. CanAutoReloadAll(IReadOnlyList<FileChange>) protected override bool CanAutoReloadAll(IReadOnlyList<FileChange> fileChanges) Parameters fileChanges IReadOnlyList<FileChange> Returns bool"
  },
  "api/RisingV.Shared.Plugins.PluginTarget.html": {
    "href": "api/RisingV.Shared.Plugins.PluginTarget.html",
    "title": "Enum PluginTarget | RisingV.Shared",
    "summary": "Enum PluginTarget Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Represents the plugin target environments. public enum PluginTarget Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields Client = 0 DedicatedServer = 2 Server = 1"
  },
  "api/RisingV.Shared.Plugins.RisingPluginBase.html": {
    "href": "api/RisingV.Shared.Plugins.RisingPluginBase.html",
    "title": "Class RisingPluginBase | RisingV.Shared",
    "summary": "Class RisingPluginBase Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Base class for RisingV plugins. Example Usage: using BepInEx; using RisingV.Shared.Plugins; using RisingV.Shared.Engines; using RisingV.Core.Engines; public class MyCoolPluginConfig() : PluginConfig(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_GUID) { public ConfigEntry<float> AttackModifier { get; set; } = new(\"Gameplay\", \"AttackModifier\", 1f, \"Modifier for attack damage\"); } public class MyCoolPluginContext() : PluginContext(typeof(MyPluginInfo), new MyCoolPluginConfig()); [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)] [BepInDependency(\"gg.deca.VampireCommandFramework\")] [BepInDependency(\"RisingV.Core\")] [BepInDependency(\"RisingV.Scripting\")] public class Plugin : RisingPlugin<MyCoolPluginContext> { protected override void OnInitialize() { EngineManager.AddEngine<ScriptingEngine>(this); EngineManager.AddEngine<DamageEngine>(this); EngineManager.AddEngine<DeathEngine>(this); // You can also register other systems, databases, or processors here } protected override void OnLoad() { // Plugin startup logic (pre-initialization) } protected override bool OnUnload() { return true; } } public abstract class RisingPluginBase : IPlugin, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable<PluginManager>, IManageable, IReloadable<PluginManager>, IReloadable, IDisposable Inheritance object RisingPluginBase Implements IPlugin IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable<PluginManager> IManageable IReloadable<PluginManager> IReloadable IDisposable Derived RisingSharedPlugin<TContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors RisingPluginBase(PluginContext) Initializes a new instance of the RisingPluginBase class with the specified plugin context. public RisingPluginBase(PluginContext context) Parameters context PluginContext The context for the plugin, containing information about the plugin's configuration, target, and other details. Properties Composites A list of composite plugins that this plugin depends on or composes with. public List<IPlugin> Composites { get; } Property Value List<IPlugin> Context Context for the plugin, containing information about the plugin's configuration, target, and other details. public PluginContext Context { get; } Property Value PluginContext DatabaseManager Gets the DatabaseManager instance, which is responsible for managing databases within the plugin. public DatabaseManager DatabaseManager { get; } Property Value DatabaseManager EngineManager Gets the EngineManager instance, which is responsible for managing engines within the plugin. public EngineManager EngineManager { get; } Property Value EngineManager EventBus The event bus used for managing events within the plugin. This allows the plugin to publish and subscribe events. public ManagedEventBus EventBus { get; } Property Value ManagedEventBus Harmony The Harmony instance used for patching methods in the plugin. public Harmony Harmony { get; } Property Value Harmony Log protected Logger Log { get; } Property Value Logger PluginConfig Configuration for the plugin, if available. This can be used to access settings and options defined in the plugin's configuration file. public PluginConfig? PluginConfig { get; } Property Value PluginConfig PluginInfo Information about the plugin, such as its name, version, and GUID. public PluginInfo PluginInfo { get; } Property Value PluginInfo PluginTarget The target platform for the plugin, which can be either Client or DedicatedServer. This indicates where the plugin is intended to run. public PluginTarget PluginTarget { get; } Property Value PluginTarget ProcessorManager Gets the ProcessorManager instance, which is responsible for managing processors within the plugin. public ProcessorManager ProcessorManager { get; } Property Value ProcessorManager SystemManager Gets the SystemManager instance, which is responsible for managing systems within the plugin. public SystemManager SystemManager { get; } Property Value SystemManager Methods AddSharedComponent<T>(IPlugin, bool) Adds a shared component of the specified type to the plugin's shared components. public T? AddSharedComponent<T>(IPlugin plugin, bool failIfExists = true) where T : class, IPluginComponent Parameters plugin IPlugin The plugin that owns the shared component. failIfExists bool Throw an exception if the shared component already exists. Default: true Returns T Returns the added shared component of the specified type, or null if it could not be added. Type Parameters T The type of the shared component to add. Must implement IPluginComponent. AddSharedComponent<T>(IPlugin, T, bool) Adds a shared component of the specified type to the plugin's shared components. public void AddSharedComponent<T>(IPlugin plugin, T obj, bool failIfExists = true) where T : class, IPluginComponent Parameters plugin IPlugin The plugin that owns the shared component. obj T The shared component instance to add. failIfExists bool Throw an exception if the shared component already exists. Default: true Type Parameters T The type of the shared component to add. Must implement IPluginComponent. Dispose() Disposes of the plugin, cleaning up resources and unregistering events. public virtual void Dispose() GetSharedComponent(Type) Gets a shared component of the specified type from the plugin's shared components. public IPluginComponent? GetSharedComponent(Type type) Parameters type Type The type of the shared component to retrieve. Returns IPluginComponent Returns the shared component of the specified type, or null if it does not exist. Exceptions AccessViolationException Thrown if the plugin is not initialized when trying to get a shared component. GetSharedComponent<TX>() Gets a shared component of the specified type from the plugin's shared components. public TX? GetSharedComponent<TX>() where TX : class, IPluginComponent Returns TX Returns the shared component of the specified type, or null if it does not exist. Type Parameters TX The type of the shared component to retrieve. Must implement IPluginComponent. Exceptions AccessViolationException Thrown if the plugin is not initialized when trying to get a shared component. Load() Loads the plugin, initializing it and registering necessary components and events. public virtual void Load() OnGameDataInitialized(OnGameDataInitializedEvent) Called when the game data is initialized. This method is triggered by the EventBridge.OnGameDataInitializedEvent. protected void OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent @event) Parameters event EventBridge.OnGameDataInitializedEvent The event containing the initialized game data. OnInitialize() Called when the plugin is initialized (after OnPreLoad()). public virtual void OnInitialize() OnLoad() Called when the plugin is loaded (after OnInitialize()). public virtual void OnLoad() OnPluginsInitializing(OnPluginsInitializingEvent) Called when the plugins are initializing. This method is triggered by the EventBridge.OnPluginsInitializingEvent. Called after OnGameDataInitializedEvent, but before OnPluginsLoadingEvent. protected void OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent @event) Parameters event EventBridge.OnPluginsInitializingEvent The event containing the initialized game data. OnPluginsLoaded(OnPluginsLoadedEvent) Called when all the plugins are loaded. This method is triggered by the EventBridge.OnPluginsLoadedEvent. protected virtual void OnPluginsLoaded(EventBridge.OnPluginsLoadedEvent @event) Parameters event EventBridge.OnPluginsLoadedEvent The event containing the state of the plugins are loaded. OnPluginsLoading(OnPluginsLoadingEvent) Called when all the plugins are initialized and soft loaded. This method is triggered by the EventBridge.OnPluginsPartialLoadedEvent. protected void OnPluginsLoading(EventBridge.OnPluginsLoadingEvent @event) Parameters event EventBridge.OnPluginsLoadingEvent The event containing the state of the plugins initializing. OnPreLoad() Called when the BepInEx plugin Load is called. public virtual void OnPreLoad() OnReload(IManager, List<IPlugin>, ReloadReason) Called when the manager is reloaded. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. public bool OnReload(IManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager IManager plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop OnReload(PluginManager, List<IPlugin>, ReloadReason) Called when the manager is reloaded with a specific type. This can be used to handle any specific logic needed during a reload. This can also override the default reload behavior. public bool OnReload(PluginManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager PluginManager plugins List<IPlugin> reason ReloadReason Returns bool true to allow default reload behaviour, false to stop OnUnload() Called when the plugin is unloaded. public virtual bool OnUnload() Returns bool Reload(PluginManager, ReloadReason) public void Reload(PluginManager manager, ReloadReason reason) Parameters manager PluginManager reason ReloadReason Reload(PluginManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public void Reload(PluginManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager PluginManager plugins List<IPlugin> reason ReloadReason SetupConfiguration(PluginConfig?) Sets up the plugin configuration. This method can be overridden by derived classes public void SetupConfiguration(PluginConfig? pluginConfig) Parameters pluginConfig PluginConfig The plugin configuration to set up. SetupSharedEventBus(ManagedEventBus) Sets up the shared event bus for the plugin. This method can be overridden by derived classes public void SetupSharedEventBus(ManagedEventBus eventBus) Parameters eventBus ManagedEventBus The event bus to set up. Unload() Unloads the plugin, unregistering events and cleaning up resources. public virtual bool Unload() Returns bool Returns true if the plugin was successfully unloaded, otherwise false."
  },
  "api/RisingV.Shared.Plugins.RisingSharedPlugin-1.html": {
    "href": "api/RisingV.Shared.Plugins.RisingSharedPlugin-1.html",
    "title": "Class RisingSharedPlugin<TContext> | RisingV.Shared",
    "summary": "Class RisingSharedPlugin<TContext> Namespace RisingV.Shared.Plugins Assembly RisingV.Shared.dll Base class for shared RisingV plugins with a specific context. public class RisingSharedPlugin<TContext> : RisingPluginBase, IPlugin<TContext>, IPlugin, IManageable<PluginManager>, IReloadable<PluginManager>, IReloadable, IDisposable, IHasPluginContext<TContext>, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable where TContext : PluginContext Type Parameters TContext The type of the plugin context, which must inherit from PluginContext. Inheritance object RisingPluginBase RisingSharedPlugin<TContext> Implements IPlugin<TContext> IPlugin IManageable<PluginManager> IReloadable<PluginManager> IReloadable IDisposable IHasPluginContext<TContext> IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Derived BootstrapPlugin Inherited Members RisingPluginBase.PluginInfo RisingPluginBase.PluginConfig RisingPluginBase.PluginTarget RisingPluginBase.Harmony RisingPluginBase.EventBus RisingPluginBase.SystemManager RisingPluginBase.ProcessorManager RisingPluginBase.DatabaseManager RisingPluginBase.EngineManager RisingPluginBase.Composites RisingPluginBase.Log RisingPluginBase.OnPreLoad() RisingPluginBase.OnInitialize() RisingPluginBase.OnLoad() RisingPluginBase.OnUnload() RisingPluginBase.Load() RisingPluginBase.OnReload(IManager, List<IPlugin>, ReloadReason) RisingPluginBase.Unload() RisingPluginBase.OnReload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, List<IPlugin>, ReloadReason) RisingPluginBase.Reload(PluginManager, ReloadReason) RisingPluginBase.OnGameDataInitialized(EventBridge.OnGameDataInitializedEvent) RisingPluginBase.OnPluginsInitializing(EventBridge.OnPluginsInitializingEvent) RisingPluginBase.OnPluginsLoading(EventBridge.OnPluginsLoadingEvent) RisingPluginBase.SetupConfiguration(PluginConfig) RisingPluginBase.SetupSharedEventBus(ManagedEventBus) RisingPluginBase.GetSharedComponent(Type) RisingPluginBase.GetSharedComponent<TX>() RisingPluginBase.AddSharedComponent<T>(IPlugin, bool) RisingPluginBase.AddSharedComponent<T>(IPlugin, T, bool) RisingPluginBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors RisingSharedPlugin() public RisingSharedPlugin() RisingSharedPlugin(TContext) public RisingSharedPlugin(TContext context) Parameters context TContext Properties Context Gets the context for the plugin, which contains information about the plugin's configuration, target, and other details. public TContext Context { get; } Property Value TContext Methods Get() Gets the current instance of the RisingPlugin. public static RisingSharedPlugin<TContext>? Get() Returns RisingSharedPlugin<TContext> Returns the current instance of the RisingPlugin, or null if it has not been initialized. Get<TX>() Gets the current instance of the RisingPlugin as a specific type. public static TX Get<TX>() where TX : RisingSharedPlugin<TContext> Returns TX Returns the current instance of the RisingPlugin as the specified type, or throws an exception if it is not loaded. Type Parameters TX The type of the plugin to retrieve, which must inherit from RisingSharedPlugin<TContext>. Exceptions InvalidOperationException Thrown if the plugin of the specified type is not loaded. OnPluginsLoaded(OnPluginsLoadedEvent) Called when all the plugins are loaded. This method is triggered by the EventBridge.OnPluginsLoadedEvent. protected override void OnPluginsLoaded(EventBridge.OnPluginsLoadedEvent @event) Parameters event EventBridge.OnPluginsLoadedEvent The event containing the state of the plugins are loaded."
  },
  "api/RisingV.Shared.Plugins.html": {
    "href": "api/RisingV.Shared.Plugins.html",
    "title": "Namespace RisingV.Shared.Plugins | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Plugins Classes PluginComponentsManager Manages shared components across plugins. PluginConfig Represents a plugin configuration class. PluginConfigManager Manages plugin configurations. PluginContext Represents the context for a plugin, providing access to plugin information, configuration, and Harmony instance. PluginInfo Represents information about a plugin. PluginManager Manages plugins in the RisingV framework. RisingPluginBase Base class for RisingV plugins. Example Usage: using BepInEx; using RisingV.Shared.Plugins; using RisingV.Shared.Engines; using RisingV.Core.Engines; public class MyCoolPluginConfig() : PluginConfig(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_GUID) { public ConfigEntry<float> AttackModifier { get; set; } = new(\"Gameplay\", \"AttackModifier\", 1f, \"Modifier for attack damage\"); } public class MyCoolPluginContext() : PluginContext(typeof(MyPluginInfo), new MyCoolPluginConfig()); [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)] [BepInDependency(\"gg.deca.VampireCommandFramework\")] [BepInDependency(\"RisingV.Core\")] [BepInDependency(\"RisingV.Scripting\")] public class Plugin : RisingPlugin<MyCoolPluginContext> { protected override void OnInitialize() { EngineManager.AddEngine<ScriptingEngine>(this); EngineManager.AddEngine<DamageEngine>(this); EngineManager.AddEngine<DeathEngine>(this); // You can also register other systems, databases, or processors here } protected override void OnLoad() { // Plugin startup logic (pre-initialization) } protected override bool OnUnload() { return true; } } RisingSharedPlugin<TContext> Base class for shared RisingV plugins with a specific context. Interfaces IHasPlugin Represents an interface for objects that have a plugin associated with them. IHasPluginContext<T> Represents a plugin context that provides access to a specific type of plugin context. IHasPlugin<T> Represents an interface for objects that have a plugin associated with them, with a specific plugin type. IPlugin Represents a plugin in the RisingV framework. IPluginComponent Represents a component of a plugin that can be managed by the PluginComponentsManager. IPluginConfig Represents a plugin configuration interface. IPluginContext Represents the context in which a plugin operates. IPlugin<T> Represents a plugin in the RisingV framework with a specific plugin context. Enums PluginInfoType Represents the type of plugin information. PluginTarget Represents the plugin target environments."
  },
  "api/RisingV.Shared.Processors.DefaultProcessor-1.html": {
    "href": "api/RisingV.Shared.Processors.DefaultProcessor-1.html",
    "title": "Class DefaultProcessor<T> | RisingV.Shared",
    "summary": "Class DefaultProcessor<T> Namespace RisingV.Shared.Processors Assembly RisingV.Shared.dll Represents a default processor that processes data of type T and returns a nullable boolean value. public abstract class DefaultProcessor<T> : ProcessorBase<T, bool?>, IProcessor<T, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Type Parameters T The type of data to be processed. Inheritance object ProcessorBase<T, bool?> DefaultProcessor<T> Implements IProcessor<T, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members ProcessorBase<T, bool?>.CanProcess(T, bool) ProcessorBase<T, bool?>.PreProcess(T, out bool?) ProcessorBase<T, bool?>.PostProcess(T, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Processors.IProcessor-2.html": {
    "href": "api/RisingV.Shared.Processors.IProcessor-2.html",
    "title": "Interface IProcessor<T, TR> | RisingV.Shared",
    "summary": "Interface IProcessor<T, TR> Namespace RisingV.Shared.Processors Assembly RisingV.Shared.dll Represents a processor that can handle events of type T and return a result of type TR. public interface IProcessor<in T, TR> : IProcessor, IManageable<ProcessorManager>, IManageable Type Parameters T The type of the event to process. TR The type of the result produced by the processing. Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods CanProcess(T, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. bool CanProcess(T @event, bool isPost) Parameters event T The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. PostProcess(T, out TR?) Processes the given event and returns a token indicating the processing result. ProcessToken PostProcess(T @event, out TR? result) Parameters event T The event to process. result TR An output parameter that will hold the result of the processing. Returns ProcessToken A token indicating the processing result."
  },
  "api/RisingV.Shared.Processors.IProcessor.html": {
    "href": "api/RisingV.Shared.Processors.IProcessor.html",
    "title": "Interface IProcessor | RisingV.Shared",
    "summary": "Interface IProcessor Namespace RisingV.Shared.Processors Assembly RisingV.Shared.dll Represents a processor that can handle events and manage post-processing. public interface IProcessor : IManageable<ProcessorManager>, IManageable Extension Methods EntityExtensions.IsAspect<TAspect>(object)"
  },
  "api/RisingV.Shared.Processors.ProcessToken.html": {
    "href": "api/RisingV.Shared.Processors.ProcessToken.html",
    "title": "Enum ProcessToken | RisingV.Shared",
    "summary": "Enum ProcessToken Namespace RisingV.Shared.Processors Assembly RisingV.Shared.dll Represents the possible outcomes of a process token. public enum ProcessToken Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields Cancel = 2 Indicates that the process should be cancelled, and no further processing should occur. Continue = 0 Indicates that the process should continue as normal. Skip = 1 Indicates that the process should be skipped, and no further processing should occur."
  },
  "api/RisingV.Shared.Processors.ProcessorBase-2.html": {
    "href": "api/RisingV.Shared.Processors.ProcessorBase-2.html",
    "title": "Class ProcessorBase<T, TR> | RisingV.Shared",
    "summary": "Class ProcessorBase<T, TR> Namespace RisingV.Shared.Processors Assembly RisingV.Shared.dll Base class for processors that handle events of type T and produce results of type TR. public abstract class ProcessorBase<T, TR> : IProcessor<T, TR>, IProcessor, IManageable<ProcessorManager>, IManageable Type Parameters T The type of the event to process. TR The type of the result produced by the processing. Inheritance object ProcessorBase<T, TR> Implements IProcessor<T, TR> IProcessor IManageable<ProcessorManager> IManageable Derived DefaultProcessor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods CanProcess(T, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public abstract bool CanProcess(T @event, bool isPost) Parameters event T The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. PostProcess(T, out TR?) Processes the given event and returns a token indicating the processing result. public virtual ProcessToken PostProcess(T @event, out TR? result) Parameters event T The event to process. result TR An output parameter that will hold the result of the processing. Returns ProcessToken A token indicating the processing result. PreProcess(T, out TR?) Pre-process the event before it is processed. public virtual ProcessToken PreProcess(T @event, out TR? result) Parameters event T The event to process. result TR The result of the processing. Returns ProcessToken A token indicating whether to continue processing or not."
  },
  "api/RisingV.Shared.Processors.ProcessorManager.html": {
    "href": "api/RisingV.Shared.Processors.ProcessorManager.html",
    "title": "Class ProcessorManager | RisingV.Shared",
    "summary": "Class ProcessorManager Namespace RisingV.Shared.Processors Assembly RisingV.Shared.dll Manages the processors in the plugin system. public class ProcessorManager : TypeMapManager<IProcessor, ProcessorManager>, IManager<IProcessor, ProcessorManager>, IManager, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object ManagerBase<IProcessor, ProcessorManager> TypeMapManager<IProcessor, ProcessorManager> ProcessorManager Implements IManager<IProcessor, ProcessorManager> IManager IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members ManagerBase<IProcessor, ProcessorManager>.InitializedMap ManagerBase<IProcessor, ProcessorManager>.LoadedMap ManagerBase<IProcessor, ProcessorManager>.ReadyMap ManagerBase<IProcessor, ProcessorManager>.ReloadingMap ManagerBase<IProcessor, ProcessorManager>.PluginsMap ManagerBase<IProcessor, ProcessorManager>.Log ManagerBase<IProcessor, ProcessorManager>.AllowAutoReload ManagerBase<IProcessor, ProcessorManager>.UnsubscribeEventsOnRemoval ManagerBase<IProcessor, ProcessorManager>.IsInitialized ManagerBase<IProcessor, ProcessorManager>.IsLoaded ManagerBase<IProcessor, ProcessorManager>.IsReady ManagerBase<IProcessor, ProcessorManager>.IsFullReloading ManagerBase<IProcessor, ProcessorManager>.IsEnabled(IManageable) ManagerBase<IProcessor, ProcessorManager>.IsEnabled<TX>(TX) ManagerBase<IProcessor, ProcessorManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<IProcessor, ProcessorManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<IProcessor, ProcessorManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<IProcessor, ProcessorManager>.Initialize(IPlugin) ManagerBase<IProcessor, ProcessorManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<IProcessor, ProcessorManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<IProcessor, ProcessorManager>.Ready(IPlugin) ManagerBase<IProcessor, ProcessorManager>.Load(IPlugin) ManagerBase<IProcessor, ProcessorManager>.Unload(IPlugin) ManagerBase<IProcessor, ProcessorManager>.Reload(ReloadReason) ManagerBase<IProcessor, ProcessorManager>.Reload(IPlugin, ReloadReason) ManagerBase<IProcessor, ProcessorManager>.OnReload(IPlugin, ReloadReason) ManagerBase<IProcessor, ProcessorManager>.Terminate(IPlugin) ManagerBase<IProcessor, ProcessorManager>.TryInitialize(IManageable, IPlugin) ManagerBase<IProcessor, ProcessorManager>.TryReady(IManageable, IPlugin) ManagerBase<IProcessor, ProcessorManager>.TryLoad(IManageable, IPlugin) ManagerBase<IProcessor, ProcessorManager>.TryUnload(IManageable, IPlugin) ManagerBase<IProcessor, ProcessorManager>.TryTerminate(IManageable, IPlugin) ManagerBase<IProcessor, ProcessorManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<IProcessor, ProcessorManager>.Add<TX>(IPlugin, bool) ManagerBase<IProcessor, ProcessorManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<IProcessor, ProcessorManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<IProcessor, ProcessorManager>.OnManageableAdded<TX>(IPlugin, IProcessor, bool) ManagerBase<IProcessor, ProcessorManager>.OnManageableRemoved<TX>(IPlugin, IProcessor) ManagerBase<IProcessor, ProcessorManager>.Remove<TX>(IPlugin) ManagerBase<IProcessor, ProcessorManager>.Remove<TX>(IPlugin, TX) ManagerBase<IProcessor, ProcessorManager>.Get<TX>(bool) ManagerBase<IProcessor, ProcessorManager>.Get(Type, bool) ManagerBase<IProcessor, ProcessorManager>.GetOrCreate<TX>(IPlugin) ManagerBase<IProcessor, ProcessorManager>.Has<TX>(bool) ManagerBase<IProcessor, ProcessorManager>.Has(Type, bool, bool) ManagerBase<IProcessor, ProcessorManager>.Has(string, bool, bool) ManagerBase<IProcessor, ProcessorManager>.Count() ManagerBase<IProcessor, ProcessorManager>.ForEach(Action<IProcessor>) ManagerBase<IProcessor, ProcessorManager>.GetList() ManagerBase<IProcessor, ProcessorManager>.Select(Func<KeyValuePair<Type, IProcessor>, IProcessor>) ManagerBase<IProcessor, ProcessorManager>.RequiredType() ManagerBase<IProcessor, ProcessorManager>.RequiredTypeName() ManagerBase<IProcessor, ProcessorManager>.GetManagedInfo() ManagerBase<IProcessor, ProcessorManager>.Equals(ManagerBase<IProcessor, ProcessorManager>) ManagerBase<IProcessor, ProcessorManager>.Equals(object) ManagerBase<IProcessor, ProcessorManager>.GetHashCode() ManagerBase<IProcessor, ProcessorManager>.DebugPrintAll(string) ManagerBase<IProcessor, ProcessorManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Log protected override Logger Log { get; } Property Value Logger Methods AddProcessor<T>(IPlugin, bool) public T? AddProcessor<T>(IPlugin plugin, bool failIfExists = true) where T : IProcessor Parameters plugin IPlugin failIfExists bool Returns T Type Parameters T AddProcessor<T>(IPlugin, T, bool) public void AddProcessor<T>(IPlugin plugin, T system, bool failIfExists = true) where T : IProcessor Parameters plugin IPlugin system T failIfExists bool Type Parameters T GetProcessor<T>(bool) public T? GetProcessor<T>(bool required = true) where T : IProcessor Parameters required bool Returns T Type Parameters T RemoveProcessor<T>(IPlugin) public void RemoveProcessor<T>(IPlugin plugin) where T : IProcessor Parameters plugin IPlugin Type Parameters T"
  },
  "api/RisingV.Shared.Processors.html": {
    "href": "api/RisingV.Shared.Processors.html",
    "title": "Namespace RisingV.Shared.Processors | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Processors Classes DefaultProcessor<T> Represents a default processor that processes data of type T and returns a nullable boolean value. ProcessorBase<T, TR> Base class for processors that handle events of type T and produce results of type TR. ProcessorManager Manages the processors in the plugin system. Interfaces IProcessor Represents a processor that can handle events and manage post-processing. IProcessor<T, TR> Represents a processor that can handle events of type T and return a result of type TR. Enums ProcessToken Represents the possible outcomes of a process token."
  },
  "api/RisingV.Shared.RangeInt.html": {
    "href": "api/RisingV.Shared.RangeInt.html",
    "title": "Class RangeInt | RisingV.Shared",
    "summary": "Class RangeInt Namespace RisingV.Shared Assembly RisingV.Shared.dll Represents a range of integers with a minimum and maximum value. public class RangeInt Inheritance object RangeInt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors RangeInt() public RangeInt() RangeInt(int) public RangeInt(int max) Parameters max int RangeInt(int, int) public RangeInt(int min, int max) Parameters min int max int Properties Max public int Max { get; set; } Property Value int Min public int Min { get; set; } Property Value int Methods SelectRandom() Selects a random integer within the range defined by Min and Max. public int SelectRandom() Returns int ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/RisingV.Shared.Reloading.PluginInfo.html": {
    "href": "api/RisingV.Shared.Reloading.PluginInfo.html",
    "title": "Class PluginInfo | RisingV.Shared",
    "summary": "Class PluginInfo Namespace RisingV.Shared.Reloading Assembly RisingV.Shared.dll public class PluginInfo : PluginInfo, ICacheable Inheritance object PluginInfo PluginInfo Implements ICacheable Inherited Members PluginInfo.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors PluginInfo() public PluginInfo() PluginInfo(PluginInfo) public PluginInfo(PluginInfo pluginInfo) Parameters pluginInfo PluginInfo Properties Dependencies Collection of BepInEx.BepInDependency attributes that describe what plugins this plugin depends on. public IEnumerable<BepInDependency> Dependencies { get; } Property Value IEnumerable<BepInDependency> Incompatibilities Collection of BepInEx.BepInIncompatibility attributes that describe what plugins this plugin is incompatible with. public IEnumerable<BepInIncompatibility> Incompatibilities { get; } Property Value IEnumerable<BepInIncompatibility> Instance Instance of the plugin that represents this info. NULL if no plugin is instantiated from info (yet) public object Instance { get; } Property Value object Location File path to the plugin DLL public string Location { get; } Property Value string Metadata General metadata about a plugin. public BepInPlugin Metadata { get; } Property Value BepInPlugin Processes Collection of BepInEx.BepInProcess attributes that describe what processes the plugin can run on. public IEnumerable<BepInProcess> Processes { get; } Property Value IEnumerable<BepInProcess> TypeName public string TypeName { get; } Property Value string Methods Equals(PluginInfo) protected bool Equals(PluginInfo other) Parameters other PluginInfo Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/RisingV.Shared.Reloading.RisingVChainloader.html": {
    "href": "api/RisingV.Shared.Reloading.RisingVChainloader.html",
    "title": "Class RisingVChainloader | RisingV.Shared",
    "summary": "Class RisingVChainloader Namespace RisingV.Shared.Reloading Assembly RisingV.Shared.dll public class RisingVChainloader Inheritance object RisingVChainloader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods LoadPlugin(PluginInfo) public PluginInfo LoadPlugin(PluginInfo pluginInfo) Parameters pluginInfo PluginInfo Returns PluginInfo LoadPlugins(string) public IList<PluginInfo> LoadPlugins(string pluginsPath) Parameters pluginsPath string Returns IList<PluginInfo> UnloadPlugin(int, string) public (bool, PluginInfo?, HashSet<PluginInfo>) UnloadPlugin(int index, string pluginGuid) Parameters index int pluginGuid string Returns (bool, PluginInfo, HashSet<PluginInfo>) UnloadPlugin(string) public (bool, PluginInfo?, HashSet<PluginInfo>) UnloadPlugin(string pluginGuid) Parameters pluginGuid string Returns (bool, PluginInfo, HashSet<PluginInfo>) UnloadPlugins() public void UnloadPlugins()"
  },
  "api/RisingV.Shared.Reloading.html": {
    "href": "api/RisingV.Shared.Reloading.html",
    "title": "Namespace RisingV.Shared.Reloading | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Reloading Classes PluginInfo RisingVChainloader"
  },
  "api/RisingV.Shared.SharedPluginConfig.html": {
    "href": "api/RisingV.Shared.SharedPluginConfig.html",
    "title": "Class SharedPluginConfig | RisingV.Shared",
    "summary": "Class SharedPluginConfig Namespace RisingV.Shared Assembly RisingV.Shared.dll public class SharedPluginConfig : PluginConfig, IPluginConfig, IConfig, IManageableLifecycle<PluginConfigManager>, IManageableLifecycle, IReloadable, IManageable<PluginConfigManager>, IManageable Inheritance object BaseConfig PluginConfig SharedPluginConfig Implements IPluginConfig IConfig IManageableLifecycle<PluginConfigManager> IManageableLifecycle IReloadable IManageable<PluginConfigManager> IManageable Inherited Members PluginConfig.RegisterCommands PluginConfig.DependencyAutoLoad PluginConfig.HotReload PluginConfig.AutoLoadEngines PluginConfig.Log PluginConfig.Initialize(PluginConfigManager, List<IPlugin>) PluginConfig.Load(PluginConfigManager, List<IPlugin>) PluginConfig.Ready(PluginConfigManager, List<IPlugin>) PluginConfig.Unload(PluginConfigManager, List<IPlugin>) PluginConfig.Terminate(PluginConfigManager, List<IPlugin>) PluginConfig.Reload(PluginConfigManager, List<IPlugin>, ReloadReason) PluginConfig.ToString() BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SharedPluginConfig() public SharedPluginConfig() Properties ActiveLogLevels public ConfigEntry<LogLevel>? ActiveLogLevels { get; } Property Value ConfigEntry<LogLevel> ActiveLogTags public ConfigEntry<LogTag[]>? ActiveLogTags { get; } Property Value ConfigEntry<LogTag[]> DevelopmentMode public ConfigEntry<bool>? DevelopmentMode { get; } Property Value ConfigEntry<bool> DumpUnqualifiedAspectEntities public ConfigEntry<bool>? DumpUnqualifiedAspectEntities { get; } Property Value ConfigEntry<bool> InactiveLogTags public ConfigEntry<LogTag[]>? InactiveLogTags { get; } Property Value ConfigEntry<LogTag[]> ObserveConfigChanges public ConfigEntry<bool>? ObserveConfigChanges { get; } Property Value ConfigEntry<bool> Methods Load() public override void Load()"
  },
  "api/RisingV.Shared.Suggestions.html": {
    "href": "api/RisingV.Shared.Suggestions.html",
    "title": "Class Suggestions | RisingV.Shared",
    "summary": "Class Suggestions Namespace RisingV.Shared Assembly RisingV.Shared.dll Provides methods to generate suggestions for adding various components to plugins. public class Suggestions Inheritance object Suggestions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods ConsiderDatabase(string) Suggests adding a database to a plugin's OnInitialize method. public static string ConsiderDatabase(string databaseName) Parameters databaseName string The name of the database to suggest. Returns string A suggestion string for adding the database. ConsiderEngine(string) Suggests adding an engine to a plugin's OnInitialize method. public static string ConsiderEngine(string engineName) Parameters engineName string The name of the engine to suggest. Returns string A suggestion string for adding the engine. ConsiderProcessor(string) Suggests adding a processor to a plugin's OnInitialize method. public static string ConsiderProcessor(string processorName) Parameters processorName string The name of the processor to suggest. Returns string A suggestion string for adding the processor. ConsiderSystem(string) Suggests adding a system to a plugin's OnInitialize method. public static string ConsiderSystem(string systemName) Parameters systemName string The name of the system to suggest. Returns string A suggestion string for adding the system."
  },
  "api/RisingV.Shared.Systems.IStageSystem.html": {
    "href": "api/RisingV.Shared.Systems.IStageSystem.html",
    "title": "Interface IStageSystem | RisingV.Shared",
    "summary": "Interface IStageSystem Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll public interface IStageSystem : ITickSystem, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inherited Members ITickSystem.Update(float) ISystem.Config ISystem.Enabled IManageableLifecycle<SystemManager>.Initialize(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Load(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Unload(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Ready(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Terminate(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Reload(SystemManager, List<IPlugin>, ReloadReason) IManageableLifecycle<SystemManager>.OnReload(SystemManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods PostUpdate(float) void PostUpdate(float dt) Parameters dt float PreUpdate(float) void PreUpdate(float dt) Parameters dt float"
  },
  "api/RisingV.Shared.Systems.ISystem.html": {
    "href": "api/RisingV.Shared.Systems.ISystem.html",
    "title": "Interface ISystem | RisingV.Shared",
    "summary": "Interface ISystem Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll Represents a system in the plugin system that can be managed by the SystemManager. public interface ISystem : IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inherited Members IManageableLifecycle<SystemManager>.Initialize(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Load(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Unload(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Ready(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Terminate(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Reload(SystemManager, List<IPlugin>, ReloadReason) IManageableLifecycle<SystemManager>.OnReload(SystemManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Config Gets the configuration for the system. ISystemConfig? Config { get; } Property Value ISystemConfig Enabled Gets a value indicating whether the system is enabled. bool Enabled { get; } Property Value bool"
  },
  "api/RisingV.Shared.Systems.ISystemConfig.html": {
    "href": "api/RisingV.Shared.Systems.ISystemConfig.html",
    "title": "Interface ISystemConfig | RisingV.Shared",
    "summary": "Interface ISystemConfig Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll Represents a system configuration interface. public interface ISystemConfig : IConfig Inherited Members IConfig.ConfigRelativePath IConfig.ConfigFileName IConfig.ConfigFile IConfig.Initialize() IConfig.Load() IConfig.Ready() IConfig.Unload() IConfig.Terminate() IConfig.Reload(ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Properties Enabled Gets the configuration entry that indicates whether the system is enabled. ConfigEntry<bool>? Enabled { get; } Property Value ConfigEntry<bool>"
  },
  "api/RisingV.Shared.Systems.ITickSystem.html": {
    "href": "api/RisingV.Shared.Systems.ITickSystem.html",
    "title": "Interface ITickSystem | RisingV.Shared",
    "summary": "Interface ITickSystem Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll public interface ITickSystem : ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inherited Members ISystem.Config ISystem.Enabled IManageableLifecycle<SystemManager>.Initialize(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Load(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Unload(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Ready(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Terminate(SystemManager, List<IPlugin>) IManageableLifecycle<SystemManager>.Reload(SystemManager, List<IPlugin>, ReloadReason) IManageableLifecycle<SystemManager>.OnReload(SystemManager, List<IPlugin>, ReloadReason) IManageableLifecycle.Initialize(IManager) IManageableLifecycle.Initialize(IManager, List<IPlugin>) IManageableLifecycle.Load(IManager) IManageableLifecycle.Load(IManager, List<IPlugin>) IManageableLifecycle.Unload(IManager) IManageableLifecycle.Unload(IManager, List<IPlugin>) IManageableLifecycle.Ready(IManager) IManageableLifecycle.Ready(IManager, List<IPlugin>) IManageableLifecycle.Terminate(IManager) IManageableLifecycle.Terminate(IManager, List<IPlugin>) IReloadable.Reload(IManager, ReloadReason) IReloadable.Reload(IManager, List<IPlugin>, ReloadReason) IReloadable.OnReload(IManager, List<IPlugin>, ReloadReason) Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Update(float) void Update(float deltaTime) Parameters deltaTime float"
  },
  "api/RisingV.Shared.Systems.InternalSystems.html": {
    "href": "api/RisingV.Shared.Systems.InternalSystems.html",
    "title": "Class InternalSystems | RisingV.Shared",
    "summary": "Class InternalSystems Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll A collection of internal systems that are used by the server. public class InternalSystems Inheritance object InternalSystems Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors InternalSystems(World) A collection of internal systems that are used by the server. public InternalSystems(World world) Parameters world World The world instance to retrieve systems from. Properties ClientScriptMapper Gets the ClientScriptMapper system from the world. public ClientScriptMapper ClientScriptMapper { get; } Property Value ClientScriptMapper DebugEventsSystem Gets the DebugEventsSystem system from the world. public DebugEventsSystem DebugEventsSystem { get; } Property Value DebugEventsSystem GameDataManager Gets the GameDataManager system from the world. public GameDataManager GameDataManager { get; } Property Value GameDataManager GameDataSystem Gets the GameDataSystem system from the world. public GameDataSystem GameDataSystem { get; } Property Value GameDataSystem LoadPersistenceSystem Gets the ProjectM.LoadPersistenceSystemV2 system from the world. public LoadPersistenceSystemV2 LoadPersistenceSystem { get; } Property Value LoadPersistenceSystemV2 ManagedDataSystem Gets the ManagedDataSystem system from the world. public ManagedDataSystem ManagedDataSystem { get; } Property Value ManagedDataSystem NetworkIdSystem Gets the ProjectM.Network.NetworkIdSystem.Singleton singleton from the world. public NetworkIdSystem.Singleton NetworkIdSystem { get; } Property Value NetworkIdSystem.Singleton PrefabCollectionSystem Gets the PrefabCollectionSystem system from the world. public PrefabCollectionSystem PrefabCollectionSystem { get; } Property Value PrefabCollectionSystem ServerScriptMapper Gets the ServerScriptMapper system from the world. public ServerScriptMapper ServerScriptMapper { get; } Property Value ServerScriptMapper TutorialSystem Gets the TutorialSystem system from the world. public TutorialSystem TutorialSystem { get; } Property Value TutorialSystem"
  },
  "api/RisingV.Shared.Systems.System-1.html": {
    "href": "api/RisingV.Shared.Systems.System-1.html",
    "title": "Class System<TConfig> | RisingV.Shared",
    "summary": "Class System<TConfig> Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll Represents a system with a strongly typed configuration. public abstract class System<TConfig> : System, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable where TConfig : class, ISystemConfig Type Parameters TConfig The type of the system configuration, which must implement ISystemConfig. Inheritance object System System<TConfig> Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System.Enabled System.Initialize(SystemManager, List<IPlugin>) System.Load(SystemManager, List<IPlugin>) System.Ready(SystemManager, List<IPlugin>) System.Terminate(SystemManager, List<IPlugin>) System.Unload(SystemManager, List<IPlugin>) System.Reload(SystemManager, List<IPlugin>, ReloadReason) System.OnEnable() System.OnDisable() System.SetEnabled(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors System(TConfig?) Represents a system with a strongly typed configuration. protected System(TConfig? config = null) Parameters config TConfig The configuration for the system. Properties Config public TConfig Config { get; } Property Value TConfig"
  },
  "api/RisingV.Shared.Systems.System.html": {
    "href": "api/RisingV.Shared.Systems.System.html",
    "title": "Class System | RisingV.Shared",
    "summary": "Class System Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll Represents a base class for systems public abstract class System : ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Derived System<TConfig> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors System(ISystemConfig?) Represents a base class for systems protected System(ISystemConfig? config = null) Parameters config ISystemConfig The configuration for the system. Properties Config Gets the configuration for the system. public ISystemConfig? Config { get; } Property Value ISystemConfig Enabled Gets a value indicating whether the system is enabled. public bool Enabled { get; } Property Value bool Methods Initialize(SystemManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public virtual void Initialize(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Load(SystemManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public virtual void Load(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() Ready(SystemManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public virtual void Ready(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Reload(SystemManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public virtual void Reload(SystemManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager SystemManager plugins List<IPlugin> reason ReloadReason SetEnabled(bool) public virtual void SetEnabled(bool enabled) Parameters enabled bool Terminate(SystemManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public virtual void Terminate(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Unload(SystemManager, List<IPlugin>) Unloads the manager and its dependencies with a specific type. public virtual void Unload(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin>"
  },
  "api/RisingV.Shared.Systems.SystemConfig.html": {
    "href": "api/RisingV.Shared.Systems.SystemConfig.html",
    "title": "Class SystemConfig | RisingV.Shared",
    "summary": "Class SystemConfig Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll Represents a system configuration class that provides configuration settings for systems in the plugin system. public class SystemConfig : BaseConfig, ISystemConfig, IConfig Inheritance object BaseConfig SystemConfig Implements ISystemConfig IConfig Inherited Members BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors SystemConfig(string, string) Represents a system configuration class that provides configuration settings for systems in the plugin system. public SystemConfig(string configFileName, string configRelativePath) Parameters configFileName string The name of the configuration file. configRelativePath string The relative path to the configuration directory. Properties Log protected override Logger Log { get; } Property Value Logger"
  },
  "api/RisingV.Shared.Systems.SystemManager.html": {
    "href": "api/RisingV.Shared.Systems.SystemManager.html",
    "title": "Class SystemManager | RisingV.Shared",
    "summary": "Class SystemManager Namespace RisingV.Shared.Systems Assembly RisingV.Shared.dll Manages systems within the application. public class SystemManager : TypeMapManager<ISystem, SystemManager>, IManager<ISystem, SystemManager>, IManager, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object ManagerBase<ISystem, SystemManager> TypeMapManager<ISystem, SystemManager> SystemManager Implements IManager<ISystem, SystemManager> IManager IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members ManagerBase<ISystem, SystemManager>.InitializedMap ManagerBase<ISystem, SystemManager>.LoadedMap ManagerBase<ISystem, SystemManager>.ReadyMap ManagerBase<ISystem, SystemManager>.ReloadingMap ManagerBase<ISystem, SystemManager>.PluginsMap ManagerBase<ISystem, SystemManager>.Log ManagerBase<ISystem, SystemManager>.AllowAutoReload ManagerBase<ISystem, SystemManager>.UnsubscribeEventsOnRemoval ManagerBase<ISystem, SystemManager>.IsInitialized ManagerBase<ISystem, SystemManager>.IsLoaded ManagerBase<ISystem, SystemManager>.IsReady ManagerBase<ISystem, SystemManager>.IsFullReloading ManagerBase<ISystem, SystemManager>.IsEnabled(IManageable) ManagerBase<ISystem, SystemManager>.IsEnabled<TX>(TX) ManagerBase<ISystem, SystemManager>.GetDependentPlugins(Type, params IPlugin[]) ManagerBase<ISystem, SystemManager>.GetDependentPlugins(params IPlugin[]) ManagerBase<ISystem, SystemManager>.AssignDependentPlugins(Type, List<IPlugin>) ManagerBase<ISystem, SystemManager>.Initialize(IPlugin) ManagerBase<ISystem, SystemManager>.CanAutoReloadAll(IReadOnlyList<FileChange>) ManagerBase<ISystem, SystemManager>.AutoReload(IReadOnlyList<FileChange>, IPlugin, bool) ManagerBase<ISystem, SystemManager>.Ready(IPlugin) ManagerBase<ISystem, SystemManager>.Load(IPlugin) ManagerBase<ISystem, SystemManager>.Unload(IPlugin) ManagerBase<ISystem, SystemManager>.Reload(ReloadReason) ManagerBase<ISystem, SystemManager>.Reload(IPlugin, ReloadReason) ManagerBase<ISystem, SystemManager>.OnReload(IPlugin, ReloadReason) ManagerBase<ISystem, SystemManager>.Terminate(IPlugin) ManagerBase<ISystem, SystemManager>.TryInitialize(IManageable, IPlugin) ManagerBase<ISystem, SystemManager>.TryReady(IManageable, IPlugin) ManagerBase<ISystem, SystemManager>.TryLoad(IManageable, IPlugin) ManagerBase<ISystem, SystemManager>.TryUnload(IManageable, IPlugin) ManagerBase<ISystem, SystemManager>.TryTerminate(IManageable, IPlugin) ManagerBase<ISystem, SystemManager>.TryReload(IManageable, IPlugin, ReloadReason) ManagerBase<ISystem, SystemManager>.Add<TX>(IPlugin, bool) ManagerBase<ISystem, SystemManager>.Add<TX>(IPlugin, TX, bool) ManagerBase<ISystem, SystemManager>.Add<TX>(IPlugin, Type, bool) ManagerBase<ISystem, SystemManager>.OnManageableAdded<TX>(IPlugin, ISystem, bool) ManagerBase<ISystem, SystemManager>.OnManageableRemoved<TX>(IPlugin, ISystem) ManagerBase<ISystem, SystemManager>.Remove<TX>(IPlugin) ManagerBase<ISystem, SystemManager>.Remove<TX>(IPlugin, TX) ManagerBase<ISystem, SystemManager>.Get<TX>(bool) ManagerBase<ISystem, SystemManager>.Get(Type, bool) ManagerBase<ISystem, SystemManager>.GetOrCreate<TX>(IPlugin) ManagerBase<ISystem, SystemManager>.Has<TX>(bool) ManagerBase<ISystem, SystemManager>.Has(Type, bool, bool) ManagerBase<ISystem, SystemManager>.Has(string, bool, bool) ManagerBase<ISystem, SystemManager>.Count() ManagerBase<ISystem, SystemManager>.ForEach(Action<ISystem>) ManagerBase<ISystem, SystemManager>.GetList() ManagerBase<ISystem, SystemManager>.Select(Func<KeyValuePair<Type, ISystem>, ISystem>) ManagerBase<ISystem, SystemManager>.RequiredType() ManagerBase<ISystem, SystemManager>.RequiredTypeName() ManagerBase<ISystem, SystemManager>.GetManagedInfo() ManagerBase<ISystem, SystemManager>.Equals(ManagerBase<ISystem, SystemManager>) ManagerBase<ISystem, SystemManager>.Equals(object) ManagerBase<ISystem, SystemManager>.GetHashCode() ManagerBase<ISystem, SystemManager>.DebugPrintAll(string) ManagerBase<ISystem, SystemManager>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields TickManageables protected readonly List<ITickSystem> TickManageables Field Value List<ITickSystem> Properties FrameInterval public int FrameInterval { get; set; } Property Value int Log protected override Logger Log { get; } Property Value Logger TimeScale public float TimeScale { get; set; } Property Value float UseBuiltInTickRunner Indicates whether to use the built-in tick runner for updates. public bool UseBuiltInTickRunner { get; set; } Property Value bool Methods AddSystem<T>(IPlugin, bool) public T? AddSystem<T>(IPlugin plugin, bool failIfExists = true) where T : ISystem Parameters plugin IPlugin failIfExists bool Returns T Type Parameters T AddSystem<T>(IPlugin, T, bool) public void AddSystem<T>(IPlugin plugin, T system, bool failIfExists = true) where T : ISystem Parameters plugin IPlugin system T failIfExists bool Type Parameters T GetSystem<T>(bool) public T? GetSystem<T>(bool required = true) where T : ISystem Parameters required bool Returns T Type Parameters T IsEnabled<TX>(TX?) Is the manageable object enabled. public override bool IsEnabled<TX>(TX? manageable) where TX : ISystem Parameters manageable TX Returns bool Type Parameters TX OnManageableAdded<TX>(IPlugin, ISystem?, bool) protected override void OnManageableAdded<TX>(IPlugin plugin, ISystem? manageable, bool failIfExists) where TX : ISystem Parameters plugin IPlugin manageable ISystem failIfExists bool Type Parameters TX OnManageableRemoved<TX>(IPlugin, ISystem?) protected override void OnManageableRemoved<TX>(IPlugin plugin, ISystem? manageable) where TX : ISystem Parameters plugin IPlugin manageable ISystem Type Parameters TX RemoveSystem<T>(IPlugin) public void RemoveSystem<T>(IPlugin plugin) where T : ISystem Parameters plugin IPlugin Type Parameters T StartUpdates() protected virtual void StartUpdates() StopUpdates() protected virtual void StopUpdates()"
  },
  "api/RisingV.Shared.Systems.html": {
    "href": "api/RisingV.Shared.Systems.html",
    "title": "Namespace RisingV.Shared.Systems | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Systems Classes InternalSystems A collection of internal systems that are used by the server. System Represents a base class for systems SystemConfig Represents a system configuration class that provides configuration settings for systems in the plugin system. SystemManager Manages systems within the application. System<TConfig> Represents a system with a strongly typed configuration. Interfaces IStageSystem ISystem Represents a system in the plugin system that can be managed by the SystemManager. ISystemConfig Represents a system configuration interface. ITickSystem"
  },
  "api/RisingV.Shared.Transport.Messages.ActionSerialisedMessage.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ActionSerialisedMessage.html",
    "title": "Class ActionSerialisedMessage | RisingV.Shared",
    "summary": "Class ActionSerialisedMessage Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public class ActionSerialisedMessage : IChatMessage Inheritance object ActionSerialisedMessage Implements IChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Colour public string Colour Field Value string Enabled public bool Enabled Field Value bool Group public string Group Field Value string ID public string ID Field Value string Label public string Label Field Value string Methods Deserialize(BinaryReader) public void Deserialize(BinaryReader reader) Parameters reader BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/RisingV.Shared.Transport.Messages.ClientAction.ActionType.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ClientAction.ActionType.html",
    "title": "Enum ClientAction.ActionType | RisingV.Shared",
    "summary": "Enum ClientAction.ActionType Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public enum ClientAction.ActionType Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields ButtonClick = 2 Connect = 0 Disconnect = 1 Register = 3"
  },
  "api/RisingV.Shared.Transport.Messages.ClientAction.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ClientAction.html",
    "title": "Class ClientAction | RisingV.Shared",
    "summary": "Class ClientAction Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public class ClientAction : IChatMessage Inheritance object ClientAction Implements IChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ClientAction() public ClientAction() ClientAction(ActionType, string) public ClientAction(ClientAction.ActionType actionType, string value) Parameters actionType ClientAction.ActionType value string Properties Action public ClientAction.ActionType Action { get; } Property Value ClientAction.ActionType Value public string Value { get; } Property Value string Methods Deserialize(BinaryReader) public void Deserialize(BinaryReader reader) Parameters reader BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/RisingV.Shared.Transport.Messages.ClientRegisterMessage.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ClientRegisterMessage.html",
    "title": "Class ClientRegisterMessage | RisingV.Shared",
    "summary": "Class ClientRegisterMessage Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public class ClientRegisterMessage : IChatMessage Inheritance object ClientRegisterMessage Implements IChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors ClientRegisterMessage() public ClientRegisterMessage() ClientRegisterMessage(int, ulong) public ClientRegisterMessage(int clientNonce, ulong steamId) Parameters clientNonce int steamId ulong Properties ClientNonce public int ClientNonce { get; } Property Value int SteamId public ulong SteamId { get; set; } Property Value ulong Methods Deserialize(BinaryReader) public void Deserialize(BinaryReader reader) Parameters reader BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/RisingV.Shared.Transport.Messages.ConnectedMessage.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ConnectedMessage.html",
    "title": "Class ConnectedMessage | RisingV.Shared",
    "summary": "Class ConnectedMessage Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public class ConnectedMessage : IChatMessage Inheritance object ConnectedMessage Implements IChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Deserialize(BinaryReader) public void Deserialize(BinaryReader reader) Parameters reader BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/RisingV.Shared.Transport.Messages.IChatMessage.html": {
    "href": "api/RisingV.Shared.Transport.Messages.IChatMessage.html",
    "title": "Interface IChatMessage | RisingV.Shared",
    "summary": "Interface IChatMessage Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public interface IChatMessage Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Deserialize(BinaryReader) void Deserialize(BinaryReader reader) Parameters reader BinaryReader ReadHeader(BinaryReader, out int, out string) public static bool ReadHeader(BinaryReader reader, out int clientNonce, out string type) Parameters reader BinaryReader clientNonce int type string Returns bool Serialize(BinaryWriter) void Serialize(BinaryWriter writer) Parameters writer BinaryWriter WriteHeader(BinaryWriter, string, int) public static void WriteHeader(BinaryWriter writer, string type, int clientNonce) Parameters writer BinaryWriter type string clientNonce int"
  },
  "api/RisingV.Shared.Transport.Messages.NotificationMessage.html": {
    "href": "api/RisingV.Shared.Transport.Messages.NotificationMessage.html",
    "title": "Class NotificationMessage | RisingV.Shared",
    "summary": "Class NotificationMessage Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public class NotificationMessage : IChatMessage Inheritance object NotificationMessage Implements IChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Colour public string Colour Field Value string ID public string ID Field Value string Message public string Message Field Value string Severity public LogLevel Severity Field Value LogLevel Methods Deserialize(BinaryReader) public void Deserialize(BinaryReader reader) Parameters reader BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/RisingV.Shared.Transport.Messages.ProgressSerialisedMessage.ActiveState.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ProgressSerialisedMessage.ActiveState.html",
    "title": "Enum ProgressSerialisedMessage.ActiveState | RisingV.Shared",
    "summary": "Enum ProgressSerialisedMessage.ActiveState Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public enum ProgressSerialisedMessage.ActiveState Extension Methods EnumExtensions.GetRandom<TEnum>(TEnum, Random) EntityExtensions.IsAspect<TAspect>(object) Fields Active = 2 NotActive = 1 OnlyActive = 3 Unchanged = 0"
  },
  "api/RisingV.Shared.Transport.Messages.ProgressSerialisedMessage.html": {
    "href": "api/RisingV.Shared.Transport.Messages.ProgressSerialisedMessage.html",
    "title": "Class ProgressSerialisedMessage | RisingV.Shared",
    "summary": "Class ProgressSerialisedMessage Namespace RisingV.Shared.Transport.Messages Assembly RisingV.Shared.dll public class ProgressSerialisedMessage : IChatMessage Inheritance object ProgressSerialisedMessage Implements IChatMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Fields Active public ProgressSerialisedMessage.ActiveState Active Field Value ProgressSerialisedMessage.ActiveState Change public string Change Field Value string Colour public string Colour Field Value string Flash public bool Flash Field Value bool Group public string Group Field Value string Header public string Header Field Value string Label public string Label Field Value string ProgressPercentage public float ProgressPercentage Field Value float Tooltip public string Tooltip Field Value string Methods Deserialize(BinaryReader) public void Deserialize(BinaryReader reader) Parameters reader BinaryReader Serialize(BinaryWriter) public void Serialize(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/RisingV.Shared.Transport.Messages.html": {
    "href": "api/RisingV.Shared.Transport.Messages.html",
    "title": "Namespace RisingV.Shared.Transport.Messages | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Transport.Messages Classes ActionSerialisedMessage ClientAction ClientRegisterMessage ConnectedMessage NotificationMessage ProgressSerialisedMessage Interfaces IChatMessage Enums ClientAction.ActionType ProgressSerialisedMessage.ActiveState"
  },
  "api/RisingV.Shared.Utils.AssetUtil.html": {
    "href": "api/RisingV.Shared.Utils.AssetUtil.html",
    "title": "Class AssetUtil | RisingV.Shared",
    "summary": "Class AssetUtil Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll Provides utility methods for handling assets, particularly item names. public static class AssetUtil Inheritance object AssetUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CleanItemName(string) Cleans the item name by applying known transformations based on prefixes and patterns. public static string CleanItemName(string input) Parameters input string The input item name to clean. Returns string A cleaned item name. DumpPrefabs() Dumps all prefabs to a text file named \"prefabs.txt\". public static void DumpPrefabs()"
  },
  "api/RisingV.Shared.Utils.Async.html": {
    "href": "api/RisingV.Shared.Utils.Async.html",
    "title": "Class Async | RisingV.Shared",
    "summary": "Class Async Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll Provides utility methods for asynchronous operations. public static class Async Inheritance object Async Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DelayedRun(Action, int) Executes an action after a specified delay. public static void DelayedRun(Action action, int delayMs = 300) Parameters action Action The action to execute. delayMs int The delay in milliseconds before executing the action."
  },
  "api/RisingV.Shared.Utils.EnumUtil.html": {
    "href": "api/RisingV.Shared.Utils.EnumUtil.html",
    "title": "Class EnumUtil | RisingV.Shared",
    "summary": "Class EnumUtil Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll Provides utility methods for working with enums. public static class EnumUtil Inheritance object EnumUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetValueName<TEnum>(int) Gets the name of the enum value corresponding to the specified integer value. public static string GetValueName<TEnum>(int value) where TEnum : struct, Enum Parameters value int The integer value to look up. Returns string Returns the name of the enum value. Type Parameters TEnum TEnum Exceptions ArgumentException Thrown when the value is not found in the enum. HasValue<TEnum>(int) Checks if the enum has a specific value. public static bool HasValue<TEnum>(int value) where TEnum : struct, Enum Parameters value int The integer value to check. Returns bool Returns true if the enum contains the value, otherwise false. Type Parameters TEnum TEnum ToList<TEnum>() Converts an enum type to a list of its values. public static List<TEnum> ToList<TEnum>() where TEnum : struct, Enum Returns List<TEnum> Type Parameters TEnum ToMapReversed<TEnum>() Converts an enum type to a map where the keys are the enum values and the values are their corresponding names. public static Map<int, string> ToMapReversed<TEnum>() where TEnum : struct, Enum Returns Map<int, string> A map where the keys are the enum values and the values are their corresponding names. Type Parameters TEnum TEnum Exceptions ArgumentException Thrown when the enum type does not have a value. ToMap<TEnum>(bool) Converts an enum type to a map where the keys are the enum names and the values are their corresponding integer values. public static Map<string, int> ToMap<TEnum>(bool lowerCaseKey = false) where TEnum : struct, Enum Parameters lowerCaseKey bool If true, the keys will be converted to lower case. Returns Map<string, int> A map where the keys are the enum names and the values are their corresponding integer values. Type Parameters TEnum TEnum Exceptions ArgumentException Thrown when the enum type does not have a value. TryGetName<TEnum>(int, out string) Attempts to get the name of the enum value corresponding to the specified integer value. public static bool TryGetName<TEnum>(int value, out string name) where TEnum : struct, Enum Parameters value int The integer value to look up. name string The output parameter that will hold the name of the enum value if found. Returns bool Returns true if the name was found, otherwise false. Type Parameters TEnum TEnum"
  },
  "api/RisingV.Shared.Utils.Help.html": {
    "href": "api/RisingV.Shared.Utils.Help.html",
    "title": "Class Help | RisingV.Shared",
    "summary": "Class Help Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll Provides utility methods for various game-related operations. public static class Help Inheritance object Help Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EmptyEntity public static readonly Entity EmptyEntity Field Value Entity EmptyUser public static readonly User EmptyUser Field Value User RxName public static readonly Regex RxName Field Value Regex Methods CamelCaseToSpaces(UnitStatType) Converts a string into camel casing by removing spaces and capitalizing the first letter of each word. public static string? CamelCaseToSpaces(UnitStatType type) Parameters type UnitStatType The ProjectM.UnitStatType to convert. Returns string A string representing the camel-cased name of the ProjectM.UnitStatType. GetTrueName(string) Get the true name of a string by extracting the last part after the last square bracket. public static FixedString64Bytes GetTrueName(string name) Parameters name string The name string to process. Returns FixedString64Bytes A Unity.Collections.FixedString64Bytes containing the true name. Shutdown() Shuts down the application gracefully. public static void Shutdown() StartBatchScript(string, string) Starts a batch script with the specified path. public static void StartBatchScript(string scriptPath, string newProcess = \"\") Parameters scriptPath string The path to the batch script to execute. newProcess string Optional. If specified, the script will be run in a new command prompt window with this title."
  },
  "api/RisingV.Shared.Utils.LazyRetry-1.html": {
    "href": "api/RisingV.Shared.Utils.LazyRetry-1.html",
    "title": "Class LazyRetry<T> | RisingV.Shared",
    "summary": "Class LazyRetry<T> Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll A utility class that allows you to lazily retry the creation of an instance of type T. public class LazyRetry<T> Type Parameters T Inheritance object LazyRetry<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Constructors LazyRetry(Func<T?>) Pass in the logic that tries to resolve your service. public LazyRetry(Func<T?> factory) Parameters factory Func<T> Properties Value Returns the cached instance if non-null, otherwise calls your factory again. public T? Value { get; } Property Value T Operators implicit operator T?(LazyRetry<T>) Try to hand this to something expecting a T; just returns .Value. public static implicit operator T?(LazyRetry<T> lazy) Parameters lazy LazyRetry<T> Returns T"
  },
  "api/RisingV.Shared.Utils.PathUtil.html": {
    "href": "api/RisingV.Shared.Utils.PathUtil.html",
    "title": "Class PathUtil | RisingV.Shared",
    "summary": "Class PathUtil Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll Provides utility methods for working with file paths, particularly to check if a file is within a specified directory. public static class PathUtil Inheritance object PathUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsInAnyDirectory(ICollection<string>, string) Checks if a given file path is within any of the specified directories. public static bool IsInAnyDirectory(ICollection<string> directoryPaths, string filePath) Parameters directoryPaths ICollection<string> A collection of directory paths to check against. filePath string The path of the file to check. Returns bool True if the file is within any of the directories, otherwise false. IsInDirectory(string, string) Checks if a given file path is within a specified directory. public static bool IsInDirectory(string directoryPath, string filePath) Parameters directoryPath string The path of the directory to check against. filePath string The path of the file to check. Returns bool True if the file is within the directory, otherwise false."
  },
  "api/RisingV.Shared.Utils.WorldTimer.html": {
    "href": "api/RisingV.Shared.Utils.WorldTimer.html",
    "title": "Class WorldTimer | RisingV.Shared",
    "summary": "Class WorldTimer Namespace RisingV.Shared.Utils Assembly RisingV.Shared.dll A timer that runs an action in the world at a specified interval. public class WorldTimer : IDisposable Inheritance object WorldTimer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtensions.IsAspect<TAspect>(object) Methods Dispose() Disposes of the timer, stopping it if it is enabled. public void Dispose() Start(Action<World>?, Func<object, TimeSpan>) Start the WorldTimer class with a specified delay action. public void Start(Action<World>? action, Func<object, TimeSpan> delayAction) Parameters action Action<World> The action to run in the world. delayAction Func<object, TimeSpan> The function that returns the delay based on an object. Start(Action<World>?, TimeSpan) Start the WorldTimer class with a specified delay. public void Start(Action<World>? action, TimeSpan delay) Parameters action Action<World> The action to run in the world. delay TimeSpan The delay between runs of the action. Stop() Stops the timer, unsubscribing from the update event and disabling the timer. public void Stop()"
  },
  "api/RisingV.Shared.Utils.html": {
    "href": "api/RisingV.Shared.Utils.html",
    "title": "Namespace RisingV.Shared.Utils | RisingV.Shared",
    "summary": "Namespace RisingV.Shared.Utils Classes AssetUtil Provides utility methods for handling assets, particularly item names. Async Provides utility methods for asynchronous operations. EnumUtil Provides utility methods for working with enums. Help Provides utility methods for various game-related operations. LazyRetry<T> A utility class that allows you to lazily retry the creation of an instance of type T. PathUtil Provides utility methods for working with file paths, particularly to check if a file is within a specified directory. WorldTimer A timer that runs an action in the world at a specified interval."
  },
  "api/RisingV.Shared.html": {
    "href": "api/RisingV.Shared.html",
    "title": "Namespace RisingV.Shared | RisingV.Shared",
    "summary": "Namespace RisingV.Shared Namespaces RisingV.Shared.Aspects RisingV.Shared.Collections RisingV.Shared.Config RisingV.Shared.Data RisingV.Shared.Databases RisingV.Shared.Diagnostics RisingV.Shared.Engines RisingV.Shared.Entities RisingV.Shared.Events RisingV.Shared.Exceptions RisingV.Shared.Extensions RisingV.Shared.Features RisingV.Shared.Files RisingV.Shared.Hooks.Internal RisingV.Shared.Logging RisingV.Shared.Managers RisingV.Shared.Plugins RisingV.Shared.Processors RisingV.Shared.Reloading RisingV.Shared.Systems RisingV.Shared.Transport.Messages RisingV.Shared.Utils Classes Application Represents the application state and provides access to various systems and managers within the RisingV game. Bootstrap BootstrapPlugin BootstrapPluginContext Caches Provides a collection of caches used throughout the application. (Not currently used) Coroutines Contains methods for managing coroutines in Unity using the IgnorePhysicsDebugSystem. EventBridge Provides a centralized event bus for handling various game events. EventBridge.ArmorDestroyedEvent Fired when an armour piece is destroyed. EventBridge.ArmorSpawnedEvent Fired after an armour piece has spawned. EventBridge.ArmorSpawningEvent Fired before an armour piece spawns. EventBridge.BuffServerSpawnEvent Event raised on server side when a buff entity prefab spawns. EventBridge.DamagedAllEvent Generic damage event raised when any entity is damaged. EventBridge.DamagedBossEvent Generic damage event raised when any entity is damaged. EventBridge.DamagedEvent Generic damage event raised when any entity is damaged. EventBridge.DamagedGatherableEvent Generic damage event raised when any entity is damaged. EventBridge.DamagedMinionEvent Generic damage event raised when any entity is damaged. EventBridge.DamagedPlayerEvent Generic damage event raised when any entity is damaged. EventBridge.DamagedUnitEvent Generic damage event raised when any entity is damaged. EventBridge.DeathAllEvent Generic record base for strongly typed death events. EventBridge.DeathBossEvent Generic record base for strongly typed death events. EventBridge.DeathEvent<TEvent> Generic record base for strongly typed death events. EventBridge.DeathGatherableEvent Generic record base for strongly typed death events. EventBridge.DeathMinionEvent Generic record base for strongly typed death events. EventBridge.DeathPlayerEvent Generic record base for strongly typed death events. EventBridge.DeathUnitEvent Generic record base for strongly typed death events. EventBridge.EquipmentEvent Base event for equipment‐related operations. EventBridge.EquipmentItemEvent EventBridge.OnDropInventoryItemEvent EventBridge.OnDroppedItemsEvent EventBridge.OnEquipItemEvent EventBridge.OnEquipItemFromInventoryEvent EventBridge.OnFilesChangedEvent Event triggered when files change in the server's file system. EventBridge.OnGameDataDestroyedEvent Event triggered when the game data is destroyed. EventBridge.OnGameDataInitializedEvent Event triggered when the game data is initialized. EventBridge.OnItemPickupEvent EventBridge.OnMoveAllItemsBetweenInventoriesEvent EventBridge.OnMoveItemBetweenInventoriesEvent EventBridge.OnPersistenceSystemLoadedEvent Event triggered when the ProjectM.LoadPersistenceSystemV2.SetLoadState(Unity.Entities.EntityManager, ProjectM.ServerStartupState.State) is post called and the state is ProjectM.ServerStartupState.State.SuccessfulStartup. EventBridge.OnPersistenceSystemLoadingEvent Event triggered when the ProjectM.LoadPersistenceSystemV2.SetLoadState(Unity.Entities.EntityManager, ProjectM.ServerStartupState.State) is post called. EventBridge.OnPluginReadyEvent<TContext> Event triggered when the plugin is ready, meaning everything is loaded and ready. EventBridge.OnPluginsInitializingEvent Event triggered when the Plugin loads. EventBridge.OnPluginsLoadedEvent Event triggered when all plugins are loaded. EventBridge.OnPluginsLoadingEvent Event triggered when all plugins are loading. EventBridge.OnPluginsPartialLoadedEvent Event triggered after once the ChainLoader has initialized all plugins and their dependencies. EventBridge.OnPluginsReadyEvent Event triggered when all plugins are ready and everything is loaded. EventBridge.OnSaveEvent Event emitted whenever the server performs a save operation. EventBridge.OnUnequipItemEvent EventBridge.PlayerAdminAuthEvent Event triggered when a player admin authentication attempt occurs. EventBridge.PlayerCompleteAchievementEvent Event triggered when a player completes an achievement. EventBridge.PlayerDownedEvent Event triggered when a player is \"downed\" (health reached zero). EventBridge.PlayerKickBanEvent Event triggered when a player is kicked or banned from the server. EventBridge.ScriptDespawnEvent Event raised when an entity despawns via script. EventBridge.ScriptSpawnEvent Event raised when an entity spawns via script. EventBridge.ServerStartupSuccessfulEvent Event triggered when the server starts up successfully. EventBridge.SpawnEvent Generic spawn event for entities created via the standard spawn system. EventBridge.StatChangedAllEvent Event indicating that any entity stat has changed. EventBridge.StatChangedBossEvent Event indicating that any entity stat has changed. EventBridge.StatChangedEvent Event indicating that any entity stat has changed. EventBridge.StatChangedGatherableEvent Event indicating that any entity stat has changed. EventBridge.StatChangedMinionEvent Event indicating that any entity stat has changed. EventBridge.StatChangedPlayerEvent Event indicating that any entity stat has changed. EventBridge.StatChangedUnitEvent Event indicating that any entity stat has changed. EventBridge.UnitDownedEvent Event triggered when a unit is downed (health reached zero). EventBridge.UnitStatBuffSpawnEvent Event triggered when a stat‐based buff prefab spawns on a unit. EventBridge.UserConnectEvent Event triggered when a user connects to the server. EventBridge.UserDisconnectEvent Event triggered when a user disconnects from the server. EventBridge.VBloodConsumedEvent Event raised when one or more V-Blood orbs are consumed. EventBridge.WeaponDestroyedEvent Fired when a weapon entity is destroyed. EventBridge.WeaponSpawnedEvent Fired after a weapon has been spawned. EventBridge.WeaponSpawningEvent Fired before a weapon prefab is spawned into the world. FrameTimer FrameTimer is a utility class that allows you to run an action after a specified delay, with the option to repeat it a certain number of times. GameFrame This class provides hooks for the Update and LateUpdate frame functions invoked by Unity. Original code comes from Bloodstone LogTags Represents a collection of predefined log tags used throughout the application. MyPluginInfo Plugin RangeInt Represents a range of integers with a minimum and maximum value. SharedPluginConfig Suggestions Provides methods to generate suggestions for adding various components to plugins. Interfaces EventBridge.IDamagedEvent Marker interface for events that represent damage (a specialised stat change). EventBridge.IDeathEvent Common interface for death‐related events. EventBridge.IStatChangedEvent Base interface for events that change stats of entities. EventBridge.IStatChangedEvent<TData> Generic interface for events that carry typed stat‐change data. Delegates GameFrameUpdateEventHandler"
  },
  "docs/Aspects.html": {
    "href": "docs/Aspects.html",
    "title": "Aspecting Abstraction | RisingV.Shared",
    "summary": "Aspecting Abstraction Namespace: RisingV.Shared.Aspects Assembly: RisingV.Shared The Aspect pattern (also called Aspecting) provides a way to attach typed views or behaviors onto an existing domain object (like an ECS Entity, a data DTO, or any class) without modifying that object’s source. An aspect wraps a target instance and exposes a tailored API for cross‑cutting concerns (validation, convenience methods, helper logic, etc.) while preserving the original model’s purity. 1. Core Interfaces IAspect A marker interface with no members: public interface IAspect { } This non‑generic base allows you to treat all aspects uniformly when you don’t care about the concrete target type. IAspect<T> public interface IAspect<T> : IAspect { /// <summary> /// The wrapped object this aspect operates on. /// </summary> T Target { get; } /// <summary> /// Returns true if the provided instance satisfies the structural and semantic /// requirements of this aspect (e.g., required components are present, tags set, /// or valid state). /// </summary> bool Qualifies(T entity); } Target The underlying object (e.g., an Entity or some DTO) that this aspect augments. Qualifies(T entity) A guard method that checks whether the passed‐in entity has the correct shape, components, tags, or state needed to create this aspect. For example, a UnitAspect might require that entity.Has<ComponentHealth>() && entity.Has<TagUnit>(). 2. Base Support: BaseAspect<T> Most aspects will inherit from BaseAspect<T>, which implements common logic: public abstract class BaseAspect<T> : IAspect<T> { protected abstract Logger Log { get; } /// <summary> /// The wrapped target instance. /// </summary> public T Target { get; } protected BaseAspect(T target) { // Verify that target is not null if (target == null) throw new UnqualifiedTargetException(target); if (!Qualifies(target)) throw new UnqualifiedTargetException(target); this.Target = target; } /// <summary> /// Derived types override this to define qualification logic. /// </summary> public abstract bool Qualifies(T entity); /// <summary> /// Friendly display of the target for logging (can be overridden). /// </summary> protected virtual string DisplayName(T obj) => obj?.ToString() ?? string.Empty; /// <summary> /// Additional details about the target for error messages (optional). /// </summary> protected virtual string ExtraDetails(T obj) => string.Empty; // … additional utility methods to throw with context, etc. … } Key points: The constructor in BaseAspect<T> calls Qualifies(target) and throws UnqualifiedTargetException if it returns false. Derived aspects implement Qualifies to check for required components, tags, or properties. Use DisplayName and ExtraDetails to improve error/log messages. A Logger field is provided for consistent logging inside aspect methods. 3. Handling Unqualified Targets: UnqualifiedTargetException public class UnqualifiedTargetException : BaseException { /// <summary> /// The actual object that failed qualification. /// </summary> public object? Target { get; } public UnqualifiedTargetException(object? target) : base(target == null ? \"Target is null\" : $\"Target {target} is not qualified\") { Target = target; } public UnqualifiedTargetException(string message, object? target) : base(message) { Target = target; } public UnqualifiedTargetException(string message, Exception innerException, object? target) : base(message, innerException) { Target = target; } } Thrown when you attempt to create an aspect around a target that fails Qualifies. Contains the offending Target object for diagnostics. 4. Metadata Support: MetaSerializer public static class MetaSerializer { // Provides JSON serialization helpers for aspect‐related data. // (e.g., generating “aspect metadata” files for documentation or runtime reflection). public static string Serialize<TAspect>(TAspect aspect) where TAspect : IAspect { // …implementation using reflection attributes and JSON … } public static TAspect Deserialize<TAspect>(string json) where TAspect : IAspect { // …reconstruct aspect metadata from JSON, then wrap a target… } } Although not strictly required for simple aspects, MetaSerializer can be used to: Export aspect specifications (e.g., field names, default values) to JSON. Rehydrate aspects at runtime or for code generation. Combine with source‐generation to produce high‐performance lookup tables. 5. Typical Usage Below is a step‐by‐step example of creating and using a custom aspect: Step 1: Define a Domain Type Assume you have a DOTS Entity that represents an in‑game “Unit”: public struct ComponentHealth : IComponentData { public int Current; } public struct TagUnit : IComponentData { } Step 2: Create a UnitAspect public sealed class UnitAspect : BaseAspect<Entity> { private readonly EntityManager _mgr; protected override Logger Log { get; } = Logger.Create<UnitAspect>(); public UnitAspect(Entity entity, EntityManager manager) : base(entity) { _mgr = manager; } public override bool Qualifies(Entity entity) { // Must have both a Health component and be tagged as a Unit return _mgr.HasComponent<ComponentHealth>(entity) && _mgr.HasComponent<TagUnit>(entity); } /// <summary> /// Reduce health by the specified damage amount. /// </summary> public void TakeDamage(int damage) { var health = _mgr.GetComponentData<ComponentHealth>(Target); health.Current = Math.Max(0, health.Current - damage); _mgr.SetComponentData(Target, health); Log.Info($\"Unit {Target} took {damage} damage, now at {health.Current} HP.\"); } /// <summary> /// Heal the unit by the specified amount. /// </summary> public void Heal(int amount) { var health = _mgr.GetComponentData<ComponentHealth>(Target); health.Current += amount; _mgr.SetComponentData(Target, health); Log.Info($\"Unit {Target} healed by {amount}, now at {health.Current} HP.\"); } } Step 3: Attach & Use the Aspect Somewhere in your gameplay code, given an Entity e: // Attempt to wrap e as a UnitAspect UnitAspect? unit; try { unit = new UnitAspect(e, entityManager); } catch (UnqualifiedTargetException) { // e is not a valid “Unit” unit = null; } if (unit != null) { // Safely call aspect methods unit.TakeDamage(10); if (unit.TargetExists()) // example helper unit.Heal(5); } Alternatively, you can write an extension method for concise syntax: public static class EntityExtensions { public static UnitAspect AsUnit(this Entity e, EntityManager mgr, bool strict = true) { if (!new UnitAspect(e, mgr).Qualifies(e)) { if (strict) throw new UnqualifiedTargetException(e); else return null!; } return new UnitAspect(e, mgr); } } // Usage: var unit = e.AsUnit(entityManager, strict: false); unit?.TakeDamage(10); 6. Design Principles & Best Practices Separation of Concerns Keep domain data (components, DTOs) free from UI/validation/logging logic. Aspects live outside the core model. Stateless Aspects Aspects should not store mutable state beyond references to the target and required services (EntityManager, other managers, etc.). Qualifies Method Efficient checks: avoid expensive reflection in Qualifies. Return false quickly if missing a required component or tag. Throw Early The base constructor in BaseAspect<T> immediately throws UnqualifiedTargetException if the target fails qualification. This prevents misuse later. Logging & Diagnostics Use the built‑in Logger to record aspect‐specific events. Override DisplayName/ExtraDetails in your aspect to provide helpful context in errors. Composable You can wrap multiple aspects around the same target if needed. For example, a single Entity could have both a UnitAspect and a MovementAspect. 7. Troubleshooting Symptom: UnqualifiedTargetException: Target Entity(0x1234) is not qualified Cause: Your aspect’s Qualifies check returned false (missing component/tag). Fix: Ensure the Entity has all required components before creating the aspect. If dynamic, add debug logs in Qualifies to see which condition failed. TL;DR IAspect<T> defines a typed wrapper around a target object, with a Qualifies guard. BaseAspect<T> provides a constructor that enforces qualification and supplies logging helpers. UnqualifiedTargetException is thrown if the target doesn’t meet the aspect’s requirements. Use aspects to attach cross‑cutting behavior (validation, helper methods, etc.) without modifying the original data model. Implement each aspect by inheriting BaseAspect<T> and overriding Qualifies(T) plus any additional methods you need."
  },
  "docs/Collections/ConcurrentMap.html": {
    "href": "docs/Collections/ConcurrentMap.html",
    "title": "ConcurrentMap<TKey, TValue> | RisingV.Shared",
    "summary": "ConcurrentMap<TKey, TValue> Namespace: RisingV.Shared.Collections.Concurrent A thin alias around ConcurrentDictionary<TKey,TValue> that also implements IMap. Use it when you need lock‑free concurrent reads/writes but still want to expose the same abstraction (IMap) as other collections in the family. IMap<Guid, Player> players = new ConcurrentMap<Guid, Player>(); // Multiple threads may add/remove safely players[player.Id] = player; Constructors All the ConcurrentDictionary constructor flavors are exposed: ConcurrentMap() ConcurrentMap(IEnumerable<KeyValuePair<TKey,TValue>> collection) ConcurrentMap(IEqualityComparer<TKey> comparer) ConcurrentMap(int concurrencyLevel, int capacity, …) …and so on When to Choose High‑throughput multi‑threaded scenarios. Producer/consumer pipelines. Shared caches in ASP.NET or game servers. For single‑threaded contexts prefer Map; for capped caches prefer SizedDictionaryAsync."
  },
  "docs/Collections/LazyMap.html": {
    "href": "docs/Collections/LazyMap.html",
    "title": "LazyMap<TKey, TValue> | RisingV.Shared",
    "summary": "LazyMap<TKey, TValue> Namespace: RisingV.Shared.Collections Derived from Map<TKey,TValue> A map that lazily creates values the first time a key is accessed. If the key is absent, Activator.CreateInstance<TValue>() is invoked and the newly constructed value is stored and returned. var cache = new LazyMap<string, List<string>>(); cache[\"users\"].Add(\"Ben\"); // \"users\" list is created automatically Signature Highlights Member Description new TValue this[TKey key] Auto‑initialising indexer bool TryRemove(TKey, out TValue?) Atomically fetch & delete Usage Tips Works best when TValue has a parameter‑less constructor. For factories requiring arguments, inject your own methods or wrap the value in a factory object. Pair with TryRemove to implement simple memoisation / caching strategies. // Memoised computation cache bool GetResult(string query, out Result result) { var lazy = cache[query]; if (lazy.TryGetValue(out result)) return true; result = Expensive(query); cache[query] = result; return false; } See Also TimestampedMap – for caches with expiry ConcurrentMap – for thread‑safe scenarios"
  },
  "docs/Collections/Map.html": {
    "href": "docs/Collections/Map.html",
    "title": "Map<TKey, TValue> | RisingV.Shared",
    "summary": "Map<TKey, TValue> Namespace: RisingV.Shared.Collections Assembly: RisingV.Shared A thin wrapper around Dictionary<TKey,TValue> that adds a common interface (IMap) and richer string representation. It is the spiritual baseline for every other map in the Collections package. var players = new Map<Guid, Player>(); players.Add(player.Id, player); Console.WriteLine(players); // Map<Guid, Player>: 1 items [6f7d…] Key Points Feature Details Generic Accepts any non‑null key type and any value type. Familiar API Inherits the full Dictionary<TKey,TValue> surface area. IMap marker Lets you pass different map implementations behind a single interface. Descriptive ToString() Prints count and key list for quick debugging. When to Use You need a plain in‑memory key/value store but want the flexibility to swap in a specialised map (e.g. ConcurrentMap) later. You want a readable ToString() during debugging sessions. Basic Pattern IMap<Guid, Player> store = new Map<Guid, Player>(); // insert / update store[player.Id] = player; // lookup if (store.TryGetValue(id, out var p)) p.SendMessage(\"Welcome back!\"); Related Collections LazyMap, OrderedMap, ConcurrentMap, TimestampedMap"
  },
  "docs/Collections/OrderedMap.html": {
    "href": "docs/Collections/OrderedMap.html",
    "title": "OrderedMap<TKey, TValue> | RisingV.Shared",
    "summary": "OrderedMap<TKey, TValue> Namespace: RisingV.Shared.Collections Maintains deterministic insertion order while offering O(1) look‑ups. Internally combines a Dictionary<TKey, LinkedListNode<…>> for constant‑time indexing with a LinkedList<KeyValuePair<TKey,TValue>> for ordered iteration. Why It Matters Predictable output when serialising or debugging. Simple LRU implementations (oldest entry is First). Alternative to SortedDictionary when logical order ≠ sorted order. Core API Member Purpose void Add(TKey, TValue) Rejects duplicate keys bool Remove(TKey) Deletes the entry bool TryGetValue(TKey, out TValue) Fast read bool ContainsKey(TKey) Set‑style check void Clear() Reset All enumeration patterns (foreach, LINQ, etc.) respect the original insertion sequence. Example var log = new OrderedMap<int, string>(); log.Add(1, \"Init\"); log.Add(2, \"LoadAssets\"); foreach (var (key, message) in log) Console.WriteLine($\"{{key}}: {{message}}\"); Output: 1: Init 2: LoadAssets Comparison Collection Keeps order? Lookup Complexity OrderedMap ✅ Insertion O(1) List<KeyValuePair<…>> ✅ Insertion O(n) SortedDictionary ✅ Sorted O(log n)"
  },
  "docs/Collections/SizedDictionaryAsync.html": {
    "href": "docs/Collections/SizedDictionaryAsync.html",
    "title": "SizedDictionaryAsync<TKey, TValue> | RisingV.Shared",
    "summary": "SizedDictionaryAsync<TKey, TValue> Namespace: RisingV.Shared.Collections A thread‑safe, bounded‑capacity dictionary built on ConcurrentDictionary. When the number of keys exceeds the configured size, the oldest key is evicted (FIFO strategy). Ideal for lightweight caching where stale items can be discarded. var recent = new SizedDictionaryAsync<string, UserSession>(1000); recent.Add(token, session); // oldest entry is automatically purged at 1 001st insert Constructors SizedDictionaryAsync(int size) size – maximum number of elements retained. Important Members Member Description void Add(TKey, TValue) Thread‑safe insert + eviction. Duplicate keys overwrite silently via TryAdd. bool Remove(TKey) Removes key and adjusts internal FIFO queue. Because the class inherits all read APIs (TryGetValue, indexer, etc.) from ConcurrentDictionary, you can use it as a drop‑in replacement. Eviction Behaviour Keys are queued in insertion order. After an Add, if Count > maxSize, the head key is removed. Remove rebuilds the queue to maintain order without the deleted key. Currently FIFO only; adapt the source if you need LRU. Thread‑Safety All operations delegate to ConcurrentDictionary ensuring lock‑free reads and fine‑grained writes."
  },
  "docs/Collections/TimestampedList.html": {
    "href": "docs/Collections/TimestampedList.html",
    "title": "TimestampedList | RisingV.Shared",
    "summary": "TimestampedList Namespace: RisingV.Shared.Collections A time‑aware list that records a UTC timestamp for every entry. Suitable for rate‑limiting, ageing, or temporal analytics. Highlights Feature Detail Auto‑timestamp Each Add stores DateTime.UtcNow by default. Query helpers Retrieve or remove items older/newer than a TimeSpan. Thread‑safe Internal locking (_sync) around list mutations. Touch semantics Refresh an element’s timestamp without re‑allocating. Common Workflow var recentCommands = new TimestampedList<string>(); recentCommands.Add(\"help\"); // throttle: ignore duplicates within 2 s if (recentCommands.GetItemsNewerThan(TimeSpan.FromSeconds(2)).Contains(\"help\")) { return; // too soon } API Surface void Add(T item) bool Remove(T item) void Touch(T item) IEnumerable<T> GetItemsOlderThan(TimeSpan age) IEnumerable<T> GetItemsNewerThan(TimeSpan age) void RemoveOlderThan(TimeSpan age) IEnumerable<(T Item, DateTime Timestamp)> TimedItems void Clear() All enumeration results are snapshots – safe against concurrent mutation."
  },
  "docs/Collections/TimestampedMap.html": {
    "href": "docs/Collections/TimestampedMap.html",
    "title": "TimestampedMap<TKey, TValue> | RisingV.Shared",
    "summary": "TimestampedMap<TKey, TValue> Namespace: RisingV.Shared.Collections A key/value variant of TimestampedList where each entry carries its own timestamp. Use‑Cases Sliding‑window caches Expiry‑based throttling Auditing last‑activity times Main API Member Role void AddOrUpdate(TKey, TValue) Upsert + stamp UtcNow bool TryGetValue(TKey, out TValue) Outcome & value bool Remove(TKey) Delete entry void Touch(TKey) Refresh timestamp IEnumerable<KeyValuePair<TKey,TValue>> GetItemsOlderThan(TimeSpan) Aged query RemoveOlderThan(TimeSpan) Bulk prune Example: var sessions = new TimestampedMap<Guid, Session>(); // On heartbeat sessions.Touch(session.Id); // Clean‑up job every minute sessions.RemoveOlderThan(TimeSpan.FromMinutes(30)); The internal storage is a simple Map<TKey, Entry>, keeping memory usage modest. Thread‑safety is identical to Map (single‑threaded by default). Wrap with ConcurrentMap or external locks for multi‑threaded writes."
  },
  "docs/Collections/TypeKeyedMap.html": {
    "href": "docs/Collections/TypeKeyedMap.html",
    "title": "TypeKeyedMap | RisingV.Shared",
    "summary": "TypeKeyedMap Namespace: RisingV.Shared.Collections Maps Type → TValue and offers strongly typed helpers to reduce casting and string‑based look‑ups. Why You Might Care Register & resolve services, behaviours, or data handlers by concrete type. Avoid repetitive typeof(Foo) boilerplate. Lazy‑initialise missing items without extra code. Typed Convenience Methods Method Description TX Add<TX>() Instantiates TX (using Activator.CreateInstance) and stores it. Returns the instance. void Add<TX>(TX value) Insert a ready‑made instance. TX Get<TX>() Throws if the type isn’t present. TX GetOrCreate<TX>() Fetch or build new instance (and cache it). bool Contains<TX>() Quick existence test. The class also exposes the indexer this[Type type] should you need raw access. Quick Example var registry = new TypeKeyedMap<IHandler>(); registry.Add<JsonHandler>(); // auto‑instantiated registry.Add<XmlHandler>(new XmlHandler()); // explicit instance IHandler handler = registry.GetOrCreate<BinaryHandler>(); Console.WriteLine($\"Handlers loaded: {{registry.Count}}\"); Because the backing store is an IMap<Type,TValue>, you can swap in different implementations (e.g. concurrent) while keeping the same API. Best Practices Ensure TValue has a public parameter‑less constructor if you rely on the parameter‑less Add<TX>() and GetOrCreate<TX>() helpers. Use Clear() in unit tests to avoid cross‑test contamination."
  },
  "docs/Configs.html": {
    "href": "docs/Configs.html",
    "title": "Configs | RisingV.Shared",
    "summary": "Configs Namespace: RisingV.Shared.Config Assembly: RisingV.Shared BaseConfig is an abstract helper that streamlines BepInEx configuration handling for your RisingV plugins and libraries. It wires the entire configuration lifecycle—from creation to hot‑reload—while giving you a concise Bind helper and strongly‑typed accessors. TL;DR – Derive from BaseConfig, override Log, declare your own config fields, and call Bind(...) inside Load(). At a Glance Stage Method Typical responsibility Construction BaseConfig(..) Capture file name / sub‑folder and call Start() Start‑up trio Initialize() → Load() → Ready() Create the ConfigFile, bind your entries, run post‑load code Hot Reload Reload(ReloadReason) Respond to external reload triggers (manual or on‑disk) Tear‑down Unload() → Terminate() Release references and clear the file Each step is virtual so you can extend (or skip) logic as needed. Deriving from BaseConfig public class MyPluginConfig : BaseConfig { protected override Logger Log { get; } = LogManager.GetLogger<MyPluginConfig>(); // Strongly‑typed handles public ConfigEntry<int>? SpawnRate { get; private set; } public ConfigEntry<string>? WelcomeMessage { get; private set; } public MyPluginConfig() : base(\"MyPlugin\") { } public override void Load() { // Always call base.Load() – binds Enabled + queued entries base.Load(); SpawnRate = Bind(\"Gameplay\", \"SpawnRate\", 3, \"Number of mobs spawned per wave\"); WelcomeMessage = Bind(\"UI\", \"WelcomeMessage\", \"Welcome, Vampire Lord!\", \"Text shown to newly connected players\"); } public override void Ready() { base.Ready(); Log.Info($\"SpawnRate={SpawnRate?.Value} Message='{WelcomeMessage?.Value}'\"); } } File Placement Rules <game root>/ └─ BepInEx/ └─ config/ └─ {ConfigRelativePath?}/ └─ {ConfigFileName}.cfg ConfigRelativePath (optional) – lets you group configs under sub‑folders (e.g. RisingV/Core). ConfigFileName – pass without the .cfg extension; the class adds it automatically. Built‑in Enabled Toggle Every BaseConfig implementation automatically exposes: public ConfigEntry<bool>? Enabled { get; private set; } Use this flag to disable big chunks of functionality at runtime without removing the DLL. if (Enabled?.Value is false) return; // early‑out Helper Methods Method Purpose Bind<T>(section, key, default, desc) Wraps ConfigFile.Bind, but queues the request if the file isn't ready yet (e.g. called in constructor). GetEntry<T>(section, key) Fetches the raw ConfigEntry<T>; returns null if missing. GetValue<T>(section, key, default?) Convenience accessor returning the stored value or fallback. Responding to Reloads BaseConfig itself does not re‑load values automatically; it just provides the hook. public override void Reload(ReloadReason reason) { base.Reload(reason); // Re‑read dynamic settings Log.Info(\"Config hot‑reloaded – refreshing internal state\"); UpdateDifficulty(SpawnRate?.Value ?? 3); } Invoke your plugin’s Reload via: In‑game command, or Manually editing the .cfg and saving (if you have a file‑watcher). Thread‑Safety Notes ConfigFile operations are not thread‑safe. Bind and access entries on the main thread or guard with locks if required. Key Takeaways Zero‑ceremony setup – just subclass and override. Lazy bind queue ensures you can define configs even before Initialize(). Lifecycle hooks give you fine‑grained control over start‑up, shutdown, and reload. Happy modding! \uD83E\uDD87"
  },
  "docs/Databases.html": {
    "href": "docs/Databases.html",
    "title": "Database Abstraction | RisingV.Shared",
    "summary": "Database Abstraction Namespaces: RisingV.Shared.Databases, RisingV.Shared.Databases.Sources, RisingV.Shared.Databases.Loaders Assembly: RisingV.Shared The Database abstraction provides a plug‑and‑play way to persist structured game data while following the same Manager lifecycle you use elsewhere in the RisingV framework. It splits concerns into three layers: IDataSource – where the raw bytes live (files, memory, web, etc.). IDataLoader – how those bytes become strongly‑typed objects. IDatabase / Database<TKey,TData,…> – CRUD façade that glues the two together and exposes a consistent API. All databases are orchestrated by DatabaseManager, a concrete TypeMapManager that slots neatly into your plugin’s start‑up sequence. 1. Key Interfaces & Base Classes Layer Contract Responsibility Loader IDataLoader<TKey,TData> Parse / serialise a single entry. Source IDataSource<TKey,TData,TLoader> Store, enumerate and update entries using a concrete loader. Database IDatabase<TKey,TData> High‑level CRUD + lifecycle; delegates to source/loader. Manager DatabaseManager Registers databases, coordinates lifecycle, hot‑reload. Tip – The generic Database<TKey,TData,TSource,TLoader> abstract base implements all boilerplate; you rarely need to derive directly from interfaces. IDataLoader<TKey,TData> public interface IDataLoader<TKey, TData> : IDataLoader where TData : IData { void Load<TSource>(TSource source, object? input) where TSource : IDataSource<TKey, TData>; } public interface IDataLoader<TKey, TData, in TInput> : IDataLoader<TKey, TData> where TData : IData { void Load<TSource>(TSource source, TInput input) where TSource : IDataSource<TKey, TData>; void IDataLoader<TKey, TData>.Load<TSource>(TSource source, object? input) { Load(source, (TInput)input! ?? throw new InvalidOperationException()); } } public interface IDataStreamLoader<TKey, TData> : IDataLoader<TKey, TData, Stream> where TData : IData { } Examples – JsonDataLoader, MapDataLoader, BinaryDataLoader. IDataSource<TKey,TData,TLoader> public interface IDataSource<TKey,TData,TLoader> where TLoader : IDataLoader<TKey,TData> { bool IsInitialized { get; } bool IsLoaded { get; } void Initialize(IDatabase db); void Load(IDatabase db, TLoader loader); void Ready(IDatabase db); void Terminate(IDatabase db); TKey Add(TData obj); TData? Remove(TKey key); bool TryGet(TKey key, out TData value); IEnumerable<TData> All(); } Examples – FileDataSource, MapDataSource. Database<TKey,TData,TSource,TLoader> Wrapped façade that adds: VerifySource() – sanity checks on file paths or connection strings. Lifecycle pass‑through to the source. Convenience CRUD delegates (Add, Remove, indexer, etc.). Automatic IsInitialized / IsLoaded proxy properties. 2. DatabaseManager public sealed class DatabaseManager : TypeMapManager<IDatabase, DatabaseManager>, IPluginComponent Creates a per‑plugin <BepInEx>/config/{PluginGUID} folder. Offers typed helpers: public T? AddDatabase<T>(IPlugin plugin) where T : IDatabase; public T? GetDatabase<T>(bool required = true); public bool RemoveDatabase<T>(); Inherits full state machine from ManagerBase (Initialize → Load → Ready …). 3. Lifecycle Walkthrough Stage Manager Action Database Action Source Action Initialize Validates config path Initialize allocate handles, caches Load Iterates databases Load read files / query server Ready Signals ready Ready final post‑load hooks Reload Propagates reasons Reload reload internal caches Unload Disposes Unload flush buffers, close files Terminate Final GC Terminate release all resources All state transitions are idempotent and orchestrated by TypeMapManager.TryReady. 4. Quick‑Start Example 1️⃣ Define a data record public record BossDrop(string BossId, string ItemId, int Min, int Max) : IData; 2️⃣ Implement a JSON loader public class BossDropJsonLoader : JsonDataLoader<string, BossDrop> { protected override string ExtractKey(BossDrop obj) => obj.BossId; } 3️⃣ Choose a source public class BossDropFileSource : FileDataSource<string, BossDrop, BossDropJsonLoader> { public BossDropFileSource(string path) : base(path) { } } 4️⃣ Compose the database public class BossDropDatabase : Database<string, BossDrop, BossDropFileSource, BossDropJsonLoader> { private static readonly Logger Log = Logger.Create<BossDropDatabase>(); protected override Logger Log => BossDropDatabase.Log; public BossDropDatabase() : base(\"BossDrops\", new BossDropFileSource(\"BossDrops.json\"), new BossDropJsonLoader()) { } } 5️⃣ Register with the manager _dbMgr = SharedComponents.Get<DatabaseManager>(); // or `DatabaseManager` property in the plugin _dbMgr.AddDatabase<BossDropDatabase>(this); Now query anywhere: var drops = _dbMgr.GetDatabase<BossDropDatabase>()!; var skeleton = drops[\"VampireSkeletonBoss\"]; 5. Extending & Customising Need encryption? Implement a SecureFileDataSource that decrypts on‐the‑fly. Need schema migrations? Wrap your loader so Load detects a legacy version and upgrades before returning the object. Common extension points: Hook Use‑case Database.VerifySource() Validate DB directory, ping remote host, check permissions. IDataSource.KeyResolver Key resolver for this data source. IDataSource.Load Add caching or change load order. DatabaseManager.CheckDependencies Ensure another DB is ready before loading. 6. Thread‑Safety Notes Individual databases are not inherently thread‑safe; wrap access in locks if you mutate collections concurrently. File‑based sources use standard FileStream with FileShare.ReadWrite, so you can hot‑edit JSON while the game is running and then call Reload. 7. Troubleshooting Symptom Possible Cause Fix DatabaseException: name is null or empty Forgot to pass name in base constructor Provide a non‑empty string. FileNotFoundException on Load Wrong path or missing file Call VerifySource or create default file. NullReferenceException on GetDatabase<T> Manager not Ready or DB failed to load Check logs for errors; ensure correct plugin load order. TL;DR The Database abstraction lets you plug different sources and loaders together like LEGO bricks, then hand everything off to DatabaseManager for a consistent lifecycle — resulting in clear, testable, and hot‑reloadable data persistence for your RisingV mods."
  },
  "docs/Engines.html": {
    "href": "docs/Engines.html",
    "title": "Engine Abstraction | RisingV.Shared",
    "summary": "Engine Abstraction Namespace root: RisingV.Shared.Engines Assemblies: RisingV.Shared The Engine abstraction is a lightweight framework for building modular, self‑contained subsystems (“engines”) that plug into a Manager–driven lifecycle. Each engine encapsulates a single concern—AI, combat, analytics, UI overlay, etc.—and relies on an EngineManager (which in turn derives from the generic manager base) to orchestrate start‑up, hot‑reload, and shut‑down. Think of an engine as a service and EngineManager as the service host. 1. Building Blocks Component Role Key Properties / Methods Dependency record Describes a hard or soft link on another engine. Type Type, string? Version IEngineConfig BepInEx‑backed feature config that every engine owns. Enabled, AutoLoadDependencies EngineConfig Standard concrete config with sensible defaults. Deconstruct for pattern matching IEngine Minimal marker + lifecycle bridge to the EngineManager. IEngineConfig Config, bool Enabled, GetDependencies(), GetRecommended() Engine<TConfig> Base class that implements 90 % of the boilerplate. Virtual Load, abstract Ready, helper filters EngineManager Specialised TypeMapManager<IEngine> that solves dependency graphs and calls lifecycle hooks in order. AddEngine, OrderEnginesByDependencies, CheckDependencies The abstraction inherits all advantages of the Manager layer: deterministic lifecycle, hot‑reload hooks, and pluggable storage. 2. Dependency Model Declare Hard dependencies in Dependencies, soft links in Recommended. Validate EngineManager.CheckDependencies gathers missing items and throws MissingDependenciesException (or logs a warning for recommended). Auto‑load If both EngineManager.AllowAutoLoad and the engine’s Config.AutoLoadDependencies are true, missing engines are instantiated on the fly and injected into the manager. public sealed class CombatEngine : Engine<EngineConfig> { public CombatEngine() : base(new EngineConfig(\"Combat\", \"Core combat loop\")) { Dependencies.Add(new Dependency(typeof(PhysicsEngine))); Recommended.Add(new Dependency(typeof(AnalyticsEngine))); } } 3. Lifecycle Walkthrough EngineManager forwards the familiar six‑stage lifecycle to each engine: Stage Typical work in an engine Initialize Minimal allocation, subscribe to global events. Load Read config, build internal data tables, resolve external handles. Ready ❗ Hook into other engines, register gameplay systems. Must be overridden. Reload Refresh runtime state when config/files change. Unload Dispose timers, unregister events. Terminate Final GC‑safe clean‑up (rarely needed in practice). Ready is kept abstract in Engine<TConfig> so you never forget to wire the core behaviour. 4. Authoring a New Engine public sealed class ChatEngine : Engine<EngineConfig> { public ChatEngine() : base(new EngineConfig( name: \"Chat\", description: \"Player‑to‑player text chat\", version: \"1.2.0\", author: \"Ben Dol\", relativePath:\"RisingV/Core\")) { // No hard deps, optional analytics Recommended.Add(new Dependency(typeof(AnalyticsEngine))); } public override void Ready(EngineManager mgr, List<IPlugin> plugins) { // Register chat commands, message bus, etc. mgr.Log.Info(\"ChatEngine ready – commands registered.\"); } } Register with your plugin: _engineManager.AddEngine<ChatEngine>(this); // This is called by the EngineManager no need to manually call, but just to demonstrate the order _engineManager.Initialize(this); _engineManager.Load(this); _engineManager.Ready(this); // after all engines have been added 5. Runtime Hot‑Reload Edit BepInEx/config/RisingV/Core/Chat.cfg. EngineManager.Reload propagates a ReloadReason to every engine. Override Reload to pick up new values: public override void Reload(EngineManager m, ReloadReason r) { base.Reload(m, r); Log.Info(\"ChatEngine reloaded: {}\", r.Reason); _throttle = Config.GetValue(\"ThrottlePerMinute\", 20); } 6. Best Practices & Tips Single Responsibility – keep each engine focused; split large ones. Prefer Recommended – reserve hard dependencies for must‑have links. Guard With Enabled – short‑circuit early if the engine is disabled. Leverage Auto‑Load – great for optional gameplay features users can toggle. Test Dependency Graphs – unit‑test EngineManager.OrderEnginesByDependencies. 7. FAQ Q: Do I need a separate manager for every engine type? A: No. A single EngineManager can host any number of heterogeneous engines. Q: Can engines depend on managers? A: Indirectly – they retrieve managers via the plugin context, but circular dependencies (Engine ⇄ Manager) should be avoided. Q: How heavy is auto‑load? A: Instantiation is a single Activator.CreateInstance call plus registration, so negligible for typical plugin sizes. TL;DR Engines are modular, reload‑friendly mini‑services. Engine<TConfig> gives you the boilerplate; EngineManager keeps them orchestrated and dependency‑aware. Focus on domain logic—let the abstraction handle the rest. \uD83D\uDE80"
  },
  "docs/Events.html": {
    "href": "docs/Events.html",
    "title": "EventBus & EventBridge | RisingV.Shared",
    "summary": "EventBus & EventBridge Namespaces: RisingV.Shared.Events, RisingV.Shared Assemblies: RisingV.Shared The EventBus system provides a high‑performance, type‑safe pub‑sub back‑bone for the entire RisingV framework. Every plugin, manager, engine, or game system can raise events without any compile‑time coupling to listeners. EventBridge is a static façade that surfaces all built‑in game events (V‑Rising server hooks, file changes, weapon lifecycle, etc.) and exposes one‑line helper methods for subscription and publication. 1. Architectural Overview ┌────────────┐ Publish ┌──────────────┐ │ Producer │ ───────────────► │ EventBus │ └────────────┘ └──────┬───────┘ │ Dispatch Subscribe / Unsubscribe │ ▼ ┌──────────────┐ │ Consumers │ └──────────────┘ EventBus – a singleton message hub (Application.EventBus) that keeps a Dictionary<Type, List<Handler>>. EventBridge – a file with hundreds of strongly‑typed record structs that represent game events and helper extension methods to talk to the bus. Producers – game systems: Engines, Managers, Persistence layer, Unity hooks, etc. Consumers – plugins or subsystems that subscribe to specific event types. 2. Event Contracts All events implement IEvent (marker) and derive from Event<T> to inherit equality, ToString(), and metadata. public abstract record Event<TEvent> : IEvent where TEvent : IEvent; Concrete events are tiny record structs – zero allocation, immutable, and carry only the data you need. Example (player downed): public record PlayerDownedEvent(Entity Victim, Entity Killer) : Event<PlayerDownedEvent>; Because events are records, pattern‑matching and deconstruction work out‑of‑the‑box. 3. Using EventBridge Subscribing // inside your plugin / engine private IDisposable? _sub; public override void Ready() { // async handler _sub = EventBridge.Subscribe<PlayerDownedEvent>( this, async evt => { await GrantAchievementAsync(evt.Victim, \"NoPainNoGain\"); }); } Options: Overload Handler Type Subscribe(owner, Action<T>) Synchronous Subscribe(owner, Func<T,ValueTask>) Async Subscribe(owner, EventHandler<T>) Async + cancellation token owner tags the subscription so you can unsubscribe all of them in one call. Publishing EventBridge.PublishSafe(new PlayerDownedEvent(victim, killer)); Method Behaviour Publish Sync, exceptions propagate back to caller. PublishSafe Sync, exceptions caught and logged. PublishAsync Async ValueTask, propagate errors. PublishSafeAsync Async, swallow/log errors. Unsubscribing _sub?.Dispose(); // via IDisposable EventBridge.Unsubscribe(this); // or remove all by owner 4. Built‑In Event Categories EventBridge organises events with #region blocks: Region Highlights Initialization OnGameDataInitialized, ServerStartupSuccessful File Change OnFilesChanged for hot‑reload pipelines Connection UserConnect, UserDisconnect Player Buffing, achievements, admin auth, kick/ban Unit Buff spawn, downed, buffed Stats & Damage StatChanged*, Damaged* (boss, player, unit, etc.) Death Typed death events (DeathPlayer, DeathBoss, …) VBlood VBloodConsumed Equipment / Weapon / Armor Spawn/despawn, equip/unequip Save & Spawn OnSave, generic SpawnEvent, script spawns (Reserved) InputSystem events for future expansions For the full list inspect EventBridge.cs in your IDE. 5. Thread‑Safety & Performance Lock‑free dispatch – the bus copies the handler list once per publish, so handlers can add/remove in other threads without deadlocks. Handlers run sequentially in subscription order; use async publish if you need parallelism. Minimise allocations: prefer record events over classes; pass structs by in when heavy. 6. Advanced Features Handler Hash Subscribe(owner, handler, handlerHash) lets you supply a stable int key so duplicate subscriptions are ignored – handy when hot‑reloading code. Safe Publish for Mods Third‑party mods should always call PublishSafe / PublishSafeAsync to avoid breaking the game if another mod’s handler throws. 7. Quick‑Start Cheat‑Sheet // Subscribe IDisposable sub = EventBridge.Subscribe<WeaponSpawnedEvent>( this, evt => Logger.Info($\"Weapon spawned: {evt.WeaponEntity}\")); // Publish EventBridge.PublishSafe(new WeaponSpawnedEvent(entity, level)); // Unsubscribe sub.Dispose(); // or EventBridge.Unsubscribe(this); 8. Troubleshooting Symptom Cause Remedy No handlers called Forgot to keep IDisposable alive OR Owner was GC’d Store the subscription reference or use EventBridge.Subscribe overload without owner. Handler runs twice Duplicate subscription Supply handlerHash or unsubscribe correctly. “Unhandled exception in handler” logs PublishSafe* swallowed but logged an error Fix logic or switch to Publish during debugging. TL;DR EventBus = zero‑friction, type‑safe messaging. EventBridge = curated catalogue of game‑level events + helper APIs. Subscribe‑Publish‑Unsubscribe in 3 lines, with async and safe variants. Use it to keep your RisingV code loose‑coupled and hot‑reload‑friendly."
  },
  "docs/Logging.html": {
    "href": "docs/Logging.html",
    "title": "Logging Framework | RisingV.Shared",
    "summary": "Logging Framework Namespace: RisingV.Shared.Logging Assembly: RisingV.Shared The RisingV Logging abstraction provides a lightweight facade over BepInEx’s log API, wrapping it with: Structured messages (ILogger.Log(level, message, params)) Static factory that binds loggers to calling types (Logger.Create<T>()) Tag system for feature‑level filtering 1. Quick‑Start using RisingV.Shared.Logging; public class CombatEngine { private static readonly Logger Log = Logger.Create<CombatEngine>(); public void DealDamage(Entity target, int amount) { Log.Debug(\"Dealing {} to {}\", amount, target); // … } } Output (with default template): [17:02:18] [DEBUG] [CombatEngine] Dealing 23 to Entity(0xABCD) 2. Core Types Type Role Logger Thin wrapper, created via Logger.Create<T>() or Logger.Create(string tag) LogLevel Enum: Trace, Debug, Info, Warn, Error, Fatal LogTags Static class of common subsystem tags (Managers, Engines, DB, …) Logger public sealed class Logger { public void Log(LogLevel lvl, string msg, params object?[] args); public void Trace(string msg, params object?[] args); public void Debug(string msg, params object?[] args); public void Info (string msg, params object?[] args); public void Warn (string msg, params object?[] args); public void Error(string msg, params object?[] args); public void Fatal(string msg, params object?[] args); } 3. Tag‑Based Filtering Logger instances can inject an optional tag; sinks may decide to ignore or format differently. var Log = Logger.Create<DatabaseManager>(LogTags.Databases); Log.Info(\"Loaded {} entries\", count); 4. High‑Performance Tips Prefer param string concat, will avoid string manipulation if the log level is disabled: Log.Debug(\"Player {} killed {}\", player.Id, enemy.Name); Wrap hot‑loop logs in if (Log.IsDebugEnabled) guards. TL;DR Logger.Create<T>() → log in 1 line. Tag & level filters keep output readable."
  },
  "docs/Managers.html": {
    "href": "docs/Managers.html",
    "title": "Manager Abstraction | RisingV.Shared",
    "summary": "Manager Abstraction Namespaces: RisingV.Shared.Managers, RisingV.Shared.Extensions, RisingV.Shared.Collections Assemblies: RisingV.Shared The manager framework gives RisingV plugins a uniform, pluggable way to register, track, and hot‑reload feature modules (“manageable objects”). It is built around five core ideas: Concept Purpose IManageable Marker interface for anything that belongs to a manager. IManager Orchestrator that owns one or more manageables. IManagerSource Pluggable repository that stores and enumerates manageables. ManagerBase<T, TM> Generic skeleton that implements the full lifecycle and event hooks. TypeMapManager<T, TM> Ready‑made base using an insertion‑ordered map for storage. Together they let you spin up new subsystems in minutes while preserving discoverability, dependency injection, and reload safety. 1. Key Interfaces IManageable & IManageable<TManager> public interface IManageable { } public interface IManageable<in TManager> : IManageable where TManager : class, IManager { } Any class that should be owned by a manager implements one of these. The generic flavour lets the manageable know which manager type controls it, unlocking strongly‑typed callbacks later on. IManager public interface IManager { bool IsInitialized { get; } bool IsLoaded { get; } bool IsReady { get; } void Initialize(IPlugin plugin); void Load(IPlugin plugin); void Ready(IPlugin plugin); void Reload(IPlugin plugin, ReloadReason reason); void Unload(IPlugin plugin); void Terminate(IPlugin plugin); } Every manager exposes the 6‑stage lifecycle (see §3) plus a few helpers (Add/Remove/Get/Has) that delegate to its source. IReloadable / ReloadReason Manageables may implement IReloadable to react to hot‑reload signals triggered by file changes or admin commands. public sealed record ReloadReason( string Reason, IReadOnlyList<FileChange>? Changes = null, bool IsForced = false, bool IsCritical = false, bool IsFull = false, string? Key = null); ITypeSource A minimal CRUD abstraction returning instances keyed by Type. Managers compose one of these so they stay agnostic of the underlying store. 2. Core Classes ManagerBase<TManageable, TSelf> An abstract class that: Implements IManager Tracks state (IsInitialized, IsLoaded, IsReady) Subscribes/unsubscribes to global events via EventBridge Delegates storage to Source (an IManagerSource) Provides convenience wrappers: public TX? Add<TX>(IPlugin plugin) where TX : TManageable; public void Add<TX>(IPlugin plugin, TX obj); public bool Remove<TX>() where TX : TManageable; public TX? Get<TX>(bool required = true) where TX : TManageable; public bool Has<TX>() where TX : TManageable; Tip – derive directly from ManagerBase only if you need exotic storage. Most projects should extend TypeMapManager. ManagerSource<TManageable, TManager> A reusable base for writing custom IManagerSources. Takes care of plugin ownership and logging. TypeMapManager<TManageable, TManager> The batteries‑included implementation. Internally it uses an OrderedMap<Type,T> so enumeration order matches insertion order, making debugging predictable and enabling simple LRU‑style eviction if you ever need it. public abstract class CombatSystemManager : TypeMapManager<ICombatSystem, CombatSystemManager> { protected override Logger Log { get; } = Logger.Create<CombatSystemManager>(); } 3. The Manager Lifecycle ┌──────────┐ ┌──────────┐ ┌──────────┐ │Initialize│ ──► │ Load │ ──► │ Ready │ └──────────┘ └──────────┘ └──────────┘ ▲ │ │ │ ▼ ▼ ┌──────────┐ ┌──────────┐ ┌──────────┐ │Terminate │ ◄── │ Unload │ ◄── │ Reload │ └──────────┘ └──────────┘ └──────────┘ Stage Typical Responsibility Initialize Allocate the Source, register default manageables. Load Wire external dependencies, read config files. Ready Final handshake after all managers are loaded – safe point to emit events. Reload Refresh config or state without a full restart (hot‑swap). Unload Free resources, unsubscribe events. Terminate Final shutdown (called once). All state transitions are idempotent – calling Load twice does nothing once IsLoaded=true. 4. Creating Your Own Manager public interface IWeaponSystem : IManageable<WeaponManager> { } public sealed class RangedSystem : IWeaponSystem { /* … */ } public sealed class WeaponManager : TypeMapManager<IWeaponSystem, WeaponManager> { protected override Logger Log { get; } = Logger.Create<WeaponManager>(); public override void Initialize(IPlugin plugin) { base.Initialize(plugin); Add<RangedSystem>(plugin); // auto‑instantiated } } And from your plugin OnInitialize: var weaponManager = AddSharedComponent<WeaponManager>(this); Hot‑reload support: weaponManager.Reload(this, new ReloadReason(\"Config changed\", changes: fileChanges, isFull:false)); 5. Best Practices One responsibility per manageable – keeps dependency graphs shallow. Prefer TypeMapManager unless you need multi‑key or sharded storage. Implement IReloadable on manageables for zero‑downtime tweaks. Toggle subsystems at runtime by exposing an Enabled config entry. Call Ready only after every manager has loaded to avoid race conditions. 6. Troubleshooting Symptom Likely Cause Fix MissingRequiredException on Ready Dependency manager not loaded Check plugin load order, call Add in Initialize Repeated Load logs Manager called twice Guard with IsLoaded (handled by base class but avoid manual calls) No reaction to file edits Manageable lacks IReloadable Implement Reload and return true from OnReload TL;DR The manager abstraction lets you compose complex subsystems from small, self‑contained units and still enjoy: Deterministic lifecycle hooks Hot‑reload with zero downtime Strong compile‑time typing (no string keys) Centralised logging and diagnostics Use it to keep your RisingV codebase organised, testable, and future‑proof."
  },
  "docs/Plugins.html": {
    "href": "docs/Plugins.html",
    "title": "Plugins Abstraction | RisingV.Shared",
    "summary": "Plugins Abstraction Namespaces: RisingV.Shared.Plugins, RisingV.Shared.Config, RisingV.Shared.Logging Assemblies: RisingV.Shared The Plugins abstraction is the entry‑point layer that lets you build modular, self‑contained feature packs for RisingV. It wraps the raw BepInEx BasePlugin base class with: A uniform 6‑stage lifecycle shared by every RisingV subsystem. First‑class configuration binding via BaseConfig. Automatic manager wiring (Engines, Databases, Systems, …). Tight integration with the Logging & EventBus frameworks. 1. Core Contracts Contract Purpose IPlugin Read‑only metadata + lifecycle signatures. BasePlugin Convenience abstract base: derives from BasePlugin, auto‑registers with PluginManager, exposes virtual hooks. PluginConfig Structured config holder (inherits BaseConfig). PluginManager Central registry & orchestrator (TypeMapManager<IPlugin, PluginManager>). IPlugin public interface IPlugin { string Guid { get; } string Name { get; } Version Version { get; } string Author { get; } bool IsInitialized { get; } bool IsLoaded { get; } bool IsReady { get; } void Initialize(); void Load(); void Ready(); void Reload(ReloadReason reason); void Unload(); void Terminate(); } Note – The three boolean properties are idempotent guards; your override must call base.*() to keep them in sync. BasePlugin Adds: protected Logger Log created from plugin GUID. public PluginConfig Config auto‑instantiated; override CreateConfig() to supply a custom subclass. Helper accessors for common managers (Engines, Databases, Systems, …). Shorthand Publish & Subscribe wrappers for EventBridge. 2. Lifecycle Flow ┌──────────┐ ┌──────────┐ ┌──────────┐ │Initialize│ ──► │ Load │ ──► │ Ready │ └──────────┘ └──────────┘ └──────────┘ ▲ │ │ │ ▼ ▼ ┌──────────┐ ┌──────────┐ ┌──────────┐ │Terminate │ ◄── │ Unload │ ◄── │ Reload │ └──────────┘ └──────────┘ └──────────┘ Stage Typical Responsibilities Initialize Create & register managers, bind config entries, seed data. Load Connect to external systems (DB, network), allocate heavy objects. Ready Fire game events; safe to interact with other plugins (all loaded). Reload Hot‑apply modified configs or resources. Unload Dispose large caches, stop threads, detach from events. Terminate Final cleanup; called on server shutdown. 3. Quick‑Start Skeleton using BepInEx; using RisingV.Shared.Plugins; using RisingV.Shared.Engines; using RisingV.Core.Engines; public class MyCoolPluginConfig() : PluginConfig(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_GUID) { public ConfigEntry<float> AttackModifier { get; set; } = new(\"Gameplay\", \"AttackModifier\", 1f, \"Modifier for attack damage\"); } public class MyCoolPluginContext() : PluginContext(typeof(MyPluginInfo), new MyCoolPluginConfig()); [BepInPlugin(MyPluginInfo.PLUGIN_GUID, MyPluginInfo.PLUGIN_NAME, MyPluginInfo.PLUGIN_VERSION)] [BepInDependency(\"gg.deca.VampireCommandFramework\")] [BepInDependency(\"RisingV.Core\")] [BepInDependency(\"RisingV.Scripting\")] public class Plugin : RisingPlugin<MyCoolPluginContext> { protected override void OnLoad() { // Plugin startup logic (pre-initialization) } protected override bool OnUnload() { return true; } protected override void RegisterEngines(EngineManager engineManager) { engineManager.AddEngine<ScriptingEngine>(this); engineManager.AddEngine<DamageEngine>(this); engineManager.AddEngine<DeathEngine>(this); } // You can also override other methods to register systems, processors, databases, etc. } Tip – For most plugins you can skip overriding anything except Ready because BasePlugin already calls Load & Ready on all registered managers. 4. PluginConfig Pattern public sealed class LootTweaksConfig : PluginConfig { public ConfigEntry<float>? Multiplier { get; private set; } public override void Load() { base.Load(); Multiplier = Bind(\"General\", \"Multiplier\", 2f, \"Multiply boss loot counts by this factor.\"); } } PluginConfig inherits BaseConfig, so you get the same queue‑based binding, Enabled entry, and hot‑reload hooks. 5. PluginManager Located in RisingV.Shared.Plugins. Registers all plugins found via reflection ([Plugin] attribute) and those instantiated manually in tests. Sorts by dependency graph (plugins may declare [PluginDependency(\"Guid\")]). Provides ReloadAll, UnloadAll, TerminateAll helpers—called by the RisingV bootstrap on server restart. 6. Best Practices One feature per plugin – keeps dependencies obvious. Put long‑running threads behind SystemManager or EngineManager. Use ReloadReason.IsFull to trigger heavy re‑initialisations only on manual reloadall commands. Expose user‑configurable toggles via ConfigEntry<bool> so server admins can disable sub‑features without removing DLLs. 7. Troubleshooting Symptom Likely Cause Fix Plugin stuck at “Loaded” Forgot to call Ready() on a manager Ensure base.Ready() call or manual ready propagation. NullReferenceException on Config Accessing bindings in constructor Move Bind calls to Load(). Circular plugin dependency [PluginDependency] loop Break loop or make one dependency optional. TL;DR BasePlugin gives you structured metadata, config, logging, and a uniform lifecycle. Register managers in Initialize, heavy‑load in Load, interact in Ready. Hot‑reload without server restarts via Reload. This abstraction keeps RisingV mods consistent, robust, and hot‑swappable."
  },
  "docs/Processors.html": {
    "href": "docs/Processors.html",
    "title": "Processor Abstraction | RisingV.Shared",
    "summary": "Processor Abstraction Namespaces: RisingV.Shared.Processors, RisingV.Shared.Managers Assembly: RisingV.Shared The Processor abstraction gives RisingV a lightweight, opt‑in pipeline for running discrete logic units (processors) before and after important operations—combat rolls, economy ticks, command execution, you name it—while plugging straight into the familiar Manager lifecycle. Plugin └─ ProcessorManager ├─ DamageProcessor ├─ LootProcessor └─ AnalyticsProcessor Each processor decides whether it can handle an incoming event and then returns a ProcessToken (Continue, Skip, or Cancel) plus an optional result back to the caller. 1. Key Interfaces & Types Contract Purpose IProcessor Marker that ties a processor to ProcessorManager. IProcessor<T, TR> Generic handler for events of type T producing result TR. ProcessToken Enum instructing the caller to Continue, Skip, or Cancel further processing. ProcessorBase<T, TR> Abstract utility base that wires common boiler‑plate. DefaultProcessor<T> Convenience type alias of ProcessorBase<T, bool?> – useful for yes/no flows. ProcessorManager A TypeMapManager implementation that registers processors and orchestrates lifecycle. IProcessor<T, TR> public interface IProcessor<in T, TR> : IProcessor { bool CanProcess(T @event, bool isPost); ProcessToken PostProcess(T @event, out TR? result); } @event – the incoming domain object. isPost – false for pre‑processing, true for post‑processing. result – custom output, may be null. ProcessToken Value Behaviour Continue Proceed to next processor / default logic. Skip Stop executing further processors but let default logic run. Cancel Abort the entire operation; caller should roll back. 2. ProcessorBase<T, TR> public abstract class ProcessorBase<T, TR> : IProcessor<T, TR> { public abstract bool CanProcess(T @event, bool isPost); public abstract ProcessToken PostProcess(T @event, out TR? result); // Optional helper for pre‑processing public virtual ProcessToken PreProcess(T @event, out TR? result) => ProcessToken.Continue; } Override the two abstract methods and you’re done. ProcessorBase supplies no‑op default implementations so you only implement the bits you need. 3. ProcessorManager public class ProcessorManager : TypeMapManager<IProcessor, ProcessorManager>, IPluginComponent { // Add/Remove/Get helpers generated for clarity public T? AddProcessor<T>(IPlugin p, bool fail=true) where T : IProcessor; public void RemoveProcessor<T>(IPlugin p) where T : IProcessor; public T? GetProcessor<T>(bool required=true) where T : IProcessor; } It inherits the full Initialize → Load → Ready → Reload → Unload → Terminate state machine from ManagerBase, so you can treat it just like EngineManager or DatabaseManager. Typical plugin set‑up: _processors = new ProcessorManager(); _processors.Initialize(this); _processors.AddProcessor<DamageProcessor>(this); _processors.Load(this); _processors.Ready(this); 4. End‑to‑End Example Step 1: Create a Domain Event public record DamageEvent(Entity Attacker, Entity Target, float Amount); Step 2: Implement a Processor public sealed class PvpFlagProcessor : ProcessorBase<DamageEvent, bool?> { public override bool CanProcess(DamageEvent e, bool post) => !post && e.Target.IsPlayer && e.Attacker.IsPlayer; public override ProcessToken PostProcess(DamageEvent e, out bool? result) { if (!e.Target.IsPvpEnabled) { result = false; // block damage return ProcessToken.Cancel; } result = null; return ProcessToken.Continue; } } Step 3: Use the Pipeline bool ApplyDamage(DamageEvent e) { foreach (var proc in _processors) { if (!proc.CanProcess(e, isPost:false)) continue; var token = proc.PostProcess(e, out bool? allow); if (token == ProcessToken.Cancel) return false; if (token == ProcessToken.Skip) break; } GameAPI.DealDamage(e.Target, e.Amount); return true; } 5. Integration Patterns Pattern Description Validation Run a chain of processors to validate a command; Cancel on first failure. Modifier Stack Each processor mutates the event/result (e.Amount *= 0.9f), returns Continue. Analytics Tap Processors with CanProcess(..., post=true) consume post phase events and forward to telemetry services. Fallback Use DefaultProcessor<T> to attempt multiple strategies until one returns true. 6. Best Practices Keep processors stateless when possible; rely on injected services. Return Skip sparingly—prefer predictable Continue/Cancel. Group related processors under dedicated managers (CombatProcessorManager) to keep lookup sets small. Log decisions at Debug level with Logger.Create<YourProcessor>(). Combine with EventBus—publish pipeline outcome as an event for complete decoupling. 7. Troubleshooting Symptom Possible Cause Resolution Processors never fire Not added to manager or CanProcess returns false Add during Initialize; validate predicate. Unexpected Cancel Processor logic bug Enable Trace logging to inspect tokens. Performance hit Too many processors in hot loop Split managers by domain or memoize expensive checks. TL;DR Processor = mini‑middleware layer for event pipelines. ProcessToken controls flow (Continue → next, Skip → stop processors, Cancel → abort). ProcessorManager plugs into the same lifecycle as other RisingV managers. Use processors to validate, transform, or veto operations without tightly coupling modules."
  },
  "docs/StringResources.html": {
    "href": "docs/StringResources.html",
    "title": "String Resources | RisingV.Shared",
    "summary": "String Resources Namespaces: RisingV.Shared.Strings Stunlock.Core (for PrefabGUID & Unit enums) RisingV.Shared.Prefabs (for Unit enum lookup) ProjectM.Terrain (for WorldRegionType enum lookup) Assembly: RisingV.Shared This document describes four “string‐helper” classes that centralize human‐readable names (long and short) for various game objects—items, prefabs, units, and world regions. Each class exposes static lookups or methods so that, given a numeric ID (GUID or enum), you can obtain a display name without scattering string literals throughout your code. 1. ItemStrings namespace RisingV.Shared.Strings; /// <summary> /// Provides methods to retrieve strings (such as display names or tooltips) for items. /// </summary> public class ItemStrings { // (Currently empty; intended for future expansion.) } Purpose A placeholder/resolver for future item‐related string lookups (e.g., “Iron Sword”, “Health Potion”). Since no members are defined yet, you can extend this class with your own dictionaries or methods to map an item’s internal ID to a localized/long/short name. Usage Example // eventually, you might write: string displayName = ItemStrings.GetLongName(itemPrefab.Guid); string tooltip = ItemStrings.GetDescription(itemPrefab.Guid); Note: As soon as you add item‐metadata (e.g., in JSON or a static dictionary), implement and expose static lookup methods here. 2. PrefabStrings using Stunlock.Core; namespace RisingV.Shared.Strings; /// <summary> /// Provides methods to retrieve string names for “prefab” GUIDs, /// re‐using the UnitStrings lookup under the hood. /// </summary> public static class PrefabStrings { /// <summary> /// Attempts to resolve the “long” name for a given PrefabGUID (game object). /// Delegates to UnitStrings.GetName if the GUID corresponds to a Unit. /// </summary> /// <param name=\"prefabGuid\">The GUID (integer ID) of a prefab.</param> /// <returns> /// The human‐readable name for that prefab (e.g., “Vampire Boss”), /// or null if no matching entry exists. /// </returns> public static string? GetName(PrefabGUID prefabGuid) { // Since some prefabs correspond to “Units” in the game, this method // simply casts to the Unit enum and calls UnitStrings.GetName. return UnitStrings.GetName(prefabGuid); } } Purpose To provide a unified “GetName” method for any prefab GUID, regardless of whether it’s a character/unit, an item, or a world object. Currently, it forwards requests to UnitStrings.GetName. You can extend it later if other prefab types (e.g., buildings, interfaces) require dedicated lookups. Key Member static string? GetName(PrefabGUID prefabGuid) Returns a string? (nullable) if the GUID exists in the underlying UnitStrings dictionary; otherwise returns null. Usage Example PrefabGUID someGuid = /* some GUID from game data */; string? name = PrefabStrings.GetName(someGuid); if (!string.IsNullOrEmpty(name)) Log.Info($\"Spawned prefab: {name}\"); else Log.Warn($\"Unknown prefab GUID: {someGuid}\"); 3. UnitStrings using RisingV.Shared.Prefabs; using Stunlock.Core; namespace RisingV.Shared.Strings; /// <summary> /// Provides a mapping of “Unit”‐type prefab GUIDs (longs) to their long and short names. /// </summary> public static class UnitStrings { /// <summary> /// The core lookup dictionary. Maps each Unit enum value to a (Long, Short) tuple. /// For example: /// Unit.VampireBoss → (“Vampire Boss Lord”, “Vampire Boss”) /// Unit.VampireMinion → (“Vampire Minion”, “Minion”) /// </summary> private static readonly Dictionary<Unit, (string Long, string Short)> PrefabToNames = new() { // Example entries (the real file contains all Unit enum values): { Unit.VampireBoss, (\"Vampire Boss Lord\", \"Vampire Boss\") }, { Unit.VampireMinion, (\"Vampire Minion\", \"Minion\") }, { Unit.SkeletonWarrior, (\"Skeleton Warrior\", \"Skeleton\") }, // … (many more entries) … }; /// <summary> /// Gets the long‐form name for a given prefab GUID (as a long). /// </summary> /// <param name=\"prefabGuid\">The numeric GUID of the unit prefab.</param> /// <returns> /// The “Long” name (e.g., “Vampire Boss Lord”), or null if not found. /// </returns> public static string? GetName(long prefabGuid) => GetName((Unit) prefabGuid); /// <summary> /// Gets the long‐form name for a given Unit enum value. /// </summary> /// <param name=\"unit\">The Unit enum key.</param> /// <returns> /// The “Long” name (e.g., “Skeleton Warrior”), or null if not found. /// </returns> public static string? GetName(Unit unit) { return PrefabToNames.TryGetValue(unit, out var names) ? names.Long : null; } /// <summary> /// Gets the short‐form name for a given prefab GUID (as a long). /// </summary> /// <param name=\"prefabGuid\">The numeric GUID of the unit prefab.</param> /// <returns> /// The “Short” name (e.g., “Vampire Boss”), or null if not found. /// </returns> public static string? GetShortName(long prefabGuid) => GetShortName((Unit) prefabGuid); /// <summary> /// Gets the short‐form name for a given Unit enum value. /// </summary> /// <param name=\"unit\">The Unit enum key.</param> /// <returns> /// The “Short” name (e.g., “Minion”), or null if not found. /// </returns> public static string? GetShortName(Unit unit) { return PrefabToNames.TryGetValue(unit, out var names) ? names.Short : null; } } Purpose A central dictionary that associates every Unit enum (which itself represents underlying prefab GUIDs) with two human‐readable strings: Long name: typically a fully descriptive title. Short name: a brief label for UI. Key Members private static readonly Dictionary<Unit, (string Long, string Short)> PrefabToNames Holds the entire mapping of Unit → (Long, Short). public static string? GetName(long prefabGuid) and GetName(Unit unit) Return the “Long” name, or null if the unit isn’t in the dictionary. public static string? GetShortName(long prefabGuid) and GetShortName(Unit unit) Return the “Short” name, or null if not found. Usage Examples long bossGuid = (long) Unit.VampireBoss; string? longName = UnitStrings.GetName(bossGuid); // “Vampire Boss Lord” string? shortName = UnitStrings.GetShortName(bossGuid); // “Vampire Boss” Unit someUnit = Unit.SkeletonWarrior; Log.Info($\"Spawning: {UnitStrings.GetShortName(someUnit)}\"); 4. WorldStrings using ProjectM.Terrain; namespace RisingV.Shared.Strings; /// <summary> /// Provides string representations for world “region” types in the game. /// </summary> public static class WorldStrings { /// <summary> /// Maps each WorldRegionType enum to a (Long, Short) tuple. /// For example: /// WorldRegionType.Forest → (“The Darkwood Forest”, “Forest”) /// WorldRegionType.Swamp → (“Mordregahm’s Swamp”, “Swamp”) /// </summary> public static readonly Dictionary<WorldRegionType, (string Long, string Short)> WorldRegionToName = new() { { WorldRegionType.Forest, (\"The Darkwood Forest\", \"Forest\") }, { WorldRegionType.Swamp, (\"Mordregahm’s Swamp\", \"Swamp\") }, { WorldRegionType.CrystalCaves, (\"Crystal Caves\", \"Caves\") }, // … (many more region entries) … }; /// <summary> /// Gets the long‐form region name for a given region enum. /// </summary> /// <param name=\"region\">The WorldRegionType key.</param> /// <returns> /// The “Long” name (e.g., “The Darkwood Forest”), or throws if `region` isn’t in the dictionary. /// </returns> public static string GetRegionName(WorldRegionType region) => WorldRegionToName[region].Long; /// <summary> /// Gets the short‐form region name for a given prefab GUID (as an int). /// </summary> /// <param name=\"prefabGuid\">The integer GUID corresponding to a WorldRegionType.</param> /// <returns> /// The “Short” name (e.g., “Forest”), or throws if the GUID isn’t in the dictionary. /// </returns> public static string GetRegionShortName(int prefabGuid) => WorldRegionToName[(WorldRegionType) prefabGuid].Short; } Purpose Converts between WorldRegionType (enum values that correspond to in‐game terrain/region identifiers) and human‐readable location names. Each entry pairs a “Long” descriptive string (for tooltips, lore screens) with a “Short” label (for UI elements, minimaps). Key Members public static readonly Dictionary<WorldRegionType, (string Long, string Short)> WorldRegionToName Contains every mapping from the game’s WorldRegionType enum to a (Long, Short) name tuple. public static string GetRegionName(WorldRegionType region) Returns the “Long” string. Throws KeyNotFoundException if the region is absent. public static string GetRegionShortName(int prefabGuid) Casts the numeric GUID → WorldRegionType and returns the “Short” string. Throws if missing. Usage Example WorldRegionType someRegion = WorldRegionType.Swamp; Log.Info($\"Entering region: {WorldStrings.GetRegionName(someRegion)}\"); // “Mordregahm’s Swamp” int regionGuid = (int) WorldRegionType.Forest; string shortLabel = WorldStrings.GetRegionShortName(regionGuid); // “Forest” 5. Integration & Best Practices Single Source of Truth By centralizing all “string lookups” into these four static classes, you avoid scattering literals or duplicating mappings across plugins. If a name changes (e.g., you rename “Vampire Boss Lord” → “Vampire Overlord”), update only UnitStrings (or WorldStrings), and every plugin sees the new name immediately. Nullable Return Conventions PrefabStrings.GetName and UnitStrings.GetShortName return string?. If a lookup fails (key not found), you get null rather than an exception—make sure to check for null before using the result. In contrast, WorldStrings.GetRegionName and GetRegionShortName assume the region exists and will throw if it doesn’t. Use WorldRegionToName.ContainsKey(...) if you need to guard against missing entries. Enum Casting All underlying lookups rely on an integer‐to‐enum cast ((Unit) prefabGuid, (WorldRegionType) prefabGuid). Ensure that the numeric GUIDs passed into these methods actually correspond to valid enum values. Invalid casts will lead to runtime exceptions or unexpected behavior. Extending for New Types If your mod introduces custom “prefab” categories (for example, new building types or unique items), implement similar static dictionaries in ItemStrings or create a new helper under RisingV.Shared.Strings. You can also overload PrefabStrings.GetName to internally route to the correct specialized class (e.g., ItemStrings, StructureStrings, etc.) based on a GUID‐range or prefix convention. Localization Currently, these classes are English‐only. If you plan to support multiple languages, consider changing each dictionary to map (Unit, LanguageCode) → (string Long, string Short), or wrap the lookup in a LocalizationManager that returns translated strings based on the player’s locale. Summary Collectively, these four classes provide a concise, type‐safe way to retrieve display names for: Items (future expansion via ItemStrings) Prefabs (generic façade via PrefabStrings.GetName) Units (names of creatures, NPCs, bosses via UnitStrings) World Regions (terrain zones, biomes via WorldStrings) By referencing these helpers, your gameplay code can remain clean (no hard‐coded string literals) and maintainable (single location for all in‐game English names). Whenever you introduce new game assets or regions, simply add the corresponding enum entry and update the dictionary in one of these classes—every plugin that uses them will automatically pick up the changes. End of documentation for RisingV.Shared.Strings helper classes."
  },
  "docs/Systems.html": {
    "href": "docs/Systems.html",
    "title": "Systems Abstraction | RisingV.Shared",
    "summary": "Systems Abstraction Namespaces: RisingV.Shared.Systems, RisingV.Shared.Managers Assembly: RisingV.Shared The Systems abstraction is the lightest layer on top of the Manager framework, aimed at orchestrating game‐loop tickers—logic that runs every server tick, physics step, or fixed interval (think Update in Unity’s ECS). Plugin └─ SystemManager ├─ HealthRegenSystem ├─ WeatherSystem └─ SpawnCleanupSystem Each system supplies: Update(float dt) – executed once per tick. Optional stages (PreUpdate, PostUpdate). IsEnabled flag that can be toggled at runtime or via config. 1. Core Contracts Contract Purpose ISystem Marker; ties a system to SystemManager. ITickSystem Adds the Update method with delta‐time parameter. IStageSystem Adds optional PreUpdate / PostUpdate hooks. SystemBase Convenience abstract base that wires logging, enable flag, and config binding. SystemManager TypeMapManager that registers systems and drives the tick loop. ISystem & ITickSystem public interface ISystem : IManageable<SystemManager> { bool IsEnabled { get; } } public interface ITickSystem : ISystem { void Update(float deltaTime); } IStageSystem (Optional) public interface IStageSystem : ITickSystem { void PreUpdate(float dt) { } void PostUpdate(float dt) { } } SystemBase Provides: protected readonly Logger Log protected ConfigEntry<bool>? EnabledEntry (auto‐bound) Virtual OnEnable() / OnDisable() for side‐effects. public abstract class SystemBase : IStageSystem { public virtual bool IsEnabled => EnabledEntry?.Value ?? true; public virtual void PreUpdate(float dt) { } public abstract void Update(float dt); public virtual void PostUpdate(float dt) { } } 2. SystemManager public sealed class SystemManager : TypeMapManager<ISystem, SystemManager>, IPluginComponent { public float TimeScale { get; set; } = 1f; // Tick driver – call from plugin’s server loop public void Tick(float deltaTime) { deltaTime *= TimeScale; foreach (var sys in this.Enumerate<ITickSystem>()) { if (!sys.IsEnabled) continue; if (sys is IStageSystem stage) stage.PreUpdate(deltaTime); sys.Update(deltaTime); if (sys is IStageSystem stage2) stage2.PostUpdate(deltaTime); } } } Lifecycle mirrors other managers (Initialize → Load → Ready …) so systems can perform heavy allocation in Load and start ticking only after Ready. 3. Typical Usage // Plugin field public override void OnInitialize() { SystemManager.AddSystem<HealthRegenSystem>(this); SystemManager.AddSystem<WeatherSystem>(this); } // If you want to handle the ticks manually, e.g. in a server loop, you can do so: // Make sure the SystemManager.UseBuiltInTickRunner is set to false. public void OnServerTick(float dt) => _systems.Update(dt); Creating a system: public sealed class HealthRegenSystem : SystemBase { public override void Update(float dt) { foreach (var player in PlayerDatabase.All) player.AddHealth(0.5f * dt); } } 4. Advanced Features Feature Description TimeScale Speed up / slow down simulation (0 pauses all systems). Dynamic Add/Remove Add or unload systems at runtime; manager updates enumeration cache safely. Priority Sorting (Optional) Override SystemManager.OrderItems to sort by custom attribute [SystemPriority]. Hot Reload Systems implementing IReloadable will receive config changes without restart. 5. Best Practices Keep per‐tick work tiny—heavy jobs belong in asynchronous Tasks or Jobs. Use deltaTime rather than Time.fixedDeltaTime constants to remain framerate‐independent. Toggle systems via config (EnabledEntry) for fast iteration. Log at Trace in hot paths; strip in release builds. 6. Troubleshooting Symptom Possible Cause Remedy System never runs Not registered / IsEnabled=false Add in Initialize; check config. Stutter spikes Heavy logic in Update Profile; move to job threads or cache expensive lookups. Tick order wrong Dependencies between systems Implement priority attribute or split into multiple managers. TL;DR System = ticked logic module with optional pre/post stages. SystemManager orchestrates updates and plugs into the Manager lifecycle. Use for timers, regen, world effects, cleanups—any looped behaviour that doesn’t justify a full Engine."
  },
  "index.html": {
    "href": "index.html",
    "title": "| RisingV.Shared",
    "summary": "Common utilities and building-blocks for every other RisingV mod. This library provides a set of APIs and utilities that make it easier to create and manage mods for V Rising. RisingV.Shared is designed to be an unopinionated library that does not depend on any other RisingV mod or game data (data that will break upon game updates), so it can be used standalone. “RisingV.Shared is a shared mod for V Rising that allows you to use RisingV mods. It provides a set of APIs and utilities that make it easier to create and manage mods for V Rising.” Features Feature Link Description Aspecting Docs An aspect wraps a target instance and exposes a tailored API for cross‑cutting concerns (validation, convenience methods, helper logic, etc.) while preserving the original model’s purity. Event bus Docs decoupled, async pub-sub pipeline for game-wide events. Engine modules Docs modular architecture for loading/unloading systems, processors and hooks. Config base Docs hot-reloadable config manageable class with type-safe access. Custom collections Docs generic collections like TypeKeyedMap<T>, TimestampedMap<K,V>, etc. Database abstraction Docs a database API for storing and retrieving data, with support for JSON or Maps. Comprehensive extensions Docs Class extensions for common operations on Entity, collections, strings, and more. File system observers Docs watch for file changes with a simple API. Manager abstraction Docs a base class for managing game objects with automatic object management with a lifecycle. Plugin base API Docs a base class for creating BepInEx plugins with a managed lifecycle. Processor system Docs a high-level abstraction for processing game objects/events in a type-safe manner. Strings and localization Docs a simple string localization system with support for multiple languages. Systems Docs a high-level abstraction for creating and managing systems for use in RisingV mods. Logging facade Docs a unified logging interface with support for tagging and levels. Utilities Docs various utility classes for common tasks. Note: This may not be the entire list—refer to the API docs for every class, interface, and extension method that RisingV.Shared provides. Installation dotnet add package RisingV.Shared Prerequisites V Rising (vanilla game/dedicated server installed) BepInEx (version compatible with your V Rising installation) Build/Download Clone or download the latest RisingV.Shared.<version>.zip from the Releases. Deploy Extract the zip file to your /BepInEx directory. Quick start // Added to your plugin class [BepInDependency(\"RisingV.Shared\")] Configurations RisingV.Shared.Config has a base class configuration management class BaseConfig. This allows you to define your plugin's configuration in a type-safe manner, with support for hot-reloading and easy access to configuration values. It also means that majority of the systems/components in the RisingV ecosystem can be configured via json files. BepInEx/configs └── RisingV.Shared └── RisingV.Shared.cfg Documentation For a deeper dive, API reference, and design docs see https://docs.risingv.dev/shared. Contributing PRs that add new functionality—or improve existing ones—are warmly welcomed. Please open an issue first if you plan a large refactor. See CONTRIBUTING.md for more information. Community Join the V Rising Mod Community Discord for modding support, updates, and discussions! License GNU GPL-3.0. See LICENSE for details."
  }
}