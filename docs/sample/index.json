{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| RisingV.Sample",
    "summary": "latest 0.1.0"
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "CONTRIBUTING to RisingV | RisingV.Sample",
    "summary": "CONTRIBUTING to RisingV"
  },
  "README.html": {
    "href": "README.html",
    "title": "Purpose | RisingV.Sample",
    "summary": "A sample project for integrating RisingV mods. Purpose Mod Integration: Demonstrates how to integrate RisingV mods into a project. Mod Management: Shows how to manage mods using the RisingV plugin. Mod Development: Provides a foundation for developing your own RisingV mods. Community Support: Join the RisingV community for help and collaboration. Getting Started Before starting: Check which branch best fits your need: main full use example (current) no-plugin full example without using RisingVPlugin lite light weight sample with only RisingV.Shared and BepInEx base plugin. Clone the Repository: git clone https://github.com/RisingV-Mods/RisingV.Sample.git cd RisingV.Sample Install Dependencies: dotnet add package RisingV.Shared dotnet add package RisingV.Core dotnet add package RisingV.Scripting Build the Project: dotnet build RisingV.Sample/RisingV.Sample.csproj Check the shared docs for more details on how to use the RisingV plugin and integrate mods into your project. Community Join the V Rising Mod Community Discord for modding support, updates, and discussions! License GNU GPL-3.0. See LICENSE for details."
  },
  "api/RisingV.Sample.Engines.SampleEngine.html": {
    "href": "api/RisingV.Sample.Engines.SampleEngine.html",
    "title": "Class SampleEngine | RisingV.Sample",
    "summary": "Class SampleEngine Namespace RisingV.Sample.Engines Assembly RisingV.Sample.dll public class SampleEngine : Engine<SampleEngineConfig>, IEngine<SampleEngineConfig>, IEngine, IManageableLifecycle<EngineManager>, IManageableLifecycle, IReloadable, IManageable<EngineManager>, IManageable Inheritance object Engine<SampleEngineConfig> SampleEngine Implements IEngine<SampleEngineConfig> IEngine IManageableLifecycle<EngineManager> IManageableLifecycle IReloadable IManageable<EngineManager> IManageable Inherited Members Engine<SampleEngineConfig>.Reload(EngineManager, List<IPlugin>, ReloadReason) Engine<SampleEngineConfig>.Initialize(EngineManager, List<IPlugin>) Engine<SampleEngineConfig>.Terminate(EngineManager, List<IPlugin>) Engine<SampleEngineConfig>.Unload(EngineManager, List<IPlugin>) Engine<SampleEngineConfig>.OnReload(EngineManager, ReloadReason) Engine<SampleEngineConfig>.OnDependencyLoaded(Type, EngineManager, List<IPlugin>) Engine<SampleEngineConfig>.GetDependencies<TX>() Engine<SampleEngineConfig>.GetDependencies() Engine<SampleEngineConfig>.GetRecommended<TX>() Engine<SampleEngineConfig>.GetRecommended() Engine<SampleEngineConfig>.Config Engine<SampleEngineConfig>.Enabled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Dependencies protected override List<Dependency> Dependencies { get; } Property Value List<Dependency> Recommended protected override List<Dependency> Recommended { get; } Property Value List<Dependency> Methods Load(EngineManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin> Ready(EngineManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(EngineManager manager, List<IPlugin> plugins) Parameters manager EngineManager plugins List<IPlugin>"
  },
  "api/RisingV.Sample.Engines.SampleEngineConfig.html": {
    "href": "api/RisingV.Sample.Engines.SampleEngineConfig.html",
    "title": "Class SampleEngineConfig | RisingV.Sample",
    "summary": "Class SampleEngineConfig Namespace RisingV.Sample.Engines Assembly RisingV.Sample.dll public class SampleEngineConfig : EngineConfig, IEngineConfig, IFeatureConfig, IConfig Inheritance object BaseConfig FeatureConfig EngineConfig SampleEngineConfig Implements IEngineConfig IFeatureConfig IConfig Inherited Members EngineConfig.Deconstruct(out string, out string, out string, out string, out string, out bool) EngineConfig.AutoLoadDependencies FeatureConfig.Deconstruct(out string, out string, out string, out string, out string) FeatureConfig.Log FeatureConfig.Name FeatureConfig.Description FeatureConfig.Version FeatureConfig.Author BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Load() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SampleEngineConfig() public SampleEngineConfig()"
  },
  "api/RisingV.Sample.Engines.html": {
    "href": "api/RisingV.Sample.Engines.html",
    "title": "Namespace RisingV.Sample.Engines | RisingV.Sample",
    "summary": "Namespace RisingV.Sample.Engines Classes SampleEngine SampleEngineConfig"
  },
  "api/RisingV.Sample.Events.SampleEvent.html": {
    "href": "api/RisingV.Sample.Events.SampleEvent.html",
    "title": "Class SampleEvent | RisingV.Sample",
    "summary": "Class SampleEvent Namespace RisingV.Sample.Events Assembly RisingV.Sample.dll Represents a sample event for the EventBus system. ManagedEventBus public record SampleEvent : Event, IEvent, IEquatable<Event>, IEquatable<SampleEvent> Inheritance object Event SampleEvent Implements IEvent IEquatable<Event> IEquatable<SampleEvent> Inherited Members Event.ToString() Event.PrintMembers(StringBuilder) Event.GetHashCode() Event.Equals(object) Event.Equals(Event) Event.<Clone>$() Event.EqualityContract object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SampleEvent(string) Represents a sample event for the EventBus system. ManagedEventBus public SampleEvent(string Data) Parameters Data string Event data Properties Data Event data public string Data { get; init; } Property Value string"
  },
  "api/RisingV.Sample.Events.html": {
    "href": "api/RisingV.Sample.Events.html",
    "title": "Namespace RisingV.Sample.Events | RisingV.Sample",
    "summary": "Namespace RisingV.Sample.Events Classes SampleEvent Represents a sample event for the EventBus system. ManagedEventBus"
  },
  "api/RisingV.Sample.MyPluginInfo.html": {
    "href": "api/RisingV.Sample.MyPluginInfo.html",
    "title": "Class MyPluginInfo | RisingV.Sample",
    "summary": "Class MyPluginInfo Namespace RisingV.Sample Assembly RisingV.Sample.dll public static class MyPluginInfo Inheritance object MyPluginInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PLUGIN_GUID public const string PLUGIN_GUID = \"RisingV.Sample\" Field Value string PLUGIN_NAME public const string PLUGIN_NAME = \"RisingV.Sample\" Field Value string PLUGIN_VERSION public const string PLUGIN_VERSION = \"1.0.0\" Field Value string"
  },
  "api/RisingV.Sample.Plugin.html": {
    "href": "api/RisingV.Sample.Plugin.html",
    "title": "Class Plugin | RisingV.Sample",
    "summary": "Class Plugin Namespace RisingV.Sample Assembly RisingV.Sample.dll [BepInPlugin(\"RisingV.Sample\", \"RisingV.Sample\", \"1.0.0\")] [BepInDependency(\"gg.deca.VampireCommandFramework\", BepInDependency.DependencyFlags.HardDependency)] [BepInDependency(\"RisingV.Core\", BepInDependency.DependencyFlags.HardDependency)] [BepInDependency(\"RisingV.Scripting\", BepInDependency.DependencyFlags.HardDependency)] public class Plugin : RisingPlugin<SamplePluginContext>, IPlugin<SamplePluginContext>, IPlugin, IManageable<PluginManager>, IReloadable<PluginManager>, IReloadable, IDisposable, IHasPluginContext<SamplePluginContext>, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object BasePlugin RisingPlugin<SamplePluginContext> Plugin Implements IPlugin<SamplePluginContext> IPlugin IManageable<PluginManager> IReloadable<PluginManager> IReloadable IDisposable IHasPluginContext<SamplePluginContext> IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members RisingPlugin<SamplePluginContext>.Get() RisingPlugin<SamplePluginContext>.SetupConfiguration(PluginConfig) RisingPlugin<SamplePluginContext>.SetupSharedEventBus(ManagedEventBus) RisingPlugin<SamplePluginContext>.Dispose() RisingPlugin<SamplePluginContext>.Load() RisingPlugin<SamplePluginContext>.OnReload(IManager, List<IPlugin>, ReloadReason) RisingPlugin<SamplePluginContext>.Unload() RisingPlugin<SamplePluginContext>.OnReload(PluginManager, List<IPlugin>, ReloadReason) RisingPlugin<SamplePluginContext>.Reload(PluginManager, List<IPlugin>, ReloadReason) RisingPlugin<SamplePluginContext>.Reload(PluginManager, ReloadReason) RisingPlugin<SamplePluginContext>.GetSharedComponent(Type) RisingPlugin<SamplePluginContext>.GetSharedComponent<TX>() RisingPlugin<SamplePluginContext>.AddSharedComponent<T>(IPlugin, bool) RisingPlugin<SamplePluginContext>.AddSharedComponent<T>(IPlugin, T, bool) RisingPlugin<SamplePluginContext>.Delegate RisingPlugin<SamplePluginContext>.PluginInfo RisingPlugin<SamplePluginContext>.PluginConfig RisingPlugin<SamplePluginContext>.PluginTarget RisingPlugin<SamplePluginContext>.Harmony RisingPlugin<SamplePluginContext>.EventBus RisingPlugin<SamplePluginContext>.SystemManager RisingPlugin<SamplePluginContext>.ProcessorManager RisingPlugin<SamplePluginContext>.DatabaseManager RisingPlugin<SamplePluginContext>.EngineManager RisingPlugin<SamplePluginContext>.Context BasePlugin.AddComponent<T>() BasePlugin.Log BasePlugin.Config object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OnInitialize() Called when the plugin is initialized (after OnPreLoad()). public override void OnInitialize() OnLoad() Called when the plugin is loaded (after OnInitialize()). public override void OnLoad() OnPreLoad() Called when the BepInEx plugin Load is called. public override void OnPreLoad() OnUnload() Called when the plugin is unloaded. public override bool OnUnload() Returns bool"
  },
  "api/RisingV.Sample.Processors.SampleProcessor.html": {
    "href": "api/RisingV.Sample.Processors.SampleProcessor.html",
    "title": "Class SampleProcessor | RisingV.Sample",
    "summary": "Class SampleProcessor Namespace RisingV.Sample.Processors Assembly RisingV.Sample.dll SampleProcessor is a default processor for handling DeathEvent. Call this processor from a game system hook with an event (in this example DeathEvent). This could be an internal game event or a custom event you define. public class SampleProcessor : DefaultProcessor<DeathEvent>, IProcessor<DeathEvent, bool?>, IProcessor, IManageable<ProcessorManager>, IManageable Inheritance object ProcessorBase<DeathEvent, bool?> DefaultProcessor<DeathEvent> SampleProcessor Implements IProcessor<DeathEvent, bool?> IProcessor IManageable<ProcessorManager> IManageable Inherited Members ProcessorBase<DeathEvent, bool?>.CanProcess(DeathEvent, bool) ProcessorBase<DeathEvent, bool?>.PreProcess(DeathEvent, out bool?) ProcessorBase<DeathEvent, bool?>.PostProcess(DeathEvent, out bool?) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanProcess(DeathEvent, bool) Determines whether the processor can handle the given event and whether it is a post-processing event. public override bool CanProcess(DeathEvent @event, bool isPost) Parameters event DeathEvent The event to process. isPost bool Indicates whether the event is a post-processing event. Returns bool true if the processor can handle the event; otherwise, false. PostProcess(DeathEvent, out bool?) Processes the given event and returns a token indicating the processing result. public override ProcessToken PostProcess(DeathEvent @event, out bool? result) Parameters event DeathEvent The event to process. result bool? An output parameter that will hold the result of the processing. Returns ProcessToken A token indicating the processing result. PreProcess(DeathEvent, out bool?) Pre-process the event before it is processed. public override ProcessToken PreProcess(DeathEvent @event, out bool? result) Parameters event DeathEvent The event to process. result bool? The result of the processing. Returns ProcessToken A token indicating whether to continue processing or not."
  },
  "api/RisingV.Sample.Processors.html": {
    "href": "api/RisingV.Sample.Processors.html",
    "title": "Namespace RisingV.Sample.Processors | RisingV.Sample",
    "summary": "Namespace RisingV.Sample.Processors Classes SampleProcessor SampleProcessor is a default processor for handling DeathEvent. Call this processor from a game system hook with an event (in this example DeathEvent). This could be an internal game event or a custom event you define."
  },
  "api/RisingV.Sample.SamplePluginContext.html": {
    "href": "api/RisingV.Sample.SamplePluginContext.html",
    "title": "Class SamplePluginContext | RisingV.Sample",
    "summary": "Class SamplePluginContext Namespace RisingV.Sample Assembly RisingV.Sample.dll public class SamplePluginContext : PluginContext, IPluginContext, IPluginComponent, IManageable<PluginComponentsManager>, IManageable Inheritance object PluginContext SamplePluginContext Implements IPluginContext IPluginComponent IManageable<PluginComponentsManager> IManageable Inherited Members PluginContext.PluginInfo PluginContext.PluginConfig PluginContext.Harmony PluginContext.PluginTarget object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SamplePluginContext() public SamplePluginContext()"
  },
  "api/RisingV.Sample.Systems.SampleSystem.html": {
    "href": "api/RisingV.Sample.Systems.SampleSystem.html",
    "title": "Class SampleSystem | RisingV.Sample",
    "summary": "Class SampleSystem Namespace RisingV.Sample.Systems Assembly RisingV.Sample.dll public class SampleSystem : System<SampleSystemConfig>, ISystem, IManageableLifecycle<SystemManager>, IManageableLifecycle, IReloadable, IManageable<SystemManager>, IManageable Inheritance object System System<SampleSystemConfig> SampleSystem Implements ISystem IManageableLifecycle<SystemManager> IManageableLifecycle IReloadable IManageable<SystemManager> IManageable Inherited Members System<SampleSystemConfig>.Config System.OnEnable() System.OnDisable() System.SetEnabled(bool) System.Enabled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(SystemManager, List<IPlugin>) Initializes the lifecycle of the manager with a specific type. public override void Initialize(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Load(SystemManager, List<IPlugin>) Loads the manager and its dependencies with a specific type. public override void Load(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Ready(SystemManager, List<IPlugin>) Prepares the manager for use with a specific type, typically after loading. public override void Ready(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Reload(SystemManager, List<IPlugin>, ReloadReason) Reloads the manager and its dependencies with a specific type. public override void Reload(SystemManager manager, List<IPlugin> plugins, ReloadReason reason) Parameters manager SystemManager plugins List<IPlugin> reason ReloadReason Terminate(SystemManager, List<IPlugin>) Terminates the manager and cleans up resources with a specific type. public override void Terminate(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin> Unload(SystemManager, List<IPlugin>) Unloads the manager and its dependencies with a specific type. public override void Unload(SystemManager manager, List<IPlugin> plugins) Parameters manager SystemManager plugins List<IPlugin>"
  },
  "api/RisingV.Sample.Systems.SampleSystemConfig.html": {
    "href": "api/RisingV.Sample.Systems.SampleSystemConfig.html",
    "title": "Class SampleSystemConfig | RisingV.Sample",
    "summary": "Class SampleSystemConfig Namespace RisingV.Sample.Systems Assembly RisingV.Sample.dll public class SampleSystemConfig : SystemConfig, ISystemConfig, IConfig Inheritance object BaseConfig SystemConfig SampleSystemConfig Implements ISystemConfig IConfig Inherited Members SystemConfig.Log BaseConfig.Start() BaseConfig.Initialize() BaseConfig.Ready() BaseConfig.Unload() BaseConfig.Terminate() BaseConfig.Reload(ReloadReason) BaseConfig.Bind<T>(string, string, T, string) BaseConfig.GetValue<T>(string, string, T) BaseConfig.GetEntry<T>(string, string) BaseConfig.ConfigRelativePath BaseConfig.ConfigFileName BaseConfig.ConfigFile BaseConfig.ConfigsToLoad BaseConfig.Enabled object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SampleSystemConfig() public SampleSystemConfig() Properties ListenToEvents public ConfigEntry<bool>? ListenToEvents { get; } Property Value ConfigEntry<bool> Methods Load() public override void Load()"
  },
  "api/RisingV.Sample.Systems.html": {
    "href": "api/RisingV.Sample.Systems.html",
    "title": "Namespace RisingV.Sample.Systems | RisingV.Sample",
    "summary": "Namespace RisingV.Sample.Systems Classes SampleSystem SampleSystemConfig"
  },
  "api/RisingV.Sample.html": {
    "href": "api/RisingV.Sample.html",
    "title": "Namespace RisingV.Sample | RisingV.Sample",
    "summary": "Namespace RisingV.Sample Namespaces RisingV.Sample.Engines RisingV.Sample.Events RisingV.Sample.Processors RisingV.Sample.Systems Classes MyPluginInfo Plugin SamplePluginContext"
  },
  "docs/Sample.html": {
    "href": "docs/Sample.html",
    "title": "Sample | RisingV.Sample",
    "summary": "Sample"
  },
  "index.html": {
    "href": "index.html",
    "title": "Purpose | RisingV.Sample",
    "summary": "A sample project for integrating RisingV mods. Purpose Mod Integration: Demonstrates how to integrate RisingV mods into a project. Mod Management: Shows how to manage mods using the RisingV plugin. Mod Development: Provides a foundation for developing your own RisingV mods. Community Support: Join the RisingV community for help and collaboration. Getting Started Before starting: Check which branch best fits your need: main full use example (current) no-plugin full example without using RisingVPlugin lite light weight sample with only RisingV.Shared and BepInEx base plugin. Clone the Repository: git clone https://github.com/RisingV-Mods/RisingV.Sample.git cd RisingV.Sample Install Dependencies: dotnet add package RisingV.Shared dotnet add package RisingV.Core dotnet add package RisingV.Scripting Build the Project: dotnet build RisingV.Sample/RisingV.Sample.csproj Check the shared docs for more details on how to use the RisingV plugin and integrate mods into your project. Community Join the V Rising Mod Community Discord for modding support, updates, and discussions! License GNU GPL-3.0. See LICENSE for details."
  },
  "items": []
}
